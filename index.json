{
  "api/SMLHelper.Assets.CustomModelData.html": {
    "href": "api/SMLHelper.Assets.CustomModelData.html",
    "title": "Class CustomModelData",
    "keywords": "Class CustomModelData Custom Model data that SMLHelper will use to apply custom looks to certain prefabs. Inheritance System.Object CustomModelData Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets Assembly : SMLHelper.dll Syntax public class CustomModelData Properties | Improve this Doc View Source CustomIllumMap The custom lighting texture for the item. This property is optional and will default to the standard illum texture for batteries or power cells. Declaration public Texture2D CustomIllumMap { get; } Property Value Type Description Texture2D | Improve this Doc View Source CustomIllumStrength The custom lighting strength for the item. This property is will default to 1.0f if the CustomIllumMap is set but will use the default value for batteries or power cells if no CustomIllumMap is set. Declaration public float CustomIllumStrength { get; } Property Value Type Description System.Single | Improve this Doc View Source CustomNormalMap The custom bump texture for the item. This property is optional and will default to the standard bump texture for batteries or power cells. Declaration public Texture2D CustomNormalMap { get; } Property Value Type Description Texture2D | Improve this Doc View Source CustomSpecMap The custom Spec Texture for the item. This property is optional and will default to the standard spec texture for batteries or power cells. Declaration public Texture2D CustomSpecMap { get; } Property Value Type Description Texture2D | Improve this Doc View Source CustomTexture The custom skin for the item. This property is optional and will default to the standard texture for batteries or power cells. Declaration public Texture2D CustomTexture { get; } Property Value Type Description Texture2D | Improve this Doc View Source TargetPath Name of the model to target with these changes. Declaration public string TargetPath { get; } Property Value Type Description System.String Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.CustomModelData.Targets.html": {
    "href": "api/SMLHelper.Assets.CustomModelData.Targets.html",
    "title": "Class CustomModelData.Targets",
    "keywords": "Class CustomModelData.Targets A class with some common target names Inheritance System.Object CustomModelData.Targets Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets Assembly : SMLHelper.dll Syntax public static class Targets Fields | Improve this Doc View Source Battery Declaration public static string Battery Field Value Type Description System.String | Improve this Doc View Source Beacon Declaration public static string Beacon Field Value Type Description System.String | Improve this Doc View Source BeaconFP Declaration public static string BeaconFP Field Value Type Description System.String | Improve this Doc View Source DoubleTank Declaration public static string DoubleTank Field Value Type Description System.String | Improve this Doc View Source Fabricator Declaration public static string Fabricator Field Value Type Description System.String | Improve this Doc View Source Gravsphere Declaration public static string Gravsphere Field Value Type Description System.String | Improve this Doc View Source Gravsphere_tower_01 Declaration public static string Gravsphere_tower_01 Field Value Type Description System.String | Improve this Doc View Source Gravsphere_tower_02 Declaration public static string Gravsphere_tower_02 Field Value Type Description System.String | Improve this Doc View Source Gravsphere_tower_03 Declaration public static string Gravsphere_tower_03 Field Value Type Description System.String | Improve this Doc View Source Gravsphere_tower_04 Declaration public static string Gravsphere_tower_04 Field Value Type Description System.String | Improve this Doc View Source Gravsphere_tower_05 Declaration public static string Gravsphere_tower_05 Field Value Type Description System.String | Improve this Doc View Source IonBattery Declaration public static string IonBattery Field Value Type Description System.String | Improve this Doc View Source Knife Declaration public static string Knife Field Value Type Description System.String | Improve this Doc View Source LaserCutter Declaration public static string LaserCutter Field Value Type Description System.String | Improve this Doc View Source MedicalCabinetBase Declaration public static string MedicalCabinetBase Field Value Type Description System.String | Improve this Doc View Source MedicalCabinetDoor Declaration public static string MedicalCabinetDoor Field Value Type Description System.String | Improve this Doc View Source MedicalCabinetMedKit Declaration public static string MedicalCabinetMedKit Field Value Type Description System.String | Improve this Doc View Source Radio Declaration public static string Radio Field Value Type Description System.String | Improve this Doc View Source Tank Declaration public static string Tank Field Value Type Description System.String | Improve this Doc View Source Welder Declaration public static string Welder Field Value Type Description System.String"
  },
  "api/SMLHelper.Assets.CustomPrefab.html": {
    "href": "api/SMLHelper.Assets.CustomPrefab.html",
    "title": "Class CustomPrefab",
    "keywords": "Class CustomPrefab Represents a class with everything needed to make a custom prefab work. Inheritance System.Object CustomPrefab Implements ICustomPrefab Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets Assembly : SMLHelper.dll Syntax public class CustomPrefab : ICustomPrefab Fields | Improve this Doc View Source PrefabInfo Declaration public required PrefabInfo Field Value Type Description required Implements ICustomPrefab Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) GadgetExtensions.SetRecipe(ICustomPrefab, RecipeData) GadgetExtensions.SetRecipeFromJson(ICustomPrefab, String) GadgetExtensions.SetUnlock(ICustomPrefab, TechType, Int32) GadgetExtensions.SetEquipment(ICustomPrefab, EquipmentType) GadgetExtensions.CreateFabricator(ICustomPrefab, out CraftTree.Type) GadgetExtensions.SetSpawns(ICustomPrefab, SpawnLocation[]) GadgetExtensions.SetSpawns(ICustomPrefab, LootDistributionData.BiomeData[]) GadgetExtensions.SetSpawns(ICustomPrefab, WorldEntityInfo, LootDistributionData.BiomeData[]) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.Gadgets.CraftingGadget.html": {
    "href": "api/SMLHelper.Assets.Gadgets.CraftingGadget.html",
    "title": "Class CraftingGadget",
    "keywords": "Class CraftingGadget Represents a crafting gadget Inheritance System.Object Gadget CraftingGadget Inherited Members Gadget.prefab Gadget.Build() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets.Gadgets Assembly : SMLHelper.dll Syntax public class CraftingGadget : Gadget Fields | Improve this Doc View Source RecipeData The crafting recipe to add. Declaration public required RecipeData Field Value Type Description required Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.Gadgets.EquipmentGadget.html": {
    "href": "api/SMLHelper.Assets.Gadgets.EquipmentGadget.html",
    "title": "Class EquipmentGadget",
    "keywords": "Class EquipmentGadget Represents an equipment gadget Inheritance System.Object Gadget EquipmentGadget Inherited Members Gadget.prefab Gadget.Build() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets.Gadgets Assembly : SMLHelper.dll Syntax public class EquipmentGadget : Gadget Fields | Improve this Doc View Source EquipmentType The type of equipment slot this item can fit into. Declaration public required EquipmentType Field Value Type Description required Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.Gadgets.FabricatorGadget.html": {
    "href": "api/SMLHelper.Assets.Gadgets.FabricatorGadget.html",
    "title": "Class FabricatorGadget",
    "keywords": "Class FabricatorGadget Represents a craft tree/fabricator gadget. Inheritance System.Object Gadget FabricatorGadget Inherited Members Gadget.prefab System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets.Gadgets Assembly : SMLHelper.dll Syntax public class FabricatorGadget : Gadget Constructors | Improve this Doc View Source FabricatorGadget(ICustomPrefab) Constructs a fabricator gadget. Declaration public FabricatorGadget(ICustomPrefab prefab) Parameters Type Name Description ICustomPrefab prefab Properties | Improve this Doc View Source CraftTreeType The ID value for your custom craft tree. Declaration public CraftTree.Type CraftTreeType { get; } Property Value Type Description CraftTree.Type | Improve this Doc View Source Root The root node of the crafting tree. Declaration public ModCraftTreeRoot Root { get; } Property Value Type Description ModCraftTreeRoot Methods | Improve this Doc View Source AddCraftNode(String, String) Safely attempts to add a new crafting node to the custom crafting tree of this fabricator. If the modded TechType is not found, the craft node will not be added. Declaration public FabricatorGadget AddCraftNode(string moddedTechType, string parentTabId = null) Parameters Type Name Description System.String moddedTechType The modded item to craft. System.String parentTabId Optional. The parent tab of this craft node. When this value is null, the craft node will be added to the root of the craft tree. Returns Type Description FabricatorGadget | Improve this Doc View Source AddCraftNode(TechType, String) Adds a new crafting node to the custom crafting tree of this fabricator. Declaration public FabricatorGadget AddCraftNode(TechType techType, string parentTabId = null) Parameters Type Name Description TechType techType The item to craft. System.String parentTabId Optional. The parent tab of this craft node. When this value is null, the craft node will be added to the root of the craft tree. Returns Type Description FabricatorGadget | Improve this Doc View Source AddTabNode(String, String, Atlas.Sprite, String) Adds a new tab node to the custom crafting tree of this fabricator. Declaration public FabricatorGadget AddTabNode(string tabId, string displayText, Atlas.Sprite tabIcon, string parentTabId = null) Parameters Type Name Description System.String tabId The internal ID for the tab node. System.String displayText The in-game text shown for the tab node. Atlas.Sprite tabIcon The sprite used for the tab node. System.String parentTabId Optional. The parent tab of this tab. When this value is null, the tab will be added to the root of the craft tree. Returns Type Description FabricatorGadget | Improve this Doc View Source Build() Declaration protected override void Build() Overrides Gadget.Build() Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.Gadgets.Gadget.html": {
    "href": "api/SMLHelper.Assets.Gadgets.Gadget.html",
    "title": "Class Gadget",
    "keywords": "Class Gadget Represents a class that handles registers to game code. Inheritance System.Object Gadget CraftingGadget EquipmentGadget FabricatorGadget ScanningGadget Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets.Gadgets Assembly : SMLHelper.dll Syntax public abstract class Gadget Constructors | Improve this Doc View Source Gadget(ICustomPrefab) Constructs a gadget instance. Declaration public Gadget(ICustomPrefab prefab) Parameters Type Name Description ICustomPrefab prefab The custom prefab to operate on. Fields | Improve this Doc View Source prefab The custom prefab to operate on Declaration protected readonly ICustomPrefab prefab Field Value Type Description ICustomPrefab Methods | Improve this Doc View Source Build() Where the data actually gets registered to the game. This is called after prefab register and PostRegisters in . Declaration protected abstract void Build() Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.Gadgets.GadgetExtensions.html": {
    "href": "api/SMLHelper.Assets.Gadgets.GadgetExtensions.html",
    "title": "Class GadgetExtensions",
    "keywords": "Class GadgetExtensions Represents extension methods for the Gadget class. Inheritance System.Object GadgetExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets.Gadgets Assembly : SMLHelper.dll Syntax public static class GadgetExtensions Methods | Improve this Doc View Source CreateFabricator(ICustomPrefab, out CraftTree.Type) Creates a craft tree for this prefab. The created craft tree is immediately returned after this method is executed. Declaration public static FabricatorGadget CreateFabricator(this ICustomPrefab customPrefab, out CraftTree.Type treeType) Parameters Type Name Description ICustomPrefab customPrefab The custom prefab to set equipment slot for. CraftTree.Type treeType The created custom craft tree type. Returns Type Description FabricatorGadget An instance to the created FabricatorGadget to continue the fabricator settings on. | Improve this Doc View Source SetEquipment(ICustomPrefab, EquipmentType) Sets the type of equipment slot this item can fit into. Declaration public static EquipmentGadget SetEquipment(this ICustomPrefab customPrefab, EquipmentType equipmentType) Parameters Type Name Description ICustomPrefab customPrefab The custom prefab to set equipment slot for. EquipmentType equipmentType The type of equipment slot this item can fit into. Returns Type Description EquipmentGadget An instance to the created EquipmentGadget to continue the equipment settings on. | Improve this Doc View Source SetRecipe(ICustomPrefab, RecipeData) Adds recipe to this custom prefab. Declaration public static CraftingGadget SetRecipe(this ICustomPrefab customPrefab, RecipeData recipeData) Parameters Type Name Description ICustomPrefab customPrefab The custom prefab to add recipe to. RecipeData recipeData The recipe to add. Returns Type Description CraftingGadget An instance to the created CraftingGadget to continue the recipe settings on. | Improve this Doc View Source SetRecipeFromJson(ICustomPrefab, String) Adds recipe from a json file to this custom prefab. Declaration public static CraftingGadget SetRecipeFromJson(this ICustomPrefab customPrefab, string filePath) Parameters Type Name Description ICustomPrefab customPrefab The custom prefab to add recipe to. System.String filePath The path to the recipe json file. A string with valid recipe data json is also acceptable. Returns Type Description CraftingGadget An instance to the created CraftingGadget to continue the recipe settings on. | Improve this Doc View Source SetSpawns(ICustomPrefab, LootDistributionData.BiomeData[]) Adds biome spawns for this custom prefab with default values. Declaration public static ICustomPrefab SetSpawns(this ICustomPrefab customPrefab, params LootDistributionData.BiomeData[] biomesToSpawnIn) Parameters Type Name Description ICustomPrefab customPrefab The custom prefab to add biome spawns for. LootDistributionData.BiomeData [] biomesToSpawnIn The biomes to spawn in. Returns Type Description ICustomPrefab A reference to this instance after the operation has completed. | Improve this Doc View Source SetSpawns(ICustomPrefab, SpawnLocation[]) Adds coordinated spawns for this custom prefab. Declaration public static ICustomPrefab SetSpawns(this ICustomPrefab customPrefab, params SpawnLocation[] spawnLocations) Parameters Type Name Description ICustomPrefab customPrefab The custom prefab to add coordinated spawns for. SpawnLocation [] spawnLocations The spawn locations to spawn in. Returns Type Description ICustomPrefab A reference to this instance after the operation has completed. | Improve this Doc View Source SetSpawns(ICustomPrefab, WorldEntityInfo, LootDistributionData.BiomeData[]) Adds biome spawns for this custom prefab. Declaration public static ICustomPrefab SetSpawns(this ICustomPrefab customPrefab, WorldEntityInfo entityInfo, params LootDistributionData.BiomeData[] biomesToSpawnIn) Parameters Type Name Description ICustomPrefab customPrefab The custom prefab to add biome spawns for. WorldEntityInfo entityInfo Data on how the biome spawner should treat this object as. LootDistributionData.BiomeData [] biomesToSpawnIn The biomes to spawn in. Returns Type Description ICustomPrefab A reference to this instance after the operation has completed. | Improve this Doc View Source SetUnlock(ICustomPrefab, TechType, Int32) Adds unlocks to this custom prefab. Declaration public static ScanningGadget SetUnlock(this ICustomPrefab customPrefab, TechType requiredForUnlock, int fragmentsToScan = 1) Parameters Type Name Description ICustomPrefab customPrefab The custom prefab to add unlocks to. TechType requiredForUnlock The blueprint to set as a requirement. System.Int32 fragmentsToScan Amount of requiredForUnlock that must be scanned to unlock this item. Returns Type Description ScanningGadget An instance to the created ScanningGadget to continue the scanning settings on."
  },
  "api/SMLHelper.Assets.Gadgets.html": {
    "href": "api/SMLHelper.Assets.Gadgets.html",
    "title": "Namespace SMLHelper.Assets.Gadgets",
    "keywords": "Namespace SMLHelper.Assets.Gadgets Classes CraftingGadget Represents a crafting gadget EquipmentGadget Represents an equipment gadget FabricatorGadget Represents a craft tree/fabricator gadget. Gadget Represents a class that handles registers to game code. GadgetExtensions Represents extension methods for the Gadget class. ScanningGadget Represents a scanning gadget."
  },
  "api/SMLHelper.Assets.Gadgets.ScanningGadget.html": {
    "href": "api/SMLHelper.Assets.Gadgets.ScanningGadget.html",
    "title": "Class ScanningGadget",
    "keywords": "Class ScanningGadget Represents a scanning gadget. Inheritance System.Object Gadget ScanningGadget Inherited Members Gadget.prefab Gadget.Build() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets.Gadgets Assembly : SMLHelper.dll Syntax public class ScanningGadget : Gadget Fields | Improve this Doc View Source TechType The blueprint that must first be scanned or picked up to unlocked this item. Declaration public required TechType Field Value Type Description required Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.html": {
    "href": "api/SMLHelper.Assets.html",
    "title": "Namespace SMLHelper.Assets",
    "keywords": "Namespace SMLHelper.Assets Classes CustomModelData Custom Model data that SMLHelper will use to apply custom looks to certain prefabs. CustomModelData.Targets A class with some common target names CustomPrefab Represents a class with everything needed to make a custom prefab work. ModPrefabCache Class used by SMLHelper.Assets.PrefabInfo to store game objects that used as prefabs. Game objects in cache are inactive and will not be on scene. Interfaces ICustomPrefab Specifies the contract for a custom prefab. Delegates PrefabFactoryAsync A delegate for prefab construction used by SMLHelper to create game objects dynamically. PrefabPostProcessorAsync Delegate used for SMLHelper's prefab post processing event to modify the processed prefab via a dynamic method."
  },
  "api/SMLHelper.Assets.ICustomPrefab.html": {
    "href": "api/SMLHelper.Assets.ICustomPrefab.html",
    "title": "Interface ICustomPrefab",
    "keywords": "Interface ICustomPrefab Specifies the contract for a custom prefab. Namespace : SMLHelper.Assets Assembly : SMLHelper.dll Syntax public interface ICustomPrefab Properties | Improve this Doc View Source Info The prefab info for this custom prefab. Declaration PrefabInfo Info { get; } Property Value Type Description SMLHelper.Assets.PrefabInfo | Improve this Doc View Source OnPrefabPostProcess Function that will be executed after the SMLHelper's basic processing for Prefab has been completed. Declaration PrefabPostProcessorAsync OnPrefabPostProcess { get; } Property Value Type Description PrefabPostProcessorAsync | Improve this Doc View Source Prefab Function which constructs a game object for this prefab. Declaration PrefabFactoryAsync Prefab { get; } Property Value Type Description PrefabFactoryAsync Methods | Improve this Doc View Source AddGadget<TGadget>(TGadget) Adds a gadget to this custom prefab. Declaration TGadget AddGadget<TGadget>(TGadget gadget) where TGadget : Gadget Parameters Type Name Description TGadget gadget The gadget to add Returns Type Description TGadget A reference to the added gadget. Type Parameters Name Description TGadget Type of the gadget. | Improve this Doc View Source AddOnRegister(Action) Adds an action that will be called during the registration of the prefab. Declaration void AddOnRegister(Action onRegisterCallback) Parameters Type Name Description System.Action onRegisterCallback The action that will be called. | Improve this Doc View Source AddOnUnregister(Action) Adds an action that will be called when this prefab has performed an unregister operation. Declaration void AddOnUnregister(Action onUnregisterCallback) Parameters Type Name Description System.Action onUnregisterCallback The action that will be called. | Improve this Doc View Source GetGadget(Type) Gets the gadget instance associated with the specified gadget type attached to this custom prefab. Declaration Gadget GetGadget(Type gadgetType) Parameters Type Name Description System.Type gadgetType The type of the gadget to get. Returns Type Description Gadget The gadget instance if found, otherwise; null .\"/> | Improve this Doc View Source GetGadget<TGadget>() Gets the gadget instance associated with the specified gadget type attached to this custom prefab. Declaration TGadget GetGadget<TGadget>() where TGadget : Gadget Returns Type Description TGadget The gadget instance if found, otherwise; null .\"/> Type Parameters Name Description TGadget The type of the gadget to get. | Improve this Doc View Source RemoveGadget(Type) Removes the gadget with the specified type. Declaration bool RemoveGadget(Type gadget) Parameters Type Name Description System.Type gadget The type of the gadget to remove. Returns Type Description System.Boolean true if the gadget was successfully found and removed, otherwise; false . This method returns false if the gadget type was not found in this custom prefab. | Improve this Doc View Source RemoveGadget<TGadget>() Removes the gadget with the specified type. Declaration bool RemoveGadget<TGadget>() where TGadget : Gadget Returns Type Description System.Boolean true if the gadget was successfully found and removed, otherwise; false . This method returns false if the gadget type was not found in this custom prefab. Type Parameters Name Description TGadget The type of the gadget to remove. | Improve this Doc View Source TryGetGadget<TGadget>(out TGadget) Gets the gadget instance associated with the specified gadget type attached to this custom prefab. Declaration bool TryGetGadget<TGadget>(out TGadget gadget) where TGadget : Gadget Parameters Type Name Description TGadget gadget The instance of the gadget found associated with the type. If not found, this will be null instead. Returns Type Description System.Boolean true if the gadget associated with type was found, otherwise; false . Type Parameters Name Description TGadget The type of the gadget to get. Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) GadgetExtensions.SetRecipe(ICustomPrefab, RecipeData) GadgetExtensions.SetRecipeFromJson(ICustomPrefab, String) GadgetExtensions.SetUnlock(ICustomPrefab, TechType, Int32) GadgetExtensions.SetEquipment(ICustomPrefab, EquipmentType) GadgetExtensions.CreateFabricator(ICustomPrefab, out CraftTree.Type) GadgetExtensions.SetSpawns(ICustomPrefab, SpawnLocation[]) GadgetExtensions.SetSpawns(ICustomPrefab, LootDistributionData.BiomeData[]) GadgetExtensions.SetSpawns(ICustomPrefab, WorldEntityInfo, LootDistributionData.BiomeData[]) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.ModPrefabCache.html": {
    "href": "api/SMLHelper.Assets.ModPrefabCache.html",
    "title": "Class ModPrefabCache",
    "keywords": "Class ModPrefabCache Class used by SMLHelper.Assets.PrefabInfo to store game objects that used as prefabs. Game objects in cache are inactive and will not be on scene. Inheritance System.Object ModPrefabCache Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets Assembly : SMLHelper.dll Syntax public static class ModPrefabCache Methods | Improve this Doc View Source AddPrefab(GameObject, Boolean) Add prefab to cache Declaration public static void AddPrefab(GameObject prefab, bool autoremove = true) Parameters Type Name Description GameObject prefab Prefab to add. System.Boolean autoremove Is prefab needed to be removed from cache after use. Prefabs without autoremove flag can be safely deleted by | Improve this Doc View Source AddPrefabCopy(GameObject, Boolean) Add prefab copy to cache (instatiated copy will not run 'Awake') Declaration public static GameObject AddPrefabCopy(GameObject prefab, bool autoremove = true) Parameters Type Name Description GameObject prefab Prefab to copy and add. System.Boolean autoremove Is prefab copy needed to be removed from cache after use. Prefabs without autoremove flag can be safely deleted by Returns Type Description GameObject Prefab copy"
  },
  "api/SMLHelper.Assets.PrefabFactoryAsync.html": {
    "href": "api/SMLHelper.Assets.PrefabFactoryAsync.html",
    "title": "Delegate PrefabFactoryAsync",
    "keywords": "Delegate PrefabFactoryAsync A delegate for prefab construction used by SMLHelper to create game objects dynamically. Namespace : SMLHelper.Assets Assembly : SMLHelper.dll Syntax public delegate IEnumerator PrefabFactoryAsync(TaskResult<GameObject> gameObject); Parameters Type Name Description TaskResult < GameObject > gameObject Returns Type Description System.Collections.IEnumerator Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.PrefabPostProcessorAsync.html": {
    "href": "api/SMLHelper.Assets.PrefabPostProcessorAsync.html",
    "title": "Delegate PrefabPostProcessorAsync",
    "keywords": "Delegate PrefabPostProcessorAsync Delegate used for SMLHelper's prefab post processing event to modify the processed prefab via a dynamic method. Namespace : SMLHelper.Assets Assembly : SMLHelper.dll Syntax public delegate IEnumerator PrefabPostProcessorAsync(GameObject gameObject); Parameters Type Name Description GameObject gameObject Returns Type Description System.Collections.IEnumerator Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.PrefabTemplates.CloneTemplate.html": {
    "href": "api/SMLHelper.Assets.PrefabTemplates.CloneTemplate.html",
    "title": "Class CloneTemplate",
    "keywords": "Class CloneTemplate Represents a prefab clone template. Inheritance System.Object PrefabTemplate CloneTemplate Inherited Members PrefabTemplate.info System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets.PrefabTemplates Assembly : SMLHelper.dll Syntax public class CloneTemplate : PrefabTemplate Constructors | Improve this Doc View Source CloneTemplate(PrefabInfo, String) Creates a CloneTemplate instance. Declaration public CloneTemplate(PrefabInfo info, string classIdToClone) Parameters Type Name Description SMLHelper.Assets.PrefabInfo info The prefab info to base this template off of. System.String classIdToClone The class ID to clone and use for this template. | Improve this Doc View Source CloneTemplate(PrefabInfo, TechType) Creates a CloneTemplate instance. Declaration public CloneTemplate(PrefabInfo info, TechType techTypeToClone) Parameters Type Name Description SMLHelper.Assets.PrefabInfo info The prefab info to base this template off of. TechType techTypeToClone The tech type to clone and use for this template. Properties | Improve this Doc View Source ModelDatas Reskinning model data to apply to the clone. Declaration public List<CustomModelData> ModelDatas { get; } Property Value Type Description System.Collections.Generic.List < CustomModelData > | Improve this Doc View Source ModifyPrefab Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more. Declaration public Action<GameObject> ModifyPrefab { get; set; } Property Value Type Description System.Action < GameObject > Methods | Improve this Doc View Source GetPrefabAsync(TaskResult<GameObject>) Gets the appropriate cloned prefab. Declaration public override IEnumerator GetPrefabAsync(TaskResult<GameObject> gameObject) Parameters Type Name Description TaskResult < GameObject > gameObject The cloned prefab is set into this argument. If the provided task result already has a game object, this method will only call the ModifyPrefab callback on it. Otherwise; Creates a prefab clone, then runs the ModifyPrefab callback. Returns Type Description System.Collections.IEnumerator A coroutine operation. Must be used with either yield return , or . Overrides PrefabTemplate.GetPrefabAsync(TaskResult<GameObject>) Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.PrefabTemplates.EnergySourceTemplate.html": {
    "href": "api/SMLHelper.Assets.PrefabTemplates.EnergySourceTemplate.html",
    "title": "Class EnergySourceTemplate",
    "keywords": "Class EnergySourceTemplate Represents an energy source template. This template is capable of returning a Battery or a Power Cell. Inheritance System.Object PrefabTemplate EnergySourceTemplate Inherited Members PrefabTemplate.info System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets.PrefabTemplates Assembly : SMLHelper.dll Syntax public class EnergySourceTemplate : PrefabTemplate Constructors | Improve this Doc View Source EnergySourceTemplate(PrefabInfo, Int32) Creates an EnergySourceTemplate instance. Declaration public EnergySourceTemplate(PrefabInfo info, int energyAmount) Parameters Type Name Description SMLHelper.Assets.PrefabInfo info The prefab info to base this template off of. System.Int32 energyAmount The amount of energy this source should have. Properties | Improve this Doc View Source IsPowerCell Is this energy source a Power Cell? Declaration public bool IsPowerCell { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UseIonModelAsBase Determines which model to use as the base. If true , this template will use the Precursor Ion Battery or Power cell. Otherwise; uses the default Battery or Power Cell models. Declaration public bool UseIonModelAsBase { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source GetPrefabAsync(TaskResult<GameObject>) Gets the appropriate energy source prefab. Declaration public override IEnumerator GetPrefabAsync(TaskResult<GameObject> gameObject) Parameters Type Name Description TaskResult < GameObject > gameObject The energy source prefab is set into this argument. If the provided task result already has a game object, it will try to set the necessary components first. Otherwise; sets the standard Battery or Power Cell. Returns Type Description System.Collections.IEnumerator A coroutine operation. Must be used with either yield return , or . Overrides PrefabTemplate.GetPrefabAsync(TaskResult<GameObject>) Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.PrefabTemplates.FabricatorTemplate.html": {
    "href": "api/SMLHelper.Assets.PrefabTemplates.FabricatorTemplate.html",
    "title": "Class FabricatorTemplate",
    "keywords": "Class FabricatorTemplate Represents an fabricator template. This template is capable of returning a Fabricator or a Workbench. Inheritance System.Object PrefabTemplate FabricatorTemplate Inherited Members PrefabTemplate.info System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets.PrefabTemplates Assembly : SMLHelper.dll Syntax public class FabricatorTemplate : PrefabTemplate Constructors | Improve this Doc View Source FabricatorTemplate(PrefabInfo, CraftTree.Type) Creates a FabricatorTemplate instance. Declaration public FabricatorTemplate(PrefabInfo info, CraftTree.Type craftTreeType) Parameters Type Name Description SMLHelper.Assets.PrefabInfo info The prefab info to base this template off of. CraftTree.Type craftTreeType The craft tree type for this template. Properties | Improve this Doc View Source ColorTint Applies a simple color tint to the fabricator model. Declaration public Color? ColorTint { get; set; } Property Value Type Description System.Nullable < Color > | Improve this Doc View Source ConstructableFlags Indicates where this fabricator can be placed. By default, this is set to the following flags: Inside for all fabricators. Wall for non-workbench fabricators. And Ground and Rotatable for workbench. Declaration public ConstructableFlags ConstructableFlags { get; set; } Property Value Type Description ConstructableFlags | Improve this Doc View Source FabricatorModel The model this template will use. Leave it to Custom if you've got a custom model. Declaration public FabricatorTemplate.Model FabricatorModel { get; set; } Property Value Type Description FabricatorTemplate.Model Methods | Improve this Doc View Source GetPrefabAsync(TaskResult<GameObject>) Gets the appropriate fabricator prefab. Declaration public override IEnumerator GetPrefabAsync(TaskResult<GameObject> gameObject) Parameters Type Name Description TaskResult < GameObject > gameObject The fabricator prefab is set into this argument. If the provided task result already has a game object, it will try to set the necessary components first. Otherwise; sets the standard Battery or Power Cell. Returns Type Description System.Collections.IEnumerator A coroutine operation. Must be used with either yield return , or . Overrides PrefabTemplate.GetPrefabAsync(TaskResult<GameObject>) Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Assets.PrefabTemplates.FabricatorTemplate.Model.html": {
    "href": "api/SMLHelper.Assets.PrefabTemplates.FabricatorTemplate.Model.html",
    "title": "Enum FabricatorTemplate.Model",
    "keywords": "Enum FabricatorTemplate.Model Defines a list of available models for your custom fabricator. Namespace : SMLHelper.Assets.PrefabTemplates Assembly : SMLHelper.dll Syntax public enum Model Fields Name Description Custom Use this option only if you want to provide your own custom model for your fabricator. To use this value, you must pass a non-null game object to the task result in the GetPrefabAsync(TaskResult<GameObject>) method. Fabricator The regular fabricator like the one in the life pod. MoonPool The style of fabricator found in the Moon Pool and the Cyclops sub. Workbench The modification station that upgrades your equipment. Extension Methods EnumExtensions.IsDefinedByDefault<FabricatorTemplate.Model>()"
  },
  "api/SMLHelper.Assets.PrefabTemplates.html": {
    "href": "api/SMLHelper.Assets.PrefabTemplates.html",
    "title": "Namespace SMLHelper.Assets.PrefabTemplates",
    "keywords": "Namespace SMLHelper.Assets.PrefabTemplates Classes CloneTemplate Represents a prefab clone template. EnergySourceTemplate Represents an energy source template. This template is capable of returning a Battery or a Power Cell. FabricatorTemplate Represents an fabricator template. This template is capable of returning a Fabricator or a Workbench. PrefabTemplate Represents the contract for a prefab template. Enums FabricatorTemplate.Model Defines a list of available models for your custom fabricator."
  },
  "api/SMLHelper.Assets.PrefabTemplates.PrefabTemplate.html": {
    "href": "api/SMLHelper.Assets.PrefabTemplates.PrefabTemplate.html",
    "title": "Class PrefabTemplate",
    "keywords": "Class PrefabTemplate Represents the contract for a prefab template. Inheritance System.Object PrefabTemplate CloneTemplate EnergySourceTemplate FabricatorTemplate Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Assets.PrefabTemplates Assembly : SMLHelper.dll Syntax public abstract class PrefabTemplate Constructors | Improve this Doc View Source PrefabTemplate(PrefabInfo) Constructs a prefab template. Declaration public PrefabTemplate(PrefabInfo info) Parameters Type Name Description SMLHelper.Assets.PrefabInfo info The prefab info to base this template off of. Fields | Improve this Doc View Source info The prefab info to operate on. Declaration protected readonly PrefabInfo info Field Value Type Description SMLHelper.Assets.PrefabInfo Methods | Improve this Doc View Source GetPrefabAsync(TaskResult<GameObject>) Gets a prefab of this template type. The returned object can be accessed via . Declaration public abstract IEnumerator GetPrefabAsync(TaskResult<GameObject> gameObject) Parameters Type Name Description TaskResult < GameObject > gameObject The prefab computation result is set into this argument. If the provided task result already has a game object set to it, it will try to set the necessary components first. Otherwise; sets a default implementation of this entity type. Returns Type Description System.Collections.IEnumerator A coroutine operation. Must be used with either yield return , or . Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Commands.ConsoleCommandAttribute.html": {
    "href": "api/SMLHelper.Commands.ConsoleCommandAttribute.html",
    "title": "Class ConsoleCommandAttribute",
    "keywords": "Class ConsoleCommandAttribute Attribute used to signify the decorated method should be called in response to a console command. Decorated method must be both langword_csharp_public and static . Inheritance System.Object System.Attribute ConsoleCommandAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Commands Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public sealed class ConsoleCommandAttribute : Attribute, _Attribute Remarks The command can take parameters and will respect optional parameters as outlined in the method's signature. Supported parameter types: System.String , System.Boolean , System.Int32 , System.Single , System.Double . If the method has a return type, it will be printed to both the screen and the log. Constructors | Improve this Doc View Source ConsoleCommandAttribute(String) Signifies the decorated method should be called when the given command is entered in the dev console. Decorated method must be both langword_csharp_public and static . Declaration public ConsoleCommandAttribute(string command) Parameters Type Name Description System.String command The unique, case-insensitive command that when entered into the dev console will call the decorated method. Remarks The command can take parameters and will respect optional parameters as outlined in the method's signature. Supported parameter types: System.String , System.Boolean , System.Int32 , System.Single , System.Double . If the method has a return type, it will be printed to both the screen and the log. See Also RegisterConsoleCommand(String, Type, String, Type[]) RegisterConsoleCommand<T>(String, T) RegisterConsoleCommands(Type) ConsoleCommandsHandler Properties | Improve this Doc View Source Command The unique, case-insensitive command that when entered, will call the decorated method. Declaration public string Command { get; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also RegisterConsoleCommand(String, Type, String, Type[]) RegisterConsoleCommand<T>(String, T) RegisterConsoleCommands(Type) ConsoleCommandsHandler"
  },
  "api/SMLHelper.Commands.html": {
    "href": "api/SMLHelper.Commands.html",
    "title": "Namespace SMLHelper.Commands",
    "keywords": "Namespace SMLHelper.Commands Classes ConsoleCommandAttribute Attribute used to signify the decorated method should be called in response to a console command. Decorated method must be both langword_csharp_public and static ."
  },
  "api/SMLHelper.Crafting.html": {
    "href": "api/SMLHelper.Crafting.html",
    "title": "Namespace SMLHelper.Crafting",
    "keywords": "Namespace SMLHelper.Crafting Classes ModCraftTreeCraft A crafting node of a CraftTree. This is the last node on a tree; The one that actually crafts something. ModCraftTreeLinkingNode Abstract class that provides methods for adding new nodes into the crafting tree. ModCraftTreeNode Basic data structure of a crafting tree node. ModCraftTreeRoot The root node of a CraftTree. The whole tree starts here. Build up your custom crafting tree from this root node using the AddCraftingNode and AddTabNode methods. This tree will be automatically patched into the game. For more advanced usage, you can replace the default value of CraftTreeCreation with your own custom function. ModCraftTreeTab A tab node of a CraftTree. Tab nodes help organize crafting nodes by grouping them into categories. RecipeData A class that fully describes a recipe for a identified item."
  },
  "api/SMLHelper.Crafting.ModCraftTreeCraft.html": {
    "href": "api/SMLHelper.Crafting.ModCraftTreeCraft.html",
    "title": "Class ModCraftTreeCraft",
    "keywords": "Class ModCraftTreeCraft A crafting node of a CraftTree. This is the last node on a tree; The one that actually crafts something. Inheritance System.Object ModCraftTreeNode ModCraftTreeCraft Inherited Members ModCraftTreeNode.Action ModCraftTreeNode.TechType ModCraftTreeNode.Name ModCraftTreeNode.CraftNode ModCraftTreeNode.RemoveNode() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Crafting Assembly : SMLHelper.dll Syntax public class ModCraftTreeCraft : ModCraftTreeNode Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also ModCraftTreeNode"
  },
  "api/SMLHelper.Crafting.ModCraftTreeLinkingNode.html": {
    "href": "api/SMLHelper.Crafting.ModCraftTreeLinkingNode.html",
    "title": "Class ModCraftTreeLinkingNode",
    "keywords": "Class ModCraftTreeLinkingNode Abstract class that provides methods for adding new nodes into the crafting tree. Inheritance System.Object ModCraftTreeNode ModCraftTreeLinkingNode ModCraftTreeRoot ModCraftTreeTab Inherited Members ModCraftTreeNode.Action ModCraftTreeNode.TechType ModCraftTreeNode.Name ModCraftTreeNode.CraftNode ModCraftTreeNode.RemoveNode() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Crafting Assembly : SMLHelper.dll Syntax public abstract class ModCraftTreeLinkingNode : ModCraftTreeNode Fields | Improve this Doc View Source ChildNodes The child nodes linked bellow this node. Declaration public readonly List<ModCraftTreeNode> ChildNodes Field Value Type Description System.Collections.Generic.List < ModCraftTreeNode > Methods | Improve this Doc View Source AddCraftingNode(IEnumerable<TechType>) Creates a collection of new crafting nodes for the crafting tree and links it to the calling node. Declaration public void AddCraftingNode(IEnumerable<TechType> techTypes) Parameters Type Name Description System.Collections.Generic.IEnumerable < TechType > techTypes The TechTypes to be crafted. | Improve this Doc View Source AddCraftingNode(TechType) Creates a new crafting node for the crafting tree and links it to the calling node. Declaration public void AddCraftingNode(TechType techType) Parameters Type Name Description TechType techType The TechType to be crafted. | Improve this Doc View Source AddCraftingNode(TechType[]) Creates a collection of new crafting nodes for the crafting tree and links it to the calling node. Declaration public void AddCraftingNode(params TechType[] techTypes) Parameters Type Name Description TechType [] techTypes The TechTypes to be crafted. | Improve this Doc View Source AddModdedCraftingNode(String) Creates a new crafting node for a modded item and links it to the calling node. If the modded item isn't present for the player, this call is safely ignored. Declaration public void AddModdedCraftingNode(string moddedTechTypeName) Parameters Type Name Description System.String moddedTechTypeName The internal name of the custom TechType to be crafted. Remarks If the player doesn't have the mod for this TechType installed, then nothing will happen. | Improve this Doc View Source AddTabNode(String) Creates a new tab node for the crafting tree and links it to the calling node. Declaration public ModCraftTreeTab AddTabNode(string nameID) Parameters Type Name Description System.String nameID The name/ID of this node. Returns Type Description ModCraftTreeTab A new tab node linked to the root node and ready to use. | Improve this Doc View Source AddTabNode(String, String, Atlas.Sprite) Creates a new tab node for the crafting tree and links it to the calling node. Declaration public ModCraftTreeTab AddTabNode(string nameID, string displayText, Atlas.Sprite sprite) Parameters Type Name Description System.String nameID The name/ID of this node. System.String displayText The hover text to display in-game. Atlas.Sprite sprite The custom sprite to display on this tab node. Returns Type Description ModCraftTreeTab A new tab node linked to the root node and ready to use. | Improve this Doc View Source AddTabNode(String, String, Sprite) Creates a new tab node for the crafting tree and links it to the calling node. Declaration public ModCraftTreeTab AddTabNode(string nameID, string displayText, Sprite sprite) Parameters Type Name Description System.String nameID The name/ID of this node. System.String displayText The hover text to display in-game. Sprite sprite The custom sprite to display on this tab node. Returns Type Description ModCraftTreeTab A new tab node linked to the root node and ready to use. | Improve this Doc View Source GetCraftingNode(TechType) Gets the crafting node from the calling node. Declaration public ModCraftTreeCraft GetCraftingNode(TechType techType) Parameters Type Name Description TechType techType The TechType whose node to get. Returns Type Description ModCraftTreeCraft | Improve this Doc View Source GetNode(String) Gets the node associated with the ID specified. Used if you don't know whether node is a tab or a craft node. Declaration public ModCraftTreeNode GetNode(string nameID) Parameters Type Name Description System.String nameID Returns Type Description ModCraftTreeNode | Improve this Doc View Source GetTabNode(String) Gets the tab from the calling node. Declaration public ModCraftTreeTab GetTabNode(string nameID) Parameters Type Name Description System.String nameID The name id of the tab to get. Returns Type Description ModCraftTreeTab Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also ModCraftTreeNode"
  },
  "api/SMLHelper.Crafting.ModCraftTreeNode.html": {
    "href": "api/SMLHelper.Crafting.ModCraftTreeNode.html",
    "title": "Class ModCraftTreeNode",
    "keywords": "Class ModCraftTreeNode Basic data structure of a crafting tree node. Inheritance System.Object ModCraftTreeNode ModCraftTreeCraft ModCraftTreeLinkingNode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Crafting Assembly : SMLHelper.dll Syntax public abstract class ModCraftTreeNode Fields | Improve this Doc View Source Action The action this node takes in the crafting tree. Declaration public readonly TreeAction Action Field Value Type Description TreeAction | Improve this Doc View Source CraftNode The the in-game representation of this node. Declaration public CraftNode CraftNode Field Value Type Description CraftNode | Improve this Doc View Source Name The name ID for this tab node. Declaration public readonly string Name Field Value Type Description System.String | Improve this Doc View Source TechType The tech type ID associated to this node. For item nodes, it is the item ID to be crafted. For root and tab nodes, this is always . Declaration public readonly TechType TechType Field Value Type Description TechType Methods | Improve this Doc View Source RemoveNode() Removes the calling node from parent. Declaration public void RemoveNode() Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Crafting.ModCraftTreeRoot.html": {
    "href": "api/SMLHelper.Crafting.ModCraftTreeRoot.html",
    "title": "Class ModCraftTreeRoot",
    "keywords": "Class ModCraftTreeRoot The root node of a CraftTree. The whole tree starts here. Build up your custom crafting tree from this root node using the AddCraftingNode and AddTabNode methods. This tree will be automatically patched into the game. For more advanced usage, you can replace the default value of CraftTreeCreation with your own custom function. Inheritance System.Object ModCraftTreeNode ModCraftTreeLinkingNode ModCraftTreeRoot Inherited Members ModCraftTreeLinkingNode.ChildNodes ModCraftTreeLinkingNode.AddTabNode(String, String, Atlas.Sprite) ModCraftTreeLinkingNode.AddTabNode(String, String, Sprite) ModCraftTreeLinkingNode.AddTabNode(String) ModCraftTreeLinkingNode.GetTabNode(String) ModCraftTreeLinkingNode.GetCraftingNode(TechType) ModCraftTreeLinkingNode.GetNode(String) ModCraftTreeLinkingNode.AddCraftingNode(TechType) ModCraftTreeLinkingNode.AddCraftingNode(TechType[]) ModCraftTreeLinkingNode.AddCraftingNode(IEnumerable<TechType>) ModCraftTreeLinkingNode.AddModdedCraftingNode(String) ModCraftTreeNode.Action ModCraftTreeNode.TechType ModCraftTreeNode.Name ModCraftTreeNode.CraftNode ModCraftTreeNode.RemoveNode() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Crafting Assembly : SMLHelper.dll Syntax public class ModCraftTreeRoot : ModCraftTreeLinkingNode Fields | Improve this Doc View Source CraftTreeCreation The craft tree creation function. Default implementaion returns a new instantiated with SMLHelper.Crafting.ModCraftTreeRoot.SchemeAsString and the root . You can replace this function with your own to have more control of the crafting tree when it is being created. Declaration public Func<CraftTree> CraftTreeCreation Field Value Type Description System.Func < CraftTree > Methods | Improve this Doc View Source AddCraftNode(String, String) Safely attempts to add a new crafting node to the custom crafting tree of this fabricator. If the modded TechType is not found, the craft node will not be added. Declaration public ModCraftTreeRoot AddCraftNode(string moddedTechType, string parentTabId = null) Parameters Type Name Description System.String moddedTechType The modded item to craft. System.String parentTabId Optional. The parent tab of this craft node. When this value is null, the craft node will be added to the root of the craft tree. Returns Type Description ModCraftTreeRoot | Improve this Doc View Source AddCraftNode(TechType, String) Adds a new crafting node to the custom crafting tree of this fabricator. Declaration public ModCraftTreeRoot AddCraftNode(TechType techType, string parentTabId = null) Parameters Type Name Description TechType techType The item to craft. System.String parentTabId Optional. The parent tab of this craft node. When this value is null, the craft node will be added to the root of the craft tree. Returns Type Description ModCraftTreeRoot | Improve this Doc View Source AddTabNode(String, String, Atlas.Sprite, String) Adds a new tab node to the custom crafting tree of this fabricator. Declaration public ModCraftTreeRoot AddTabNode(string tabId, string displayText, Atlas.Sprite tabSprite, string parentTabId = null) Parameters Type Name Description System.String tabId The internal ID for the tab node. System.String displayText The in-game text shown for the tab node. Atlas.Sprite tabSprite The sprite used for the tab node. System.String parentTabId Optional. The parent tab of this tab. When this value is null, the tab will be added to the root of the craft tree. Returns Type Description ModCraftTreeRoot | Improve this Doc View Source AddTabNode(String, String, UnityEngine.Sprite, String) Adds a new tab node to the custom crafting tree of this fabricator. Declaration public ModCraftTreeRoot AddTabNode(string tabId, string displayText, UnityEngine.Sprite tabSprite, string parentTabId = null) Parameters Type Name Description System.String tabId The internal ID for the tab node. System.String displayText The in-game text shown for the tab node. UnityEngine.Sprite tabSprite The sprite used for the tab node. System.String parentTabId Optional. The parent tab of this tab. When this value is null, the tab will be added to the root of the craft tree. Returns Type Description ModCraftTreeRoot | Improve this Doc View Source GetNode(String[]) Gets the node at the specified path from the root. Declaration public ModCraftTreeNode GetNode(params string[] stepsToNode) Parameters Type Name Description System.String [] stepsToNode The steps to the target tab. These must match the id value of the CraftNode in the crafting tree you're targeting. Do not include \"root\" in this path. Returns Type Description ModCraftTreeNode If the specified tab node is found, returns that ModCraftTreeNode ; Otherwise, returns null. | Improve this Doc View Source GetTabNode(String[]) Gets the tab node at the specified path from the root. Declaration public ModCraftTreeTab GetTabNode(params string[] stepsToTab) Parameters Type Name Description System.String [] stepsToTab The steps to the target tab. These must match the id value of the CraftNode in the crafting tree you're targeting. Do not include \"root\" in this path. Returns Type Description ModCraftTreeTab If the specified tab node is found, returns that ModCraftTreeTab ; Otherwise, returns null. Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also ModCraftTreeLinkingNode"
  },
  "api/SMLHelper.Crafting.ModCraftTreeTab.html": {
    "href": "api/SMLHelper.Crafting.ModCraftTreeTab.html",
    "title": "Class ModCraftTreeTab",
    "keywords": "Class ModCraftTreeTab A tab node of a CraftTree. Tab nodes help organize crafting nodes by grouping them into categories. Inheritance System.Object ModCraftTreeNode ModCraftTreeLinkingNode ModCraftTreeTab Inherited Members ModCraftTreeLinkingNode.ChildNodes ModCraftTreeLinkingNode.AddTabNode(String, String, Atlas.Sprite) ModCraftTreeLinkingNode.AddTabNode(String, String, Sprite) ModCraftTreeLinkingNode.AddTabNode(String) ModCraftTreeLinkingNode.GetTabNode(String) ModCraftTreeLinkingNode.GetCraftingNode(TechType) ModCraftTreeLinkingNode.GetNode(String) ModCraftTreeLinkingNode.AddCraftingNode(TechType) ModCraftTreeLinkingNode.AddCraftingNode(TechType[]) ModCraftTreeLinkingNode.AddCraftingNode(IEnumerable<TechType>) ModCraftTreeLinkingNode.AddModdedCraftingNode(String) ModCraftTreeNode.Action ModCraftTreeNode.TechType ModCraftTreeNode.Name ModCraftTreeNode.CraftNode ModCraftTreeNode.RemoveNode() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Crafting Assembly : SMLHelper.dll Syntax public class ModCraftTreeTab : ModCraftTreeLinkingNode Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also ModCraftTreeLinkingNode"
  },
  "api/SMLHelper.Crafting.RecipeData.html": {
    "href": "api/SMLHelper.Crafting.RecipeData.html",
    "title": "Class RecipeData",
    "keywords": "Class RecipeData A class that fully describes a recipe for a identified item. Inheritance System.Object RecipeData Namespace : SMLHelper.Crafting Assembly : SMLHelper.dll Syntax public class RecipeData : ITechData Constructors | Improve this Doc View Source RecipeData() Initializes a new instance of the RecipeData class a custom recipe. Declaration public RecipeData() | Improve this Doc View Source RecipeData(Ingredient[]) Initializes a new instance of the RecipeData class for a custom recipe with a collection of ingridients. Declaration public RecipeData(params Ingredient[] ingredients) Parameters Type Name Description Ingredient [] ingredients The ingredients. | Improve this Doc View Source RecipeData(List<Ingredient>) Initializes a new instance of the RecipeData class for a custom recipe with a list of ingridients. Declaration public RecipeData(List<Ingredient> ingredients) Parameters Type Name Description System.Collections.Generic.List < Ingredient > ingredients The ingredients. Fields | Improve this Doc View Source Ingredients The list of ingredients required for this recipe. Declaration public List<Ingredient> Ingredients Field Value Type Description System.Collections.Generic.List < Ingredient > | Improve this Doc View Source LinkedItems The items that will also be created when this recipe is crafted. Declaration public List<TechType> LinkedItems Field Value Type Description System.Collections.Generic.List < TechType > Properties | Improve this Doc View Source craftAmount Gets or sets the how many copies of the item are created when crafting this recipe. Declaration public int craftAmount { get; set; } Property Value Type Description System.Int32 The quantity of the item this recipe yields. | Improve this Doc View Source ingredientCount Gets the number of different ingredients for this recipe. Declaration public int ingredientCount { get; } Property Value Type Description System.Int32 The number of ingredients for this recipe. | Improve this Doc View Source linkedItemCount Gets the number of items linked to this recipe. Declaration public int linkedItemCount { get; } Property Value Type Description System.Int32 The number of linked items. Methods | Improve this Doc View Source GetIngredient(Int32) Gets the ingredient at the specified index. Declaration public Ingredient GetIngredient(int index) Parameters Type Name Description System.Int32 index The index. Returns Type Description Ingredient The at the requested the index if the index is value; Otherwise returns null. | Improve this Doc View Source GetLinkedItem(Int32) Gets the linked item at the specified index. Declaration public TechType GetLinkedItem(int index) Parameters Type Name Description System.Int32 index The index. Returns Type Description TechType The at the requested the index if the index is value; Otherwise returns null. Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.FMod.FModMultiSounds.html": {
    "href": "api/SMLHelper.FMod.FModMultiSounds.html",
    "title": "Class FModMultiSounds",
    "keywords": "Class FModMultiSounds This class is used to register FMOD events with multiple sounds in one event. Inheritance System.Object FModMultiSounds Implements IFModSound Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.FMod Assembly : SMLHelper.dll Syntax public class FModMultiSounds : IFModSound Constructors | Improve this Doc View Source FModMultiSounds(AudioClip[], MODE, String, Boolean) Constructs a new instance of FModMultiSounds . Used to register FMOD events with multiple sounds in one event. Declaration public FModMultiSounds(AudioClip[] clips, MODE mode, string busPath, bool randomizeSounds = false) Parameters Type Name Description AudioClip [] clips The clips to register for this object. MODE mode The mode to set the clips to. Cannot be MODE.LOOP_NORMAL or MODE.LOOP_BIDI . System.String busPath path to play these sounds under. System.Boolean randomizeSounds Makes the sounds play in a randomized order. when false , sounds will play subsequently. | Improve this Doc View Source FModMultiSounds(Sound[], String, Boolean) Constructs a new instance of FModMultiSounds . Used to register FMOD events with multiple sounds in one event. Declaration public FModMultiSounds(Sound[] sounds, string busPath, bool randomizeSounds = false) Parameters Type Name Description Sound [] sounds The sounds to register for this object. Please ensure that none of the sounds are on or modes. System.String busPath path to play these sounds under. System.Boolean randomizeSounds Makes the sounds play in a randomized order. when false , sounds will play subsequently. | Improve this Doc View Source FModMultiSounds(String[], MODE, String, Boolean) Constructs a new instance of FModMultiSounds . Used to register FMOD events with multiple sounds in one event. Declaration public FModMultiSounds(string[] soundPaths, MODE mode, string busPath, bool randomizeSounds = false) Parameters Type Name Description System.String [] soundPaths The sound paths to register for this object. Paths must be relative to the base game folder. MODE mode The mode to set the clips to. Cannot be MODE.LOOP_NORMAL or MODE.LOOP_BIDI . System.String busPath path to play these sounds under. System.Boolean randomizeSounds Makes the sounds play in a randomized order. when false , sounds will play subsequently. Fields | Improve this Doc View Source randomizeSounds Makes the sounds play in a randomized order. when false , sounds will play subsequently. Declaration public bool randomizeSounds Field Value Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IFModSound.TryPlaySound(out Channel) Declaration bool IFModSound.TryPlaySound(out Channel channel) Parameters Type Name Description Channel channel Returns Type Description System.Boolean Implements IFModSound Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.FMod.html": {
    "href": "api/SMLHelper.FMod.html",
    "title": "Namespace SMLHelper.FMod",
    "keywords": "Namespace SMLHelper.FMod Classes FModMultiSounds This class is used to register FMOD events with multiple sounds in one event."
  },
  "api/SMLHelper.FMod.Interfaces.html": {
    "href": "api/SMLHelper.FMod.Interfaces.html",
    "title": "Namespace SMLHelper.FMod.Interfaces",
    "keywords": "Namespace SMLHelper.FMod.Interfaces Interfaces IFModSound This interface is used to integrate with CustomSoundHandler ."
  },
  "api/SMLHelper.FMod.Interfaces.IFModSound.html": {
    "href": "api/SMLHelper.FMod.Interfaces.IFModSound.html",
    "title": "Interface IFModSound",
    "keywords": "Interface IFModSound This interface is used to integrate with CustomSoundHandler . Namespace : SMLHelper.FMod.Interfaces Assembly : SMLHelper.dll Syntax public interface IFModSound Methods | Improve this Doc View Source TryPlaySound(out Channel) Defines how to play sound in this object. Declaration bool TryPlaySound(out Channel channel) Parameters Type Name Description Channel channel The channel on which the sound was created. Returns Type Description System.Boolean If the sound was reported as played. Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Handlers.ConsoleCommandsHandler.html": {
    "href": "api/SMLHelper.Handlers.ConsoleCommandsHandler.html",
    "title": "Class ConsoleCommandsHandler",
    "keywords": "Class ConsoleCommandsHandler A handler class for registering your custom console commands. Inheritance System.Object ConsoleCommandsHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class ConsoleCommandsHandler Methods | Improve this Doc View Source RegisterConsoleCommand(String, Type, String, Type[]) Registers your custom console command by targeting a langword_csharp_public static method. Declaration public static void RegisterConsoleCommand(string command, Type declaringType, string methodName, Type[] parameters) Parameters Type Name Description System.String command The case-insensitive command to register. System.Type declaringType The declaring type that holds the method to call when the command is entered. System.String methodName The name of the method to call within the declaring type when the command is entered. Method must be static . System.Type [] parameters The parameter types the method receives, for targeting overloads. Remarks Target method must be static . The command can take parameters and will respect optional parameters as outlined in the method's signature. Supported parameter types: System.String , System.Boolean , System.Int32 , System.Single , System.Double . If the method has a return type, it will be printed to both the screen and the log. See Also RegisterConsoleCommand<T>(String, T) RegisterConsoleCommands(Type) ConsoleCommandAttribute | Improve this Doc View Source RegisterConsoleCommand<T>(String, T) Registers your custom console command by passing a langword_csharp_delegate . Declaration public static void RegisterConsoleCommand<T>(string command, T callback) where T : Delegate Parameters Type Name Description System.String command The case-insensitive command to register. T callback The callback to handle the command. Type Parameters Name Description T The delegate type. Remarks Supported parameter types: System.String , System.Boolean , System.Int32 , System.Single , System.Double . If the delegate has a return type, it will be printed to both the screen and the log. See Also RegisterConsoleCommand(String, Type, String, Type[]) RegisterConsoleCommands(Type) ConsoleCommandAttribute | Improve this Doc View Source RegisterConsoleCommands(Type) Registers langword_csharp_public static methods decorated with the ConsoleCommandAttribute within the type as console commands. Declaration public static void RegisterConsoleCommands(Type type) Parameters Type Name Description System.Type type Remarks Target methods must be static . Commands can take parameters and will respect optional parameters as outlined in the method's signature. Supported parameter types: System.String , System.Boolean , System.Int32 , System.Single , System.Double . If a decorated method has a return type, it will be printed to both the screen and the log. See Also RegisterConsoleCommand(String, Type, String, Type[]) RegisterConsoleCommand<T>(String, T) ConsoleCommandAttribute"
  },
  "api/SMLHelper.Handlers.CoordinatedSpawnsHandler.html": {
    "href": "api/SMLHelper.Handlers.CoordinatedSpawnsHandler.html",
    "title": "Class CoordinatedSpawnsHandler",
    "keywords": "Class CoordinatedSpawnsHandler a Handler that handles and registers Coordinated ( spawns). Inheritance System.Object CoordinatedSpawnsHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class CoordinatedSpawnsHandler Methods | Improve this Doc View Source RegisterCoordinatedSpawn(SpawnInfo) Registers a Coordinated Spawn Declaration public static void RegisterCoordinatedSpawn(SpawnInfo spawnInfo) Parameters Type Name Description SpawnInfo spawnInfo the SpawnInfo to spawn | Improve this Doc View Source RegisterCoordinatedSpawns(List<SpawnInfo>) registers Many Coordinated Spawns. Declaration public static void RegisterCoordinatedSpawns(List<SpawnInfo> spawnInfos) Parameters Type Name Description System.Collections.Generic.List < SpawnInfo > spawnInfos The SpawnInfos to spawn. | Improve this Doc View Source RegisterCoordinatedSpawnsForOneTechType(TechType, Dictionary<Vector3, Vector3>) Registers Multiple Coordinated spawns with rotations for one single passed TechType Declaration public static void RegisterCoordinatedSpawnsForOneTechType(TechType techTypeToSpawn, Dictionary<Vector3, Vector3> coordinatesAndRotationsToSpawnTo) Parameters Type Name Description TechType techTypeToSpawn The TechType to spawn System.Collections.Generic.Dictionary < Vector3 , Vector3 > coordinatesAndRotationsToSpawnTo the coordinates(Key) and the rotations(Value) the should spawn to | Improve this Doc View Source RegisterCoordinatedSpawnsForOneTechType(TechType, List<Vector3>) Registers Multiple Coordinated spawns for one single passed TechType Declaration public static void RegisterCoordinatedSpawnsForOneTechType(TechType techTypeToSpawn, List<Vector3> coordinatesToSpawnTo) Parameters Type Name Description TechType techTypeToSpawn The TechType to spawn System.Collections.Generic.List < Vector3 > coordinatesToSpawnTo the coordinates the should spawn to"
  },
  "api/SMLHelper.Handlers.CraftDataHandler.html": {
    "href": "api/SMLHelper.Handlers.CraftDataHandler.html",
    "title": "Class CraftDataHandler",
    "keywords": "Class CraftDataHandler A handler class for adding and editing crafted items. Inheritance System.Object CraftDataHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class CraftDataHandler Methods | Improve this Doc View Source AddBuildable(TechType) Allows you to add items to the buildable list. Declaration public static void AddBuildable(TechType techType) Parameters Type Name Description TechType techType The TechType which you want to add to the buildable list. | Improve this Doc View Source AddToGroup(TechGroup, TechCategory, TechType) Allows you to add items to the game's internal grouping system. Required if you want to make buildable items show up in the Habitat Builder or show in the Blueprints Tab of the PDA. Declaration public static void AddToGroup(TechGroup group, TechCategory category, TechType techType) Parameters Type Name Description TechGroup group The TechGroup you want to add your TechType to. TechCategory category The TechCategory (in the TechGroup) you want to add your TechType to. TechType techType The TechType you want to add. | Improve this Doc View Source AddToGroup(TechGroup, TechCategory, TechType, TechType) Allows you to add items to the game's internal grouping system. Required if you want to make buildable items show up in the Habitat Builder or show in the Blueprints Tab of the PDA. Declaration public static void AddToGroup(TechGroup group, TechCategory category, TechType techType, TechType after) Parameters Type Name Description TechGroup group The TechGroup you want to add your TechType to. TechCategory category The TechCategory (in the TechGroup) you want to add your TechType to. TechType techType The TechType you want to add. TechType after Added TechType will be added after this TechType, for sorting purposes. | Improve this Doc View Source ConvertToRecipeData(ITechData) Converts the games ITechData into SMLHelpers RecipeData. Declaration public static RecipeData ConvertToRecipeData(ITechData iTechData) Parameters Type Name Description ITechData iTechData Returns Type Description RecipeData | Improve this Doc View Source GetModdedRecipeData(TechType) Safely accesses the crafting data from a modded item. WARNING: This method is highly dependent on mod load order. Make sure your mod is loading after the mod whose RecipeData you are trying to access. Declaration public static RecipeData GetModdedRecipeData(TechType techType) Parameters Type Name Description TechType techType The TechType whose RecipeData you want to access. Returns Type Description RecipeData The RecipeData from the modded item if it exists; Otherwise, returns null . | Improve this Doc View Source GetRecipeData(TechType) Safely accesses the crafting data from any item. WARNING: This method is highly dependent on mod load order. Make sure your mod is loading after the mod whose RecipeData you are trying to access. Declaration public static RecipeData GetRecipeData(TechType techType) Parameters Type Name Description TechType techType The TechType whose RecipeData you want to access. Returns Type Description RecipeData Returns RecipeData if it exists; Otherwise, returns null . | Improve this Doc View Source RemoveFromGroup(TechGroup, TechCategory, TechType) Allows you to remove an existing TechType from the game's internal group system. Declaration public static void RemoveFromGroup(TechGroup group, TechCategory category, TechType techType) Parameters Type Name Description TechGroup group The TechGroup in which the TechType is located. TechCategory category The TechCategory in which the TechType is located. TechType techType The TechType which you want to remove. | Improve this Doc View Source SetBackgroundType(TechType, CraftData.BackgroundType) Allows you to edit inventory background colors for TechTypes. Declaration public static void SetBackgroundType(TechType techType, CraftData.BackgroundType backgroundColor) Parameters Type Name Description TechType techType The TechType whose BackgroundType you want to edit. CraftData.BackgroundType backgroundColor The background color for that TechType. | Improve this Doc View Source SetCookedVariant(TechType, TechType) Allows you to edit the cooked creature list, i.e. associate the unedible TechType to the cooked TechType. Can be used for existing TechTypes too. Declaration public static void SetCookedVariant(TechType uncooked, TechType cooked) Parameters Type Name Description TechType uncooked The TechType whose cooked creature counterpart to edit. TechType cooked The cooked creature counterpart for that TechType. | Improve this Doc View Source SetCraftingTime(TechType, Single) Allows you to edit crafting times for TechTypes. Can be used for existing TechTypes too. Declaration public static void SetCraftingTime(TechType techType, float time) Parameters Type Name Description TechType techType The TechType whose crafting time you want to edit. System.Single time The crafting time, in seconds, for that TechType. | Improve this Doc View Source SetEatingSound(TechType, String) Sets the eating sound for the provided TechType. Declaration public static void SetEatingSound(TechType consumable, string soundPath) Parameters Type Name Description TechType consumable The item being consumed during . System.String soundPath The sound path. Value values are - \"event:/player/drink\" - \"event:/player/drink_stillsuit\" - \"event:/player/use_first_aid\" - \"event:/player/eat\" (default) | Improve this Doc View Source SetEquipmentType(TechType, EquipmentType) Allows you to edit EquipmentTypes for TechTypes. Can be used for existing TechTypes too. Declaration public static void SetEquipmentType(TechType techType, EquipmentType equipmentType) Parameters Type Name Description TechType techType The TechType whose EqiupmentType you want to edit. EquipmentType equipmentType The EquipmentType for that TechType. | Improve this Doc View Source SetHarvestFinalCutBonus(TechType, Int32) Allows you to edit how much additional slices/seeds are given upon last knife hit. Can be used for existing TechTypes too. Declaration public static void SetHarvestFinalCutBonus(TechType techType, int bonus) Parameters Type Name Description TechType techType The TechType whose final cut bonus you want to edit. System.Int32 bonus The number of additional slices/seeds you'll receive on last cut. | Improve this Doc View Source SetHarvestOutput(TechType, TechType) Allows you to edit harvest output, i.e. what TechType you get when you \"harvest\" a TechType. Can be used for existing TechTypes too. Declaration public static void SetHarvestOutput(TechType techType, TechType harvestOutput) Parameters Type Name Description TechType techType The TechType whose harvest output you want to edit. TechType harvestOutput The harvest output for that TechType. | Improve this Doc View Source SetHarvestType(TechType, HarvestType) Allows you to edit how TechTypes are harvested. Can be used for existing TechTypes too. Declaration public static void SetHarvestType(TechType techType, HarvestType harvestType) Parameters Type Name Description TechType techType The TechType whose HarvestType you want to edit. HarvestType harvestType The HarvestType for that TechType. | Improve this Doc View Source SetItemSize(TechType, Int32, Int32) Allows you to edit item sizes for TechTypes. Can be used for existing TechTypes too. Declaration public static void SetItemSize(TechType techType, int x, int y) Parameters Type Name Description TechType techType The TechType whose item size you want to edit. System.Int32 x The width of the item System.Int32 y The height of the item | Improve this Doc View Source SetItemSize(TechType, Vector2int) Allows you to edit item sizes for TechTypes. Can be used for existing TechTypes too. Declaration public static void SetItemSize(TechType techType, Vector2int size) Parameters Type Name Description TechType techType The TechType whose item size you want to edit. Vector2int size The item size for that TechType. | Improve this Doc View Source SetQuickSlotType(TechType, QuickSlotType) Allows you to edit QuickSlotType for TechTypes. Can be used for existing TechTypes too. Careful: This has to be called after SetRecipeData(TechType, ITechData) and SetRecipeData(TechType, RecipeData) . Declaration public static void SetQuickSlotType(TechType techType, QuickSlotType slotType) Parameters Type Name Description TechType techType The TechType whose QuickSlotType you want to edit. QuickSlotType slotType The QuickSlotType for that TechType. | Improve this Doc View Source SetRecipeData(TechType, ITechData) Allows you to edit recipes, i.e. RecipeData for TechTypes. Can be used for existing TechTypes too. Declaration public static void SetRecipeData(TechType techType, ITechData techData) Parameters Type Name Description TechType techType The TechType whose RecipeData you want to edit. ITechData techData The ITechData for that TechType. See Also RecipeData | Improve this Doc View Source SetRecipeData(TechType, RecipeData) Allows you to edit recipes, i.e. RecipeData for TechTypes. Can be used for existing TechTypes too. Declaration public static void SetRecipeData(TechType techType, RecipeData recipeData) Parameters Type Name Description TechType techType The TechType whose RecipeData you want to edit. RecipeData recipeData The RecipeData for that TechType. See Also RecipeData"
  },
  "api/SMLHelper.Handlers.CraftTreeHandler.html": {
    "href": "api/SMLHelper.Handlers.CraftTreeHandler.html",
    "title": "Class CraftTreeHandler",
    "keywords": "Class CraftTreeHandler A handler class for creating and editing of crafting trees. Inheritance System.Object CraftTreeHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class CraftTreeHandler Methods | Improve this Doc View Source AddCraftingNode(CraftTree.Type, TechType) Adds a new crafting node to the root of the specified crafting tree Declaration public static void AddCraftingNode(CraftTree.Type craftTree, TechType craftingItem) Parameters Type Name Description CraftTree.Type craftTree The target craft tree to edit. TechType craftingItem The item to craft. | Improve this Doc View Source AddCraftingNode(CraftTree.Type, TechType, String[]) Adds a new crafting node to the root of the specified crafting tree, at the provided tab location. Declaration public static void AddCraftingNode(CraftTree.Type craftTree, TechType craftingItem, params string[] stepsToTab) Parameters Type Name Description CraftTree.Type craftTree The target craft tree to edit. TechType craftingItem The item to craft. System.String [] stepsToTab The steps to the target tab. These must match the id value of the CraftNode in the crafting tree you're targeting. Do not include \"root\" in this path. | Improve this Doc View Source AddTabNode(CraftTree.Type, String, String, Atlas.Sprite) Adds a new tab node to the root of the specified crafting tree. Declaration public static void AddTabNode(CraftTree.Type craftTree, string name, string displayName, Atlas.Sprite sprite) Parameters Type Name Description CraftTree.Type craftTree The target craft tree to edit. System.String name The ID of the tab node. Must be unique! System.String displayName The display name of the tab, which will show up when you hover your mouse on the tab. Atlas.Sprite sprite The sprite of the tab. | Improve this Doc View Source AddTabNode(CraftTree.Type, String, String, Atlas.Sprite, String[]) Adds a new tab node to the root of the specified crafting tree, at the specified tab location. Declaration public static void AddTabNode(CraftTree.Type craftTree, string name, string displayName, Atlas.Sprite sprite, params string[] stepsToTab) Parameters Type Name Description CraftTree.Type craftTree The target craft tree to edit. System.String name The ID of the tab node. Must be unique! System.String displayName The display name of the tab, which will show up when you hover your mouse on the tab. Atlas.Sprite sprite The sprite of the tab. System.String [] stepsToTab The steps to the target tab. These must match the id value of the CraftNode in the crafting tree you're targeting. Do not include \"root\" in this path. | Improve this Doc View Source AddTabNode(CraftTree.Type, String, String, UnityEngine.Sprite) Adds a new tab node to the root of the specified crafting tree. Declaration public static void AddTabNode(CraftTree.Type craftTree, string name, string displayName, UnityEngine.Sprite sprite) Parameters Type Name Description CraftTree.Type craftTree The target craft tree to edit. System.String name The ID of the tab node. Must be unique! System.String displayName The display name of the tab, which will show up when you hover your mouse on the tab. UnityEngine.Sprite sprite The sprite of the tab. | Improve this Doc View Source AddTabNode(CraftTree.Type, String, String, UnityEngine.Sprite, String[]) Adds a new tab node to the root of the specified crafting tree, at the specified tab location. Declaration public static void AddTabNode(CraftTree.Type craftTree, string name, string displayName, UnityEngine.Sprite sprite, params string[] stepsToTab) Parameters Type Name Description CraftTree.Type craftTree The target craft tree to edit. System.String name The ID of the tab node. Must be unique! System.String displayName The display name of the tab, which will show up when you hover your mouse on the tab. UnityEngine.Sprite sprite The sprite of the tab. System.String [] stepsToTab The steps to the target tab. These must match the id value of the CraftNode in the crafting tree you're targeting. Do not include \"root\" in this path. | Improve this Doc View Source RemoveNode(CraftTree.Type, String[]) Removes a node at the specified node location. Can be used to remove either tabs or craft nodes. If a tab node is selected, all child nodes to it will also be removed. Declaration public static void RemoveNode(CraftTree.Type craftTree, params string[] stepsToNode) Parameters Type Name Description CraftTree.Type craftTree The target craft tree to edit. System.String [] stepsToNode The steps to the target node. These must match the id value of the CraftNode in the crafting tree you're targeting. This means matching the id of the crafted item or the id of the tab name. Do not include \"root\" in this path."
  },
  "api/SMLHelper.Handlers.CustomSoundHandler.html": {
    "href": "api/SMLHelper.Handlers.CustomSoundHandler.html",
    "title": "Class CustomSoundHandler",
    "keywords": "Class CustomSoundHandler A handler class for adding and overriding Sounds. Inheritance System.Object CustomSoundHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class CustomSoundHandler Methods | Improve this Doc View Source RegisterCustomSound(String, AudioClip, Bus) Register a custom sound by an instance. Some vanilla game sounds can be overridden by matching the id to the . Declaration public static Sound RegisterCustomSound(string id, AudioClip audio, Bus bus) Parameters Type Name Description System.String id The Id of your custom sound which is used when checking which sounds to play. AudioClip audio The AudioClip to register. Bus bus The bus to play the sound on. Returns Type Description Sound the loaded | Improve this Doc View Source RegisterCustomSound(String, AudioClip, String) Register a custom sound by an instance. Some vanilla game sounds can be overridden by matching the id to the . Declaration public static Sound RegisterCustomSound(string id, AudioClip audio, string busPath) Parameters Type Name Description System.String id The Id of your custom sound which is used when checking which sounds to play. AudioClip audio The AudioClip to register. System.String busPath The bus path to play the sound on. Returns Type Description Sound the loaded | Improve this Doc View Source RegisterCustomSound(String, IFModSound) Registers a Custom sound by an IFModSound instance. IFModSound instances have custom logic for playing sounds. Declaration public static void RegisterCustomSound(string id, IFModSound fModSound) Parameters Type Name Description System.String id The Id of your custom sound which is used when checking which sounds to play. IFModSound fModSound The sound IFModSound object to register. | Improve this Doc View Source RegisterCustomSound(String, Sound, Bus) Register a Custom sound that has been loaded using AudioUtils. Some vanilla game sounds can be overridden by matching the id to the . Declaration public static void RegisterCustomSound(string id, Sound sound, Bus bus) Parameters Type Name Description System.String id The Id of your custom sound which is used when checking which sounds to play. Sound sound The pre loaded sound Bus bus The bus to play the sound on. | Improve this Doc View Source RegisterCustomSound(String, Sound, String) Register a Custom sound that has been loaded using AudioUtils. Some vanilla game sounds can be overridden by matching the id to the . Declaration public static void RegisterCustomSound(string id, Sound sound, string busPath) Parameters Type Name Description System.String id The Id of your custom sound which is used when checking which sounds to play. Sound sound The pre loaded sound System.String busPath The bus path to play the sound on. | Improve this Doc View Source RegisterCustomSound(String, String, Bus) Register a Custom sound by file path. Some vanilla game sounds can be overridden by matching the id to the . Declaration public static Sound RegisterCustomSound(string id, string filePath, Bus bus) Parameters Type Name Description System.String id The Id of your custom sound which is used when checking which sounds to play. System.String filePath The file path on disk of the sound file to load. Bus bus The bus to play the sound on. Returns Type Description Sound the loaded | Improve this Doc View Source RegisterCustomSound(String, String, String) Register a Custom sound by file path. Some vanilla game sounds can be overridden by matching the id to the . Declaration public static Sound RegisterCustomSound(string id, string filePath, string busPath) Parameters Type Name Description System.String id The Id of your custom sound which is used when checking which sounds to play. System.String filePath The file path on disk of the sound file to load. System.String busPath The bus path to play the sound on. Returns Type Description Sound the loaded | Improve this Doc View Source TryGetCustomSound(String, out Sound) Try to get a registered custom . Declaration public static bool TryGetCustomSound(string id, out Sound sound) Parameters Type Name Description System.String id The Id of the custom sound Sound sound Outputs the if found and null if not found. Returns Type Description System.Boolean true or false depending on if the id was found | Improve this Doc View Source TryGetCustomSoundChannel(Int32, out Channel) Try to get a playing custom sound channel for an emitter Declaration public static bool TryGetCustomSoundChannel(int id, out Channel channel) Parameters Type Name Description System.Int32 id The emitter's ID, can be retrieved by calling object.GetInstanceID() . Channel channel Outputs the . Returns Type Description System.Boolean True if found, otherwise false. | Improve this Doc View Source TryPlayCustomSound(String, out Channel) Try to find and play a custom that has been registered. Declaration public static bool TryPlayCustomSound(string id, out Channel channel) Parameters Type Name Description System.String id The Id of the custom sound Channel channel the the sound is playing on. Returns Type Description System.Boolean"
  },
  "api/SMLHelper.Handlers.EatableHandler.html": {
    "href": "api/SMLHelper.Handlers.EatableHandler.html",
    "title": "Class EatableHandler",
    "keywords": "Class EatableHandler A handler for editing values for eatable classes Inheritance System.Object EatableHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class EatableHandler Methods | Improve this Doc View Source ModifyEatable(TechType, Single, Single, Boolean) Use this to change the values of a specific TechType. Declaration public static void ModifyEatable(TechType item, float food, float water, bool decomposes) Parameters Type Name Description TechType item The TechType of the item you want to change. System.Single food The food value you want to change it to. System.Single water The water value you want to change it to. System.Boolean decomposes Whether or not the item decomposes over time"
  },
  "api/SMLHelper.Handlers.EnumBuilder-1.html": {
    "href": "api/SMLHelper.Handlers.EnumBuilder-1.html",
    "title": "Class EnumBuilder<TEnum>",
    "keywords": "Class EnumBuilder<TEnum> Represents a custom enum object. This class cannot be inherited Inheritance System.Object EnumBuilder<TEnum> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public sealed class EnumBuilder<TEnum> where TEnum : Enum Type Parameters Name Description TEnum Type of the enum. Properties | Improve this Doc View Source Value The enum value corresponding to this builder. Declaration public TEnum Value { get; } Property Value Type Description TEnum Methods | Improve this Doc View Source ToString() Converts the value of this instance to a System.String . Declaration public override string ToString() Returns Type Description System.String A string whose value is the same as this instance. Overrides System.Object.ToString() Operators | Improve this Doc View Source Implicit(EnumBuilder<TEnum> to TEnum) Converts an EnumBuilder to its corresponding enum object. Declaration public static implicit operator TEnum(EnumBuilder<TEnum> enumBuilder) Parameters Type Name Description EnumBuilder <TEnum> enumBuilder The Enum Builder Returns Type Description TEnum The enum object equivalent to this instance. Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Handlers.EnumExtensions.html": {
    "href": "api/SMLHelper.Handlers.EnumExtensions.html",
    "title": "Class EnumExtensions",
    "keywords": "Class EnumExtensions Extensions to interact more with custom enum objects. Inheritance System.Object EnumExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class EnumExtensions Methods | Improve this Doc View Source CreateCraftTreeRoot(EnumBuilder<CraftTree.Type>, out ModCraftTreeRoot) Creates a custom crafting tree. Creating a new CraftTree only makes sense if you're going to use it in a new type of . Declaration public static EnumBuilder<CraftTree.Type> CreateCraftTreeRoot(this EnumBuilder<CraftTree.Type> builder, out ModCraftTreeRoot craftTreeRoot) Parameters Type Name Description EnumBuilder < CraftTree.Type > builder The custom enum object to make a crafting tree for. ModCraftTreeRoot craftTreeRoot The root node for your custom craft tree, as a new ModCraftTreeRoot instance. Build up your custom crafting tree from this root node. This tree will be automatically patched into the game. For more advanced usage, you can replace the default value of CraftTreeCreation with your own custom function. Returns Type Description EnumBuilder < CraftTree.Type > A reference to this instance after the operation has completed. | Improve this Doc View Source IsDefinedByDefault<TEnum>(TEnum) Checks if an enum value is defined by default or added using SMLHelper. Declaration public static bool IsDefinedByDefault<TEnum>(this TEnum enumValue) where TEnum : Enum Parameters Type Name Description TEnum enumValue The enum value to look for. Returns Type Description System.Boolean true if the specified enum value is defined by default, otherwise; false . Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source RegisterToTechGroup(EnumBuilder<TechCategory>, TechGroup) Registers this TechCategory instance to a TechGroup. Declaration public static EnumBuilder<TechCategory> RegisterToTechGroup(this EnumBuilder<TechCategory> builder, TechGroup techGroup) Parameters Type Name Description EnumBuilder < TechCategory > builder The current custom enum object instance. TechGroup techGroup The Tech Group to add this TechCategory to. Returns Type Description EnumBuilder < TechCategory > A reference to this instance after the operation has completed. | Improve this Doc View Source WithBackground(EnumBuilder<CraftData.BackgroundType>, Atlas.Sprite) Adds a sprite for this instance. Declaration public static EnumBuilder<CraftData.BackgroundType> WithBackground(this EnumBuilder<CraftData.BackgroundType> builder, Atlas.Sprite backgroundSprite) Parameters Type Name Description EnumBuilder < CraftData.BackgroundType > builder The current custom enum object instance Atlas.Sprite backgroundSprite The sprite to add for this instance. Returns Type Description EnumBuilder < CraftData.BackgroundType > A reference to this instance after the operation has completed. | Improve this Doc View Source WithIcon(EnumBuilder<PingType>, Atlas.Sprite) Adds an icon for this instance. Declaration public static EnumBuilder<PingType> WithIcon(this EnumBuilder<PingType> builder, Atlas.Sprite sprite) Parameters Type Name Description EnumBuilder < PingType > builder The current custom enum object instance. Atlas.Sprite sprite The icon to add for this instance. Returns Type Description EnumBuilder < PingType > A reference to this instance after the operation has completed. | Improve this Doc View Source WithIcon(EnumBuilder<PingType>, UnityEngine.Sprite) Adds an icon for this instance. Declaration public static EnumBuilder<PingType> WithIcon(this EnumBuilder<PingType> builder, UnityEngine.Sprite sprite) Parameters Type Name Description EnumBuilder < PingType > builder The current custom enum object instance. UnityEngine.Sprite sprite The icon to add for this instance. Returns Type Description EnumBuilder < PingType > A reference to this instance after the operation has completed. | Improve this Doc View Source WithIcon(EnumBuilder<TechType>, Atlas.Sprite) Adds an icon for this instance. Declaration public static EnumBuilder<TechType> WithIcon(this EnumBuilder<TechType> builder, Atlas.Sprite sprite) Parameters Type Name Description EnumBuilder < TechType > builder The current custom enum object instance. Atlas.Sprite sprite The icon to add for this instance. Returns Type Description EnumBuilder < TechType > A reference to this instance after the operation has completed. | Improve this Doc View Source WithIcon(EnumBuilder<TechType>, UnityEngine.Sprite) Adds an icon for this instance. Declaration public static EnumBuilder<TechType> WithIcon(this EnumBuilder<TechType> builder, UnityEngine.Sprite sprite) Parameters Type Name Description EnumBuilder < TechType > builder The current custom enum object instance. UnityEngine.Sprite sprite The icon to add for this instance. Returns Type Description EnumBuilder < TechType > A reference to this instance after the operation has completed. | Improve this Doc View Source WithPdaInfo(EnumBuilder<TechCategory>, String) Adds a display name to this instance. Declaration public static EnumBuilder<TechCategory> WithPdaInfo(this EnumBuilder<TechCategory> builder, string displayName) Parameters Type Name Description EnumBuilder < TechCategory > builder The current enum object instance. System.String displayName The display name of the Tech Category. Can be anything. Returns Type Description EnumBuilder < TechCategory > A reference to this instance after the operation has completed. | Improve this Doc View Source WithPdaInfo(EnumBuilder<TechGroup>, String) Adds a display name to this instance. Declaration public static EnumBuilder<TechGroup> WithPdaInfo(this EnumBuilder<TechGroup> builder, string displayName) Parameters Type Name Description EnumBuilder < TechGroup > builder The current custom enum object instance. System.String displayName The display name of the Tech Group. Can be anything. Returns Type Description EnumBuilder < TechGroup > A reference to this instance after the operation has completed. | Improve this Doc View Source WithPdaInfo(EnumBuilder<TechType>, String, String, Boolean) Adds a display name, tooltip to this instance. Declaration public static EnumBuilder<TechType> WithPdaInfo(this EnumBuilder<TechType> builder, string displayName, string tooltip, bool unlockAtStart = true) Parameters Type Name Description EnumBuilder < TechType > builder The current custom enum object instance. System.String displayName The display name of this Tech Type. Can be anything. System.String tooltip The tooltip displayed when hovered in the PDA. Can be anything. System.Boolean unlockAtStart Whether this instance should be unlocked on game start or not. Returns Type Description EnumBuilder < TechType > A reference to this instance after the operation has completed. | Improve this Doc View Source WithSizeInInventory(EnumBuilder<TechType>, Vector2int) Sets the size in inventory for this instance. Declaration public static EnumBuilder<TechType> WithSizeInInventory(this EnumBuilder<TechType> builder, Vector2int size) Parameters Type Name Description EnumBuilder < TechType > builder The current custom enum object instance. Vector2int size The 2x2 vector size Returns Type Description EnumBuilder < TechType > A reference to this instance after the operation has completed."
  },
  "api/SMLHelper.Handlers.EnumHandler.html": {
    "href": "api/SMLHelper.Handlers.EnumHandler.html",
    "title": "Class EnumHandler",
    "keywords": "Class EnumHandler Class responsible to resolve anything related to adding custom enum objects. Inheritance System.Object EnumHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class EnumHandler Methods | Improve this Doc View Source AddEntry<TEnum>(String) Adds a new custom enum object instance. Declaration public static EnumBuilder<TEnum> AddEntry<TEnum>(string name) where TEnum : Enum Parameters Type Name Description System.String name The name for this instance. Must be unique and not contain any special characters. Returns Type Description EnumBuilder <TEnum> A reference to the created custom enum object or if the name is already in use it will return null. Type Parameters Name Description TEnum Type of the enum to add an entry for. | Improve this Doc View Source AddEntry<TEnum>(String, Assembly) Adds a new custom enum object instance. Declaration public static EnumBuilder<TEnum> AddEntry<TEnum>(string name, Assembly ownerAssembly) where TEnum : Enum Parameters Type Name Description System.String name The name for this instance. Must be unique and not contain any special characters. System.Reflection.Assembly ownerAssembly The owner of this TechType instance. Returns Type Description EnumBuilder <TEnum> A reference to the created custom enum object or if the name is already in use it will return null Type Parameters Name Description TEnum Type of the enum to add an entry for. | Improve this Doc View Source ModdedEnumExists<TEnum>(String) Safely looks for a custom enum object from another mod. Declaration public static bool ModdedEnumExists<TEnum>(string name) where TEnum : Enum Parameters Type Name Description System.String name The name of the custom enum object. Returns Type Description System.Boolean true if the object was found; otherwise false . Type Parameters Name Description TEnum Type of the enum to search for. | Improve this Doc View Source TryAddEntry<TEnum>(String, out EnumBuilder<TEnum>) Adds a new custom enum object instance. Declaration public static bool TryAddEntry<TEnum>(string name, out EnumBuilder<TEnum> builder) where TEnum : Enum Parameters Type Name Description System.String name The name for this instance. Must be unique and not contain any special characters. EnumBuilder <TEnum> builder The reference to the created custom enum object. Returns Type Description System.Boolean true if successful; otherwise, false . Type Parameters Name Description TEnum Type of the enum to add an entry for. | Improve this Doc View Source TryAddEntry<TEnum>(String, Assembly, out EnumBuilder<TEnum>) Adds a new custom enum object instance. Declaration public static bool TryAddEntry<TEnum>(string name, Assembly ownerAssembly, out EnumBuilder<TEnum> builder) where TEnum : Enum Parameters Type Name Description System.String name The name for this instance. Must be unique and not contain any special characters. System.Reflection.Assembly ownerAssembly The owner of this TechType instance. EnumBuilder <TEnum> builder The reference to the created custom enum object. Returns Type Description System.Boolean true if successful otherwise; false . Type Parameters Name Description TEnum Type of the enum to add an entry for. | Improve this Doc View Source TryGetOwnerAssembly<TEnum>(TEnum, out Assembly) Safely looks for a custom enum object from another mod and outputs the instance when found. Declaration public static bool TryGetOwnerAssembly<TEnum>(TEnum modEnumValue, out Assembly addedBy) where TEnum : Enum Parameters Type Name Description TEnum modEnumValue The custom enum object value. System.Reflection.Assembly addedBy The Assembly that added the Enum value. Returns Type Description System.Boolean true if the Assembly was found; otherwise false . Type Parameters Name Description TEnum Type of the enum to search for. Remarks Make sure to set a [BepInDependency(\"otherModGUID\", BepInDependency.DependencyFlags.SoftDependency)] on your plugin to ensure theirs loads first. | Improve this Doc View Source TryGetValue<TEnum>(String, out TEnum) Safely looks for a custom enum object from another mod and outputs the instance when found. Declaration public static bool TryGetValue<TEnum>(string name, out TEnum enumValue) where TEnum : Enum Parameters Type Name Description System.String name The name of the custom enum object. TEnum enumValue The custom enum object value. Returns Type Description System.Boolean true if the object was found; otherwise, false . Type Parameters Name Description TEnum Type of the enum to search for. Remarks Make sure to set a [BepInDependency(\"otherModGUID\", BepInDependency.DependencyFlags.SoftDependency)] on your plugin to ensure theirs loads first. | Improve this Doc View Source TryGetValue<TEnum>(String, out TEnum, out Assembly) Safely looks for a custom enum object from another mod and outputs the instance when found. Declaration public static bool TryGetValue<TEnum>(string name, out TEnum enumValue, out Assembly addedBy) where TEnum : Enum Parameters Type Name Description System.String name The name of the custom enum object. TEnum enumValue The custom enum object value. System.Reflection.Assembly addedBy The Assembly that added the Enum value. Returns Type Description System.Boolean true if the object was found; otherwise false . Type Parameters Name Description TEnum Type of the enum to search for. Remarks Make sure to set a [BepInDependency(\"otherModGUID\", BepInDependency.DependencyFlags.SoftDependency)] on your plugin to ensure theirs loads first."
  },
  "api/SMLHelper.Handlers.html": {
    "href": "api/SMLHelper.Handlers.html",
    "title": "Namespace SMLHelper.Handlers",
    "keywords": "Namespace SMLHelper.Handlers Classes ConsoleCommandsHandler A handler class for registering your custom console commands. CoordinatedSpawnsHandler a Handler that handles and registers Coordinated ( spawns). CraftDataHandler A handler class for adding and editing crafted items. CraftTreeHandler A handler class for creating and editing of crafting trees. CustomSoundHandler A handler class for adding and overriding Sounds. EatableHandler A handler for editing values for eatable classes EnumBuilder<TEnum> Represents a custom enum object. This class cannot be inherited EnumExtensions Extensions to interact more with custom enum objects. EnumHandler Class responsible to resolve anything related to adding custom enum objects. ItemActionHandler A handler class for registering your custom middle click actions for items KnownTechHandler A handler class for configuring custom unlocking conditions for item blueprints. LanguageHandler A handler for adding custom language lines. LootDistributionHandler A handler that manages Loot Distribution. OptionsPanelHandler A handler class for registering your custom in-game mod options. PDAHandler A handler class for various scanner related data. PrefabCollection Represents a collection of SMLHelper.Assets.PrefabInfo as keys and prefab factory as values. PrefabCollectionExtensions Represents extension methods for the PrefabCollection class. PrefabHandler A handler for registering prefabs into the game. SaveDataHandler A handler class for registering your SaveDataCache . SpriteHandler A handler class for adding custom sprites into the game. SurvivalHandler a common handler for uses specified to the Survival component WorldEntityDatabaseHandler A handler for the WorldEntityDatabase of the game. Structs SpawnInfo A basic struct that provides enough info for the CoordinatedSpawnsHandler System to function."
  },
  "api/SMLHelper.Handlers.ItemActionHandler.html": {
    "href": "api/SMLHelper.Handlers.ItemActionHandler.html",
    "title": "Class ItemActionHandler",
    "keywords": "Class ItemActionHandler A handler class for registering your custom middle click actions for items Inheritance System.Object ItemActionHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class ItemActionHandler Methods | Improve this Doc View Source RegisterLeftClickAction(TechType, Action<InventoryItem>, String, Predicate<InventoryItem>) Registers a custom left click action for a Declaration public static void RegisterLeftClickAction(TechType targetTechType, Action<InventoryItem> callback, string tooltip, Predicate<InventoryItem> condition) Parameters Type Name Description TechType targetTechType The to which the left click action will be assigned System.Action < InventoryItem > callback The method which will be called when a matching with the specified was left-clicked System.String tooltip The secondary tooltip which will appear in the description of the item System.Predicate < InventoryItem > condition The condition which must return true for the action to be called when the item is clicked If ommited, the action will always be called | Improve this Doc View Source RegisterMiddleClickAction(TechType, Action<InventoryItem>, String, Predicate<InventoryItem>) Registers a custom middle click action for a Declaration public static void RegisterMiddleClickAction(TechType targetTechType, Action<InventoryItem> callback, string tooltip, Predicate<InventoryItem> condition) Parameters Type Name Description TechType targetTechType The which the middle click action will be assigned System.Action < InventoryItem > callback The method which will be called when a matching with the specified was middle-clicked System.String tooltip The secondary tooltip which will appear in the description of the item System.Predicate < InventoryItem > condition The condition which must return true for the action to be called when the item is clicked If ommited, the action will always be called"
  },
  "api/SMLHelper.Handlers.KnownTechHandler.html": {
    "href": "api/SMLHelper.Handlers.KnownTechHandler.html",
    "title": "Class KnownTechHandler",
    "keywords": "Class KnownTechHandler A handler class for configuring custom unlocking conditions for item blueprints. Inheritance System.Object KnownTechHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class KnownTechHandler Methods | Improve this Doc View Source RemoveAllCurrentAnalysisTechEntry(TechType) Allows you to remove all unlock entries from a to be able to disable or change it to a new unlock. ***Note: This is patch time specific so the LAST mod to call this on a techtype will be the only one to control what unlocks said type after its use.*** Declaration public static void RemoveAllCurrentAnalysisTechEntry(TechType targetTechType) Parameters Type Name Description TechType targetTechType Target to remove the unlocks for. | Improve this Doc View Source RemoveAnalysisTechEntryFromSpecific(TechType, List<TechType>) Allows you to remove unlock entries for a from specific entries. Declaration public static void RemoveAnalysisTechEntryFromSpecific(TechType targetTechType, List<TechType> techTypes) Parameters Type Name Description TechType targetTechType Target to remove the unlocks for. System.Collections.Generic.List < TechType > techTypes List of to remove the targetTechType from. | Improve this Doc View Source SetAnalysisTechEntry(KnownTech.AnalysisTech) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in will be added to the existing AnalysisTech entry unlocks. Declaration public static void SetAnalysisTechEntry(KnownTech.AnalysisTech analysisTech) Parameters Type Name Description KnownTech.AnalysisTech analysisTech The analysis tech entry to add. | Improve this Doc View Source SetAnalysisTechEntry(TechType, IEnumerable<TechType>) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. Declaration public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock) Parameters Type Name Description TechType techTypeToBeAnalysed This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list System.Collections.Generic.IEnumerable < TechType > techTypesToUnlock The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. | Improve this Doc View Source SetAnalysisTechEntry(TechType, IEnumerable<TechType>, FMODAsset) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. Declaration public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, FMODAsset unlockSound) Parameters Type Name Description TechType techTypeToBeAnalysed This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list System.Collections.Generic.IEnumerable < TechType > techTypesToUnlock The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. FMODAsset unlockSound The sound that plays when you unlock the blueprint. | Improve this Doc View Source SetAnalysisTechEntry(TechType, IEnumerable<TechType>, FMODAsset, Sprite) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. Declaration public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, FMODAsset unlockSound, Sprite unlockSprite) Parameters Type Name Description TechType techTypeToBeAnalysed This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list System.Collections.Generic.IEnumerable < TechType > techTypesToUnlock The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. FMODAsset unlockSound The sound that plays when you unlock the blueprint. Sprite unlockSprite The sprite that shows up when you unlock the blueprint. | Improve this Doc View Source SetAnalysisTechEntry(TechType, IEnumerable<TechType>, FMODAsset, Sprite, List<StoryGoal>) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. Declaration public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, FMODAsset unlockSound, Sprite unlockSprite, List<StoryGoal> storyGoals) Parameters Type Name Description TechType techTypeToBeAnalysed This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list System.Collections.Generic.IEnumerable < TechType > techTypesToUnlock The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. FMODAsset unlockSound The sound that plays when you unlock the blueprint. Sprite unlockSprite The sprite that shows up when you unlock the blueprint. System.Collections.Generic.List < StoryGoal > storyGoals The story goals that will be triggered when you unlock the blueprint. | Improve this Doc View Source SetAnalysisTechEntry(TechType, IEnumerable<TechType>, Sprite) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. Declaration public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, Sprite unlockSprite) Parameters Type Name Description TechType techTypeToBeAnalysed This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list System.Collections.Generic.IEnumerable < TechType > techTypesToUnlock The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. Sprite unlockSprite The sprite that shows up when you unlock the blueprint. | Improve this Doc View Source SetAnalysisTechEntry(TechType, IEnumerable<TechType>, String) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. Declaration public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, string unlockMessage) Parameters Type Name Description TechType techTypeToBeAnalysed This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list System.Collections.Generic.IEnumerable < TechType > techTypesToUnlock The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. System.String unlockMessage The message that shows up on the right when the blueprint is unlocked. | Improve this Doc View Source SetAnalysisTechEntry(TechType, IEnumerable<TechType>, String, FMODAsset) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. Declaration public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, string unlockMessage, FMODAsset unlockSound) Parameters Type Name Description TechType techTypeToBeAnalysed This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list System.Collections.Generic.IEnumerable < TechType > techTypesToUnlock The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. System.String unlockMessage The message that shows up on the right when the blueprint is unlocked. FMODAsset unlockSound The sound that plays when you unlock the blueprint. | Improve this Doc View Source SetAnalysisTechEntry(TechType, IEnumerable<TechType>, String, Sprite) Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., \"analysed\". If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in \"techTypesToUnlock\" will be added to the existing AnalysisTech entry unlocks. Declaration public static void SetAnalysisTechEntry(TechType techTypeToBeAnalysed, IEnumerable<TechType> techTypesToUnlock, string unlockMessage, Sprite unlockSprite) Parameters Type Name Description TechType techTypeToBeAnalysed This TechType is the criteria for all of the \"unlock TechTypes\"; when this TechType is unlocked, so are all the ones in that list System.Collections.Generic.IEnumerable < TechType > techTypesToUnlock The TechTypes that will be unlocked when \"techTypeToSet\" is unlocked. System.String unlockMessage The message that shows up on the right when the blueprint is unlocked. Sprite unlockSprite The sprite that shows up when you unlock the blueprint. | Improve this Doc View Source SetCompoundUnlock(TechType, List<TechType>) Allows you to set up a custom Compound Unlock requiring multiple techtypes to be unlocked before 1 is. ***Note: This will not remove any original unlock and if you need to do so you should use RemoveAnalysisTechEntryFromSpecific(TechType, List<TechType>) or RemoveAllCurrentAnalysisTechEntry(TechType) Declaration public static void SetCompoundUnlock(TechType techType, List<TechType> compoundTechsForUnlock) Parameters Type Name Description TechType techType System.Collections.Generic.List < TechType > compoundTechsForUnlock | Improve this Doc View Source UnlockOnStart(TechType) Allows you to unlock a TechType on game start. Declaration public static void UnlockOnStart(TechType techType) Parameters Type Name Description TechType techType"
  },
  "api/SMLHelper.Handlers.LanguageHandler.html": {
    "href": "api/SMLHelper.Handlers.LanguageHandler.html",
    "title": "Class LanguageHandler",
    "keywords": "Class LanguageHandler A handler for adding custom language lines. Inheritance System.Object LanguageHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class LanguageHandler Methods | Improve this Doc View Source SetLanguageLine(String, String) Allows you to define a language entry into the game. Declaration public static void SetLanguageLine(string lineId, string text) Parameters Type Name Description System.String lineId The ID of the entry, this is what is used to get the actual text. System.String text The actual text related to the entry. | Improve this Doc View Source SetTechTypeName(TechType, String) Allows you to set the display name of a specific . Declaration public static void SetTechTypeName(TechType techType, string text) Parameters Type Name Description TechType techType The whose display name that is to be changed. System.String text The new display name for the chosen . | Improve this Doc View Source SetTechTypeTooltip(TechType, String) Allows you to set the tooltip of a specific . Declaration public static void SetTechTypeTooltip(TechType techType, string text) Parameters Type Name Description TechType techType The whose tooltip that is to be changed. System.String text The new tooltip for the chosen ."
  },
  "api/SMLHelper.Handlers.LootDistributionHandler.html": {
    "href": "api/SMLHelper.Handlers.LootDistributionHandler.html",
    "title": "Class LootDistributionHandler",
    "keywords": "Class LootDistributionHandler A handler that manages Loot Distribution. Inheritance System.Object LootDistributionHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class LootDistributionHandler Methods | Improve this Doc View Source AddLootDistributionData(PrefabInfo, IEnumerable<LootDistributionData.BiomeData>, WorldEntityInfo) Adds in a custom entry into the Loot Distribution of the game. Declaration public static void AddLootDistributionData(PrefabInfo prefabInfo, IEnumerable<LootDistributionData.BiomeData> biomeDistribution, WorldEntityInfo info) Parameters Type Name Description SMLHelper.Assets.PrefabInfo prefabInfo The custom prefab which you want to spawn naturally in the game. System.Collections.Generic.IEnumerable < LootDistributionData.BiomeData > biomeDistribution The dictating how the prefab should spawn in the world. WorldEntityInfo info The WorldEntityInfo of the prefab. For more information on how to set this up, see WorldEntityDatabaseHandler . | Improve this Doc View Source AddLootDistributionData(String, LootDistributionData.BiomeData[]) Adds in a custom entry into Loot Distribution of the game. Declaration public static void AddLootDistributionData(string classId, params LootDistributionData.BiomeData[] biomeDistribution) Parameters Type Name Description System.String classId The classId of the prefab. LootDistributionData.BiomeData [] biomeDistribution The dictating how the prefab should spawn in the world. | Improve this Doc View Source AddLootDistributionData(String, LootDistributionData.SrcData) Adds in a custom entry into the Loot Distribution of the game. Declaration public static void AddLootDistributionData(string classId, LootDistributionData.SrcData data) Parameters Type Name Description System.String classId The classId of the prefab. LootDistributionData.SrcData data The that contains data related to the spawning of a prefab, also contains the path to the prefab. | Improve this Doc View Source AddLootDistributionData(String, LootDistributionData.SrcData, WorldEntityInfo) Adds in a custom entry into the Loot Distribution of the game. You must also add the into the using WorldEntityDatabaseHandler . Declaration public static void AddLootDistributionData(string classId, LootDistributionData.SrcData data, WorldEntityInfo info) Parameters Type Name Description System.String classId The classId of the prefab. LootDistributionData.SrcData data The that contains data related to the spawning of a prefab, also contains the path to the prefab. WorldEntityInfo info The WorldEntityInfo of the prefab. For more information on how to set this up, see WorldEntityDatabaseHandler . | Improve this Doc View Source AddLootDistributionData(String, String, IEnumerable<LootDistributionData.BiomeData>) Adds in a custom entry into the Loot Distribution of the game. You must also add the into the using WorldEntityDatabaseHandler . Declaration public static void AddLootDistributionData(string classId, string prefabPath, IEnumerable<LootDistributionData.BiomeData> biomeDistribution) Parameters Type Name Description System.String classId The classId of the prefab. System.String prefabPath The prefab path of the prefab. System.Collections.Generic.IEnumerable < LootDistributionData.BiomeData > biomeDistribution The dictating how the prefab should spawn in the world. | Improve this Doc View Source AddLootDistributionData(String, String, IEnumerable<LootDistributionData.BiomeData>, WorldEntityInfo) Adds in a custom entry into the Loot Distribution of the game. Declaration public static void AddLootDistributionData(string classId, string prefabPath, IEnumerable<LootDistributionData.BiomeData> biomeDistribution, WorldEntityInfo info) Parameters Type Name Description System.String classId The classId of the prefab. System.String prefabPath The prefab path of the prefab. System.Collections.Generic.IEnumerable < LootDistributionData.BiomeData > biomeDistribution The dictating how the prefab should spawn in the world. WorldEntityInfo info The WorldEntityInfo of the prefab. For more information on how to set this up, see WorldEntityDatabaseHandler . | Improve this Doc View Source AddLootDistributionData(String, WorldEntityInfo, LootDistributionData.BiomeData[]) Adds in a custom entry into Loot Distribution of the game. Declaration public static void AddLootDistributionData(string classId, WorldEntityInfo info, params LootDistributionData.BiomeData[] biomeDistribution) Parameters Type Name Description System.String classId The classId of the prefab. WorldEntityInfo info The WorldEntityInfo of the prefab. For more information on how to set this up, see WorldEntityDatabaseHandler . LootDistributionData.BiomeData [] biomeDistribution The dictating how the prefab should spawn in the world. | Improve this Doc View Source EditLootDistributionData(String, BiomeType, Single, Int32) Edits Loot Distribution data for existing prefabs. Declaration public static void EditLootDistributionData(string classId, BiomeType biome, float probability, int count) Parameters Type Name Description System.String classId The ClassID of the prefab. If unsure, use CraftData.GetClassIdForTechType. BiomeType biome The to change the data for. System.Single probability The desired probability. System.Int32 count The number to spawn at a time when spawning happens. | Improve this Doc View Source EditLootDistributionData(String, IEnumerable<LootDistributionData.BiomeData>) Edits Loot Distribution data for existing prefabs, for e.g. original game prefabs. Declaration public static void EditLootDistributionData(string classId, IEnumerable<LootDistributionData.BiomeData> biomeDistribution) Parameters Type Name Description System.String classId The ClassID of the prefab. If unsure, use CraftData.GetClassIdForTechType. System.Collections.Generic.IEnumerable < LootDistributionData.BiomeData > biomeDistribution The list of that contains information about how/when it should spawn in biomes."
  },
  "api/SMLHelper.Handlers.OptionsPanelHandler.html": {
    "href": "api/SMLHelper.Handlers.OptionsPanelHandler.html",
    "title": "Class OptionsPanelHandler",
    "keywords": "Class OptionsPanelHandler A handler class for registering your custom in-game mod options. Inheritance System.Object OptionsPanelHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class OptionsPanelHandler Methods | Improve this Doc View Source RegisterModOptions(ModOptions) Registers your mod options to the in-game menu. Declaration public static void RegisterModOptions(ModOptions options) Parameters Type Name Description ModOptions options The mod options. Create a new child class inheriting from this one and add your options to it. See Also ModOptions | Improve this Doc View Source RegisterModOptions<T>() Generates an options menu based on the attributes and members declared in the ConfigFile and registers it to the in-game menu. Declaration public static T RegisterModOptions<T>() where T : ConfigFile, new() Returns Type Description T An instance of the T : ConfigFile with values loaded from the config file on disk. Type Parameters Name Description T A class derived from ConfigFile to generate the options menu from."
  },
  "api/SMLHelper.Handlers.PDAHandler.html": {
    "href": "api/SMLHelper.Handlers.PDAHandler.html",
    "title": "Class PDAHandler",
    "keywords": "Class PDAHandler A handler class for various scanner related data. Inheritance System.Object PDAHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class PDAHandler Methods | Improve this Doc View Source AddCustomScannerEntry(PDAScanner.EntryData) Adds in a custom . ***Cannot be used to Change the values of a techtype that has data already!*** Declaration public static void AddCustomScannerEntry(PDAScanner.EntryData entryData) Parameters Type Name Description PDAScanner.EntryData entryData The of the entry. Must be populated when passed in. | Improve this Doc View Source AddCustomScannerEntry(TechType, TechType, Boolean, String, Int32, Single, Boolean) Adds in a custom . Declaration public static void AddCustomScannerEntry(TechType key, TechType blueprint, bool isFragment, string encyclopediaKey, int totalFragmentsRequired = 2, float scanTime = 2F, bool destroyAfterScan = true) Parameters Type Name Description TechType key The scanned object's . In case of fragments, the fragment is the key. TechType blueprint The blueprint when unlocked when scanned. In case of fragments, this is the actual that unlocks when all fragments are scanned. System.Boolean isFragment Whether the key is a fragment or not. System.String encyclopediaKey The key to the encyclopedia entry. System.Int32 totalFragmentsRequired The total amount of objects of key that need to be scanned to unlock the blueprint and encyclopediaKey . System.Single scanTime The amount of time it takes to finish one scan. In seconds. System.Boolean destroyAfterScan Whether the object should be destroyed after the scan is finished. | Improve this Doc View Source AddEncyclopediaEntry(PDAEncyclopedia.EntryData) Adds custom entry. Declaration public static void AddEncyclopediaEntry(PDAEncyclopedia.EntryData entry) Parameters Type Name Description PDAEncyclopedia.EntryData entry The entry. | Improve this Doc View Source AddLogEntry(String, String, Sprite, FMODAsset) Adds a custom log entry. Declaration public static void AddLogEntry(string key, string languageKey, Sprite icon, FMODAsset sound) Parameters Type Name Description System.String key The key to refer to this entry. System.String languageKey The subtitles language key for this entry. Sprite icon The icon that will be used in the Log tab for this entry. if null It will use the default log entry icon. FMODAsset sound The sound that will be played once this entry is triggered or played in the Log tab. If null the Play button in the Log tab will disappear and a sound wont play when this entry is triggered. | Improve this Doc View Source EditFragmentScanTime(TechType, Single) Edits the time it takes to finish scanning a fragment. Declaration public static void EditFragmentScanTime(TechType techType, float scanTime) Parameters Type Name Description TechType techType Can be either techtype of the fragment or the crafted item. System.Single scanTime The relative time spent on scanning. Default value is 1. | Improve this Doc View Source EditFragmentsToScan(TechType, Int32) Edits how many fragments must be scanned before unlocking the techtype's blueprint. Declaration public static void EditFragmentsToScan(TechType techType, int fragmentCount) Parameters Type Name Description TechType techType Can be either techtype of the fragment or the crafted item. System.Int32 fragmentCount The number of fragments to scan."
  },
  "api/SMLHelper.Handlers.PrefabCollection.html": {
    "href": "api/SMLHelper.Handlers.PrefabCollection.html",
    "title": "Class PrefabCollection",
    "keywords": "Class PrefabCollection Represents a collection of SMLHelper.Assets.PrefabInfo as keys and prefab factory as values. Inheritance System.Object PrefabCollection Implements System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < SMLHelper.Assets.PrefabInfo , PrefabFactoryAsync >> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public class PrefabCollection : IEnumerable<KeyValuePair<PrefabInfo, PrefabFactoryAsync>>, IEnumerable Methods | Improve this Doc View Source Add(PrefabInfo, PrefabFactoryAsync, PrefabPostProcessorAsync) Adds a prefab info with the function that constructs the game object into the game. Declaration public void Add(PrefabInfo info, PrefabFactoryAsync prefabFactory, PrefabPostProcessorAsync postProcessor = null) Parameters Type Name Description SMLHelper.Assets.PrefabInfo info The prefab info to register. PrefabFactoryAsync prefabFactory The function that constructs the game object for this prefab info. PrefabPostProcessorAsync postProcessor The prefab post processor that will be invoked after SMLHelper's prefab processing. | Improve this Doc View Source ContainsPrefabInfo(PrefabInfo) Determines whether the provided prefab info is registered. Declaration public bool ContainsPrefabInfo(PrefabInfo info) Parameters Type Name Description SMLHelper.Assets.PrefabInfo info The prefab info to look for Returns Type Description System.Boolean true if found; otherwise, . | Improve this Doc View Source Remove(PrefabInfo) Removes a prefab info from the game. This leads to unregistering the specified prefab info from the game. Declaration public bool Remove(PrefabInfo info) Parameters Type Name Description SMLHelper.Assets.PrefabInfo info The prefab info to unregister. Returns Type Description System.Boolean if the element is successfully found and removed; otherwise, . This method returns if the prefab info is not found. | Improve this Doc View Source TryGetInfoForClassId(String, out PrefabInfo) Gets the prefab info associated with the provided class ID. Declaration public bool TryGetInfoForClassId(string classId, out PrefabInfo info) Parameters Type Name Description System.String classId The class ID of the prefab info to get. SMLHelper.Assets.PrefabInfo info The returned prefab info. If nothing was found for the class ID specified, this will be set to the default initialization instead. Returns Type Description System.Boolean True if found; otherwise false. | Improve this Doc View Source TryGetInfoForFileName(String, out PrefabInfo) Gets the prefab info associated with the provided file name. Declaration public bool TryGetInfoForFileName(string fileName, out PrefabInfo info) Parameters Type Name Description System.String fileName The file name of the prefab info to get. SMLHelper.Assets.PrefabInfo info The returned prefab info. If nothing was found for the file name specified, this will be set to the default initialization instead. Returns Type Description System.Boolean True if found; otherwise false. | Improve this Doc View Source TryGetInfoForTechType(String, out PrefabInfo) Gets the prefab info associated with the provided tech type. Declaration public bool TryGetInfoForTechType(string techType, out PrefabInfo info) Parameters Type Name Description System.String techType The tech type of the prefab info to get. SMLHelper.Assets.PrefabInfo info The returned prefab info. If nothing was found for the tech type specified, this will be set to the default initialization instead. Returns Type Description System.Boolean True if found; otherwise false. | Improve this Doc View Source TryGetPostProcessorForInfo(PrefabInfo, out PrefabPostProcessorAsync) Gets the prefab post processor associated with the provided info. Declaration public bool TryGetPostProcessorForInfo(PrefabInfo info, out PrefabPostProcessorAsync postProcessor) Parameters Type Name Description SMLHelper.Assets.PrefabInfo info The info of the post processor to get. PrefabPostProcessorAsync postProcessor The returned post processor. If nothing was found for the prefab info specified, this will be set to the default initialization instead. Returns Type Description System.Boolean true if found; otherwise, . | Improve this Doc View Source TryGetPrefabForInfo(PrefabInfo, out PrefabFactoryAsync) Gets the prefab factory associated with the provided info. Declaration public bool TryGetPrefabForInfo(PrefabInfo info, out PrefabFactoryAsync prefabFactory) Parameters Type Name Description SMLHelper.Assets.PrefabInfo info The info of the prefab factory to get. PrefabFactoryAsync prefabFactory The returned prefab factory. If nothing was found for the prefab info specified, this will be set to the default initialization instead. Returns Type Description System.Boolean true if found; otherwise, . Explicit Interface Implementations | Improve this Doc View Source IEnumerable<KeyValuePair<PrefabInfo, PrefabFactoryAsync>>.GetEnumerator() Declaration IEnumerator<KeyValuePair<PrefabInfo, PrefabFactoryAsync>> IEnumerable<KeyValuePair<PrefabInfo, PrefabFactoryAsync>>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < SMLHelper.Assets.PrefabInfo , PrefabFactoryAsync >> | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods PrefabCollectionExtensions.RegisterPrefab(PrefabCollection, ICustomPrefab) PrefabCollectionExtensions.UnregisterPrefab(PrefabCollection, ICustomPrefab) ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Handlers.PrefabCollectionExtensions.html": {
    "href": "api/SMLHelper.Handlers.PrefabCollectionExtensions.html",
    "title": "Class PrefabCollectionExtensions",
    "keywords": "Class PrefabCollectionExtensions Represents extension methods for the PrefabCollection class. Inheritance System.Object PrefabCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class PrefabCollectionExtensions Methods | Improve this Doc View Source RegisterPrefab(PrefabCollection, ICustomPrefab) Registers a CustomPrefab into the game. Declaration public static void RegisterPrefab(this PrefabCollection collection, ICustomPrefab customPrefab) Parameters Type Name Description PrefabCollection collection The collection to register to. ICustomPrefab customPrefab The custom prefab to register. | Improve this Doc View Source UnregisterPrefab(PrefabCollection, ICustomPrefab) Unregisters a CustomPrefab from the game. Declaration public static void UnregisterPrefab(this PrefabCollection collection, ICustomPrefab customPrefab) Parameters Type Name Description PrefabCollection collection The collection to unregister from. ICustomPrefab customPrefab The custom prefab to unregister."
  },
  "api/SMLHelper.Handlers.PrefabHandler.html": {
    "href": "api/SMLHelper.Handlers.PrefabHandler.html",
    "title": "Class PrefabHandler",
    "keywords": "Class PrefabHandler A handler for registering prefabs into the game. Inheritance System.Object PrefabHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class PrefabHandler Properties | Improve this Doc View Source Prefabs A collection of custom prefabs to add to the game. Declaration public static PrefabCollection Prefabs { get; } Property Value Type Description PrefabCollection"
  },
  "api/SMLHelper.Handlers.SaveDataHandler.html": {
    "href": "api/SMLHelper.Handlers.SaveDataHandler.html",
    "title": "Class SaveDataHandler",
    "keywords": "Class SaveDataHandler A handler class for registering your SaveDataCache . Inheritance System.Object SaveDataHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class SaveDataHandler Methods | Improve this Doc View Source RegisterSaveDataCache<T>() Registers your SaveDataCache to be automatically loaded and saved whenever the game is. Declaration public static T RegisterSaveDataCache<T>() where T : SaveDataCache, new() Returns Type Description T An instance of the T : SaveDataCache with values loaded from the json file on disk whenever a save slot is loaded. Type Parameters Name Description T A class derived from SaveDataCache to hold your save data."
  },
  "api/SMLHelper.Handlers.SpawnInfo.html": {
    "href": "api/SMLHelper.Handlers.SpawnInfo.html",
    "title": "Struct SpawnInfo",
    "keywords": "Struct SpawnInfo A basic struct that provides enough info for the CoordinatedSpawnsHandler System to function. Implements System.IEquatable < SpawnInfo > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public struct SpawnInfo : IEquatable<SpawnInfo> Constructors | Improve this Doc View Source SpawnInfo(String, Vector3) Initializes a new SpawnInfo . Declaration public SpawnInfo(string classId, Vector3 spawnPosition) Parameters Type Name Description System.String classId ClassID to spawn. Vector3 spawnPosition Position to spawn into. | Improve this Doc View Source SpawnInfo(String, Vector3, Quaternion) Initializes a new SpawnInfo . Declaration public SpawnInfo(string classId, Vector3 spawnPosition, Quaternion rotation) Parameters Type Name Description System.String classId ClassID to spawn. Vector3 spawnPosition Position to spawn into. Quaternion rotation Rotation to spawn at. | Improve this Doc View Source SpawnInfo(String, Vector3, Vector3) Initializes a new SpawnInfo . Declaration public SpawnInfo(string classId, Vector3 spawnPosition, Vector3 rotation) Parameters Type Name Description System.String classId ClassID to spawn. Vector3 spawnPosition Position to spawn into. Vector3 rotation Rotation to spawn at. | Improve this Doc View Source SpawnInfo(TechType, Vector3) Initializes a new SpawnInfo . Declaration public SpawnInfo(TechType techType, Vector3 spawnPosition) Parameters Type Name Description TechType techType TechType to spawn. Vector3 spawnPosition Position to spawn into. | Improve this Doc View Source SpawnInfo(TechType, Vector3, Quaternion) Initializes a new SpawnInfo . Declaration public SpawnInfo(TechType techType, Vector3 spawnPosition, Quaternion rotation) Parameters Type Name Description TechType techType TechType to spawn. Vector3 spawnPosition Position to spawn into. Quaternion rotation Rotation to spawn at. | Improve this Doc View Source SpawnInfo(TechType, Vector3, Vector3) Initializes a new SpawnInfo . Declaration public SpawnInfo(TechType techType, Vector3 spawnPosition, Vector3 rotation) Parameters Type Name Description TechType techType TechType to spawn. Vector3 spawnPosition Position to spawn into. Vector3 rotation Rotation to spawn at. Methods | Improve this Doc View Source Equals(SpawnInfo) Indicates whether the current SpawnInfo is equal to another. Declaration public bool Equals(SpawnInfo other) Parameters Type Name Description SpawnInfo other The other SpawnInfo . Returns Type Description System.Boolean true if the current SpawnInfo is equal to the other parameter; otherwise false . Remarks It is worth noting that we use Unity's and operator comparisons for comparing the SMLHelper.Handlers.SpawnInfo.SpawnPosition and SMLHelper.Handlers.SpawnInfo.Rotation properties of each instance, to allow for an approximate comparison of these values. | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj is a SpawnInfo and represents the same value as this instance; otherwise, false . Overrides System.ValueType.Equals(System.Object) Remarks It is worth noting that we use Unity's and operator comparisons for comparing the SMLHelper.Handlers.SpawnInfo.SpawnPosition and SMLHelper.Handlers.SpawnInfo.Rotation properties of each instance, to allow for an approximate comparison of these values. See Also Equals(SpawnInfo) | Improve this Doc View Source GetHashCode() A custom hash code algorithm that takes into account the values of each property of the SpawnInfo instance, and attempts to reduce diagonal collisions. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(SpawnInfo, SpawnInfo) Indicates whether two SpawnInfo instances are equal. Declaration public static bool operator ==(SpawnInfo a, SpawnInfo b) Parameters Type Name Description SpawnInfo a The first instance to compare. SpawnInfo b The second instance to compare. Returns Type Description System.Boolean true if the SpawnInfo instances are equal; otherwise, false . See Also Inequality(SpawnInfo, SpawnInfo) Equals(SpawnInfo) | Improve this Doc View Source Inequality(SpawnInfo, SpawnInfo) Indicates whether two SpawnInfo instances are not equal. Declaration public static bool operator !=(SpawnInfo a, SpawnInfo b) Parameters Type Name Description SpawnInfo a The first instance to compare. SpawnInfo b The second instance to compare. Returns Type Description System.Boolean true if the SpawnInfo instances are not equal; otherwise, false . See Also Equality(SpawnInfo, SpawnInfo) Equals(SpawnInfo) Implements System.IEquatable<T>"
  },
  "api/SMLHelper.Handlers.SpriteHandler.html": {
    "href": "api/SMLHelper.Handlers.SpriteHandler.html",
    "title": "Class SpriteHandler",
    "keywords": "Class SpriteHandler A handler class for adding custom sprites into the game. Inheritance System.Object SpriteHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class SpriteHandler Methods | Improve this Doc View Source RegisterSprite(SpriteManager.Group, String, Atlas.Sprite) Registers a new sprite to the game. Declaration public static void RegisterSprite(SpriteManager.Group group, string id, Atlas.Sprite sprite) Parameters Type Name Description SpriteManager.Group group The sprite group this sprite will be added to. System.String id The sprite internal identifier. Atlas.Sprite sprite The sprite to be added. | Improve this Doc View Source RegisterSprite(SpriteManager.Group, String, Sprite) Registers a new sprite to the game. Declaration public static void RegisterSprite(SpriteManager.Group group, string id, Sprite sprite) Parameters Type Name Description SpriteManager.Group group The sprite group this sprite will be added to. System.String id The sprite internal identifier. Sprite sprite The sprite to be added. | Improve this Doc View Source RegisterSprite(SpriteManager.Group, String, String) Registers a new sprite to the game. Declaration public static void RegisterSprite(SpriteManager.Group group, string id, string filePathToImage) Parameters Type Name Description SpriteManager.Group group The sprite group. System.String id The sprite internal identifier. System.String filePathToImage The file path to image. See Also LoadSpriteFromFile(String, TextureFormat) | Improve this Doc View Source RegisterSprite(SpriteManager.Group, String, String, TextureFormat) Registers a new sprite to the game. Declaration public static void RegisterSprite(SpriteManager.Group group, string id, string filePathToImage, TextureFormat format) Parameters Type Name Description SpriteManager.Group group The sprite group. System.String id The sprite internal identifier. System.String filePathToImage The file path to image. TextureFormat format The texture format. By default, this uses . https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html Don't change this unless you really know what you're doing. See Also LoadSpriteFromFile(String, TextureFormat) | Improve this Doc View Source RegisterSprite(TechType, Atlas.Sprite) Registers a new sprite to the game. Declaration public static void RegisterSprite(TechType type, Atlas.Sprite sprite) Parameters Type Name Description TechType type The techtype paired to this sprite. Atlas.Sprite sprite The sprite to be added. | Improve this Doc View Source RegisterSprite(TechType, Sprite) Registers a new sprite to the game. Declaration public static void RegisterSprite(TechType type, Sprite sprite) Parameters Type Name Description TechType type The techtype paired to this sprite. Sprite sprite The sprite to be added. | Improve this Doc View Source RegisterSprite(TechType, String) Registers a new sprite to the game. Declaration public static void RegisterSprite(TechType type, string filePathToImage) Parameters Type Name Description TechType type The techtype paired to this sprite. System.String filePathToImage The file path to image to be converted into a sprite. See Also LoadSpriteFromFile(String, TextureFormat) | Improve this Doc View Source RegisterSprite(TechType, String, TextureFormat) Registers a new sprite to the game. Declaration public static void RegisterSprite(TechType type, string filePathToImage, TextureFormat format) Parameters Type Name Description TechType type The techtype paired to this sprite. System.String filePathToImage The file path to image to be converted into a sprite. TextureFormat format The texture format. By default, this uses . https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html Don't change this unless you really know what you're doing. See Also LoadSpriteFromFile(String, TextureFormat)"
  },
  "api/SMLHelper.Handlers.SurvivalHandler.html": {
    "href": "api/SMLHelper.Handlers.SurvivalHandler.html",
    "title": "Class SurvivalHandler",
    "keywords": "Class SurvivalHandler a common handler for uses specified to the Survival component Inheritance System.Object SurvivalHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class SurvivalHandler Methods | Improve this Doc View Source GiveHealthOnConsume(TechType, Single, Boolean) makes the item Heal the player on consume. Declaration public static void GiveHealthOnConsume(TechType techType, float healthBack, bool isEdible) Parameters Type Name Description TechType techType the TechType that you want it to heal back System.Single healthBack amount to heal the player System.Boolean isEdible set it to true if the item is edible and has the component attached to it. defaults to false | Improve this Doc View Source GiveOxygenOnConsume(TechType, Single, Boolean) makes the item gives oxygen on use. Declaration public static void GiveOxygenOnConsume(TechType techType, float oxygenGiven, bool isEdible) Parameters Type Name Description TechType techType the TechType that you want to make it give oxygen on use System.Single oxygenGiven the oxygen amount the item gives System.Boolean isEdible set it to true if the item is edible and has the component attached to it. defaults to false"
  },
  "api/SMLHelper.Handlers.WorldEntityDatabaseHandler.html": {
    "href": "api/SMLHelper.Handlers.WorldEntityDatabaseHandler.html",
    "title": "Class WorldEntityDatabaseHandler",
    "keywords": "Class WorldEntityDatabaseHandler A handler for the WorldEntityDatabase of the game. Inheritance System.Object WorldEntityDatabaseHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Handlers Assembly : SMLHelper.dll Syntax public static class WorldEntityDatabaseHandler Methods | Improve this Doc View Source AddCustomInfo(String, TechType, Vector3, Boolean, LargeWorldEntity.CellLevel, EntitySlot.Type) Adds in a custom to the of the game. It contains information about the entity, like its , its , etc. Declaration public static void AddCustomInfo(string classId, TechType techType, Vector3 localScale, bool prefabZUp = false, LargeWorldEntity.CellLevel cellLevel = null, EntitySlot.Type slotType = null) Parameters Type Name Description System.String classId The classId of the entity. TechType techType The of the entity. Vector3 localScale The scale that the entity's local scale is set to when spawned. System.Boolean prefabZUp Whether the prefab's Z-axis should be facing up, when spawned. LargeWorldEntity.CellLevel cellLevel The of the entity. EntitySlot.Type slotType The of the entity. Dictates which \"slots\" are suitable for this entity to spawn in. For e.g., most in-crate fragments have a slot type. | Improve this Doc View Source AddCustomInfo(String, WorldEntityInfo) Adds in a custom to the of the game. It contains information about the entity, like its , its , etc. Declaration public static void AddCustomInfo(string classId, WorldEntityInfo data) Parameters Type Name Description System.String classId The classID of the entity whose data you are adding in. WorldEntityInfo data The data. Data is stored in the fields of the class, so they must be populated when passed in."
  },
  "api/SMLHelper.Json.Attributes.FileNameAttribute.html": {
    "href": "api/SMLHelper.Json.Attributes.FileNameAttribute.html",
    "title": "Class FileNameAttribute",
    "keywords": "Class FileNameAttribute Attribute used to specify a file name for use with a JsonFile . Inheritance System.Object System.Attribute FileNameAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Json.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class FileNameAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source FileNameAttribute(String) Used to specify the file name for a JsonFile . Declaration public FileNameAttribute(string fileName) Parameters Type Name Description System.String fileName Properties | Improve this Doc View Source FileName The filename. Declaration public string FileName { get; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.Attributes.html": {
    "href": "api/SMLHelper.Json.Attributes.html",
    "title": "Namespace SMLHelper.Json.Attributes",
    "keywords": "Namespace SMLHelper.Json.Attributes Classes FileNameAttribute Attribute used to specify a file name for use with a JsonFile ."
  },
  "api/SMLHelper.Json.ConfigFile.html": {
    "href": "api/SMLHelper.Json.ConfigFile.html",
    "title": "Class ConfigFile",
    "keywords": "Class ConfigFile A simple implementation of IJsonFile for use with config files. Inheritance System.Object ConfigFile Implements IJsonFile Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Json Assembly : SMLHelper.dll Syntax public abstract class ConfigFile : IJsonFile Constructors | Improve this Doc View Source ConfigFile() Creates a new instance of ConfigFile , parsing the filename and subfolder from a ConfigFileAttribute if declared, or with default values otherwise. Declaration public ConfigFile() | Improve this Doc View Source ConfigFile(String, String) Creates a new instance of ConfigFile . Declaration protected ConfigFile(string fileName = \"config\", string subfolder = null) Parameters Type Name Description System.String fileName The name of the ConfigFile , \"config\" by default. System.String subfolder Optional subfolder for the ConfigFile . Examples using SMLHelper.Options; using UnityEngine; public class MyConfig : ConfigFile { public KeyCode ActivationKey { get; set; } = KeyCode.Escape; public MyConfig() : base(\"options\", \"Config Files\") { } // The config file will be stored at the path \"QMods\\YourModName\\Config Files\\options.json\" } Fields | Improve this Doc View Source OnFinishedLoading An event that is invoked whenever the ConfigFile has finished loading data from disk. Declaration public EventHandler<ConfigFileEventArgs> OnFinishedLoading Field Value Type Description System.EventHandler < ConfigFileEventArgs > | Improve this Doc View Source OnFinishedSaving An event that is invoked whenever the ConfigFile has finished saving data to disk. Declaration public EventHandler<ConfigFileEventArgs> OnFinishedSaving Field Value Type Description System.EventHandler < ConfigFileEventArgs > | Improve this Doc View Source OnStartedLoading An event that is invoked whenever the ConfigFile is about to load data from disk. Declaration public EventHandler<ConfigFileEventArgs> OnStartedLoading Field Value Type Description System.EventHandler < ConfigFileEventArgs > | Improve this Doc View Source OnStartedSaving An event that is invoked whenever the ConfigFile is about to save data to disk. Declaration public EventHandler<ConfigFileEventArgs> OnStartedSaving Field Value Type Description System.EventHandler < ConfigFileEventArgs > Properties | Improve this Doc View Source AlwaysIncludedJsonConverters The s that should always be used when reading/writing JSON data. Declaration public JsonConverter[] AlwaysIncludedJsonConverters { get; } Property Value Type Description JsonConverter [] See Also SMLHelper.Json.ConfigFile.alwaysIncludedJsonConverters | Improve this Doc View Source JsonFilePath The file path at which the JSON file is accessible for reading and writing. Declaration public string JsonFilePath { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Load(Boolean) Loads the JSON properties from the file on disk into the ConfigFile . Declaration public void Load(bool createFileIfNotExist = true) Parameters Type Name Description System.Boolean createFileIfNotExist Whether a new JSON file should be created with default values if it does not already exist. See Also Save() LoadWithConverters(Boolean, JsonConverter[]) | Improve this Doc View Source LoadWithConverters(Boolean, JsonConverter[]) Loads the JSON properties from the file on disk into the ConfigFile . Declaration public void LoadWithConverters(bool createFileIfNotExist = true, params JsonConverter[] jsonConverters) Parameters Type Name Description System.Boolean createFileIfNotExist Whether a new JSON file should be created with default values if it does not already exist. JsonConverter [] jsonConverters Optional s to be used for serialization. The AlwaysIncludedJsonConverters will always be used, regardless of whether you pass them. See Also SaveWithConverters(JsonConverter[]) Load(Boolean) | Improve this Doc View Source Save() Saves the current fields and properties of the ConfigFile as JSON properties to the file on disk. Declaration public void Save() See Also Load(Boolean) SaveWithConverters(JsonConverter[]) | Improve this Doc View Source SaveWithConverters(JsonConverter[]) Saves the current fields and properties of the ConfigFile as JSON properties to the file on disk. Declaration public void SaveWithConverters(params JsonConverter[] jsonConverters) Parameters Type Name Description JsonConverter [] jsonConverters Optional s to be used for deserialization. The AlwaysIncludedJsonConverters will always be used, regardless of whether you pass them. See Also LoadWithConverters(Boolean, JsonConverter[]) Save() Implements IJsonFile Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.ConfigFileAttribute.html": {
    "href": "api/SMLHelper.Json.ConfigFileAttribute.html",
    "title": "Class ConfigFileAttribute",
    "keywords": "Class ConfigFileAttribute Attribute used to specify the filename and subfolder for a ConfigFile . Inheritance System.Object System.Attribute ConfigFileAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Json Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class ConfigFileAttribute : Attribute, _Attribute Remarks When used alongside the ConfigFile(String, String) constructor, this attribute is ignored. Examples using SMLHelper.Json; [ConfigFile(\"options\", \"configs\")] public class Config : ConfigFile { public float MyFloatValue; } Constructors | Improve this Doc View Source ConfigFileAttribute(String) Used to specify the filename for the ConfigFile . Declaration public ConfigFileAttribute(string filename = \"config\") Parameters Type Name Description System.String filename The filename to use for the ConfigFile . Remarks When used alongside the ConfigFile(String, String) constructor, this attribute is ignored. Properties | Improve this Doc View Source Filename The filename to use for the ConfigFile . Declaration public string Filename { get; } Property Value Type Description System.String | Improve this Doc View Source Subfolder The subfolder within the mod's folder for the ConfigFile . Declaration public string Subfolder { get; set; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.ConfigFileEventArgs.html": {
    "href": "api/SMLHelper.Json.ConfigFileEventArgs.html",
    "title": "Class ConfigFileEventArgs",
    "keywords": "Class ConfigFileEventArgs Contains basic information for a ConfigFile event. Inheritance System.Object System.EventArgs ConfigFileEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Json Assembly : SMLHelper.dll Syntax public class ConfigFileEventArgs : EventArgs Constructors | Improve this Doc View Source ConfigFileEventArgs(ConfigFile) Instantiates a new ConfigFileEventArgs . Declaration public ConfigFileEventArgs(ConfigFile instance) Parameters Type Name Description ConfigFile instance The ConfigFile instance the event pertains to. Properties | Improve this Doc View Source Instance The instance of the ConfigFile this event pertains to. Declaration public ConfigFile Instance { get; } Property Value Type Description ConfigFile Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.Converters.ColorConverter.html": {
    "href": "api/SMLHelper.Json.Converters.ColorConverter.html",
    "title": "Class ColorConverter",
    "keywords": "Class ColorConverter A Color json converter that simplifies the Color to only r,g,b,a serialization. Inheritance System.Object ColorConverter Namespace : SMLHelper.Json.Converters Assembly : SMLHelper.dll Syntax public class ColorConverter : JsonConverter Methods | Improve this Doc View Source CanConvert(Type) A method that determines when this converter should process. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType the current object type Returns Type Description System.Boolean | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader System.Type objectType System.Object existingValue JsonSerializer serializer Returns Type Description System.Object | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer System.Object value JsonSerializer serializer Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.Converters.CustomEnumConverter.html": {
    "href": "api/SMLHelper.Json.Converters.CustomEnumConverter.html",
    "title": "Class CustomEnumConverter",
    "keywords": "Class CustomEnumConverter An Enum json converter that supports custom enum conversions. Inheritance System.Object CustomEnumConverter Namespace : SMLHelper.Json.Converters Assembly : SMLHelper.dll Syntax public class CustomEnumConverter : JsonConverter Methods | Improve this Doc View Source CanConvert(Type) A method that determines when this converter should process. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType the current object type Returns Type Description System.Boolean | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader System.Type objectType System.Object existingValue JsonSerializer serializer Returns Type Description System.Object | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer System.Object value JsonSerializer serializer Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.Converters.FloatConverter.html": {
    "href": "api/SMLHelper.Json.Converters.FloatConverter.html",
    "title": "Class FloatConverter",
    "keywords": "Class FloatConverter A for rounding floats or doubles to a given number of decimal places, trimming trailing 0s. Inheritance System.Object FloatConverter Namespace : SMLHelper.Json.Converters Assembly : SMLHelper.dll Syntax public class FloatConverter : JsonConverter Constructors | Improve this Doc View Source FloatConverter() Creates a new FloatConverter . Declaration public FloatConverter() | Improve this Doc View Source FloatConverter(Int32) Creates a new FloatConverter . Declaration public FloatConverter(int decimalPlaces) Parameters Type Name Description System.Int32 decimalPlaces The number of decimal places to round to, where -1 disables rounding. | Improve this Doc View Source FloatConverter(Int32, MidpointRounding) Creates a new FloatConverter . Declaration public FloatConverter(int decimalPlaces, MidpointRounding mode) Parameters Type Name Description System.Int32 decimalPlaces The number of decimal places to round to, where -1 disables rounding. System.MidpointRounding mode The rounding mode to use when rounding. See Also System.MidpointRounding | Improve this Doc View Source FloatConverter(MidpointRounding) Creates a new FloatConverter . Declaration public FloatConverter(MidpointRounding mode) Parameters Type Name Description System.MidpointRounding mode The rounding mode to use when rounding. Methods | Improve this Doc View Source CanConvert(Type) The method for determining whether the current objectType can be processed byt this Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) The method for reading the System.Single or System.Double data from the reader . Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader System.Type objectType System.Object existingValue JsonSerializer serializer Returns Type Description System.Object | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) The method for writing the value data to the writer . Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer System.Object value JsonSerializer serializer Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.Converters.html": {
    "href": "api/SMLHelper.Json.Converters.html",
    "title": "Namespace SMLHelper.Json.Converters",
    "keywords": "Namespace SMLHelper.Json.Converters Classes ColorConverter A Color json converter that simplifies the Color to only r,g,b,a serialization. CustomEnumConverter An Enum json converter that supports custom enum conversions. FloatConverter A for rounding floats or doubles to a given number of decimal places, trimming trailing 0s. KeyCodeConverter A for handling s. QuaternionConverter A Quaternion json converter that simplifies the Vector3 to only x,y,z serialization. Vector2Converter A Vector2 json converter that simplifies the Vector2 to only x,y serialization. Vector2IntConverter A Vector2Int json converter that simplifies the Vector2Int to only x,y serialization. Vector3Converter A Vector3 json converter that simplifies the Vector3 to only x,y,z serialization. Vector3IntConverter A Vector3Int json converter that simplifies the Vector3Int to only x,y,z serialization. Vector4Converter A Vector4 json converter that simplifies the Vector4 to only x,y,z,w serialization."
  },
  "api/SMLHelper.Json.Converters.KeyCodeConverter.html": {
    "href": "api/SMLHelper.Json.Converters.KeyCodeConverter.html",
    "title": "Class KeyCodeConverter",
    "keywords": "Class KeyCodeConverter A for handling s. Inheritance System.Object KeyCodeConverter Namespace : SMLHelper.Json.Converters Assembly : SMLHelper.dll Syntax public class KeyCodeConverter : JsonConverter Methods | Improve this Doc View Source CanConvert(Type) The method for determining whether the current objectType can be processed by this . Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) The method for reading the data from the reader . Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader System.Type objectType System.Object existingValue JsonSerializer serializer Returns Type Description System.Object | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) The method for writing the value data to the writer . Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer System.Object value JsonSerializer serializer Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.Converters.QuaternionConverter.html": {
    "href": "api/SMLHelper.Json.Converters.QuaternionConverter.html",
    "title": "Class QuaternionConverter",
    "keywords": "Class QuaternionConverter A Quaternion json converter that simplifies the Vector3 to only x,y,z serialization. Inheritance System.Object QuaternionConverter Namespace : SMLHelper.Json.Converters Assembly : SMLHelper.dll Syntax public class QuaternionConverter : JsonConverter Methods | Improve this Doc View Source CanConvert(Type) A method that determines when this converter should process. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType the current object type Returns Type Description System.Boolean | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader System.Type objectType System.Object existingValue JsonSerializer serializer Returns Type Description System.Object | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer System.Object value JsonSerializer serializer Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.Converters.Vector2Converter.html": {
    "href": "api/SMLHelper.Json.Converters.Vector2Converter.html",
    "title": "Class Vector2Converter",
    "keywords": "Class Vector2Converter A Vector2 json converter that simplifies the Vector2 to only x,y serialization. Inheritance System.Object Vector2Converter Namespace : SMLHelper.Json.Converters Assembly : SMLHelper.dll Syntax public class Vector2Converter : JsonConverter Methods | Improve this Doc View Source CanConvert(Type) A method that determines when this converter should process. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType the current object type Returns Type Description System.Boolean | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader System.Type objectType System.Object existingValue JsonSerializer serializer Returns Type Description System.Object | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer System.Object value JsonSerializer serializer Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.Converters.Vector2IntConverter.html": {
    "href": "api/SMLHelper.Json.Converters.Vector2IntConverter.html",
    "title": "Class Vector2IntConverter",
    "keywords": "Class Vector2IntConverter A Vector2Int json converter that simplifies the Vector2Int to only x,y serialization. Inheritance System.Object Vector2IntConverter Namespace : SMLHelper.Json.Converters Assembly : SMLHelper.dll Syntax public class Vector2IntConverter : JsonConverter Methods | Improve this Doc View Source CanConvert(Type) A method that determines when this converter should process. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType the current object type Returns Type Description System.Boolean | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader System.Type objectType System.Object existingValue JsonSerializer serializer Returns Type Description System.Object | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer System.Object value JsonSerializer serializer Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.Converters.Vector3Converter.html": {
    "href": "api/SMLHelper.Json.Converters.Vector3Converter.html",
    "title": "Class Vector3Converter",
    "keywords": "Class Vector3Converter A Vector3 json converter that simplifies the Vector3 to only x,y,z serialization. Inheritance System.Object Vector3Converter Namespace : SMLHelper.Json.Converters Assembly : SMLHelper.dll Syntax public class Vector3Converter : JsonConverter Methods | Improve this Doc View Source CanConvert(Type) A method that determines when this converter should process. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType the current object type Returns Type Description System.Boolean | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader System.Type objectType System.Object existingValue JsonSerializer serializer Returns Type Description System.Object | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer System.Object value JsonSerializer serializer Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.Converters.Vector3IntConverter.html": {
    "href": "api/SMLHelper.Json.Converters.Vector3IntConverter.html",
    "title": "Class Vector3IntConverter",
    "keywords": "Class Vector3IntConverter A Vector3Int json converter that simplifies the Vector3Int to only x,y,z serialization. Inheritance System.Object Vector3IntConverter Namespace : SMLHelper.Json.Converters Assembly : SMLHelper.dll Syntax public class Vector3IntConverter : JsonConverter Methods | Improve this Doc View Source CanConvert(Type) A method that determines when this converter should process. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType the current object type Returns Type Description System.Boolean | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader System.Type objectType System.Object existingValue JsonSerializer serializer Returns Type Description System.Object | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer System.Object value JsonSerializer serializer Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.Converters.Vector4Converter.html": {
    "href": "api/SMLHelper.Json.Converters.Vector4Converter.html",
    "title": "Class Vector4Converter",
    "keywords": "Class Vector4Converter A Vector4 json converter that simplifies the Vector4 to only x,y,z,w serialization. Inheritance System.Object Vector4Converter Namespace : SMLHelper.Json.Converters Assembly : SMLHelper.dll Syntax public class Vector4Converter : JsonConverter Methods | Improve this Doc View Source CanConvert(Type) A method that determines when this converter should process. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType the current object type Returns Type Description System.Boolean | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) A method that tells Newtonsoft how to Deserialize and read the current object. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description JsonReader reader System.Type objectType System.Object existingValue JsonSerializer serializer Returns Type Description System.Object | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) A method that tells Newtonsoft how to Serialize the current object. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description JsonWriter writer System.Object value JsonSerializer serializer Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.ExtensionMethods.html": {
    "href": "api/SMLHelper.Json.ExtensionMethods.html",
    "title": "Namespace SMLHelper.Json.ExtensionMethods",
    "keywords": "Namespace SMLHelper.Json.ExtensionMethods Classes JsonExtensions Extension methods for parsing objects as JSON data."
  },
  "api/SMLHelper.Json.ExtensionMethods.JsonExtensions.html": {
    "href": "api/SMLHelper.Json.ExtensionMethods.JsonExtensions.html",
    "title": "Class JsonExtensions",
    "keywords": "Class JsonExtensions Extension methods for parsing objects as JSON data. Inheritance System.Object JsonExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Json.ExtensionMethods Assembly : SMLHelper.dll Syntax public static class JsonExtensions Methods | Improve this Doc View Source LoadJson<T>(T, String, Boolean, JsonConverter[]) Loads the JSON properties from a file on disk into the jsonObject . Declaration public static void LoadJson<T>(this T jsonObject, string path = null, bool createIfNotExist = true, params JsonConverter[] jsonConverters) where T : class Parameters Type Name Description T jsonObject The object instance to load the properties into. System.String path The file path to the JSON file to parse. System.Boolean createIfNotExist Whether a new JSON file should be created with default values if it does not already exist. JsonConverter [] jsonConverters The s to be used for deserialization. Type Parameters Name Description T The type of the jsonObject . See Also SaveJson<T>(T, String, JsonConverter[]) | Improve this Doc View Source SaveJson<T>(T, String, JsonConverter[]) Saves the fields and properties of the jsonObject as JSON properties to the file on disk. Declaration public static void SaveJson<T>(this T jsonObject, string path = null, params JsonConverter[] jsonConverters) where T : class Parameters Type Name Description T jsonObject The object instance to save the fields and properties from. System.String path The file path at which to save the JSON file. JsonConverter [] jsonConverters The s to be used for serialization. Type Parameters Name Description T The type of the jsonObject ."
  },
  "api/SMLHelper.Json.html": {
    "href": "api/SMLHelper.Json.html",
    "title": "Namespace SMLHelper.Json",
    "keywords": "Namespace SMLHelper.Json Classes ConfigFile A simple implementation of IJsonFile for use with config files. ConfigFileAttribute Attribute used to specify the filename and subfolder for a ConfigFile . ConfigFileEventArgs Contains basic information for a ConfigFile event. JsonFile A simple abstract implementation of IJsonFile . JsonFileEventArgs Contains basic information for a JsonFile event. SaveDataCache An abstract implementation of IJsonFile intended for use with caching per-save data."
  },
  "api/SMLHelper.Json.Interfaces.html": {
    "href": "api/SMLHelper.Json.Interfaces.html",
    "title": "Namespace SMLHelper.Json.Interfaces",
    "keywords": "Namespace SMLHelper.Json.Interfaces Interfaces IJsonFile A simple interface for a JSON file framework."
  },
  "api/SMLHelper.Json.Interfaces.IJsonFile.html": {
    "href": "api/SMLHelper.Json.Interfaces.IJsonFile.html",
    "title": "Interface IJsonFile",
    "keywords": "Interface IJsonFile A simple interface for a JSON file framework. Namespace : SMLHelper.Json.Interfaces Assembly : SMLHelper.dll Syntax public interface IJsonFile Properties | Improve this Doc View Source AlwaysIncludedJsonConverters The s that should always be used when reading/writing JSON data. Declaration JsonConverter[] AlwaysIncludedJsonConverters { get; } Property Value Type Description JsonConverter [] | Improve this Doc View Source JsonFilePath The file path at which the JSON file is accessible for reading and writing. Declaration string JsonFilePath { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Load(Boolean) A method for loading the JSON properties from disk. Declaration void Load(bool createFileIfNotExist = true) Parameters Type Name Description System.Boolean createFileIfNotExist Whether a new JSON file should be created with default values if it does not already exist. See Also Save() LoadWithConverters(Boolean, JsonConverter[]) | Improve this Doc View Source LoadWithConverters(Boolean, JsonConverter[]) A method for loading the JSON properties from disk. Declaration void LoadWithConverters(bool createFileIfNotExist = true, params JsonConverter[] jsonConverters) Parameters Type Name Description System.Boolean createFileIfNotExist Whether a new JSON file should be created with default values if it does not already exist. JsonConverter [] jsonConverters Optional s to be used for deserialization. See Also SaveWithConverters(JsonConverter[]) Load(Boolean) | Improve this Doc View Source Save() A method for saving the JSON properties to disk. Declaration void Save() See Also Load(Boolean) SaveWithConverters(JsonConverter[]) | Improve this Doc View Source SaveWithConverters(JsonConverter[]) A method for saving the JSON properties to disk. Declaration void SaveWithConverters(params JsonConverter[] jsonConverters) Parameters Type Name Description JsonConverter [] jsonConverters Optional s to be used for serialization. See Also LoadWithConverters(Boolean, JsonConverter[]) Save() Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.JsonFile.html": {
    "href": "api/SMLHelper.Json.JsonFile.html",
    "title": "Class JsonFile",
    "keywords": "Class JsonFile A simple abstract implementation of IJsonFile . Inheritance System.Object JsonFile SaveDataCache Implements IJsonFile Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Json Assembly : SMLHelper.dll Syntax public abstract class JsonFile : IJsonFile Fields | Improve this Doc View Source OnFinishedLoading An event that is invoked whenever the JsonFile has finished loading data from disk. Declaration public EventHandler<JsonFileEventArgs> OnFinishedLoading Field Value Type Description System.EventHandler < JsonFileEventArgs > | Improve this Doc View Source OnFinishedSaving An event that is invoked whenever the JsonFile has finished saving data to disk. Declaration public EventHandler<JsonFileEventArgs> OnFinishedSaving Field Value Type Description System.EventHandler < JsonFileEventArgs > | Improve this Doc View Source OnStartedLoading An event that is invoked whenever the JsonFile is about to load data from disk. Declaration public EventHandler<JsonFileEventArgs> OnStartedLoading Field Value Type Description System.EventHandler < JsonFileEventArgs > | Improve this Doc View Source OnStartedSaving An event that is invoked whenever the JsonFile is about to save data to disk. Declaration public EventHandler<JsonFileEventArgs> OnStartedSaving Field Value Type Description System.EventHandler < JsonFileEventArgs > Properties | Improve this Doc View Source AlwaysIncludedJsonConverters The s that should always be used when reading/writing JSON data. Declaration public virtual JsonConverter[] AlwaysIncludedJsonConverters { get; } Property Value Type Description JsonConverter [] See Also SMLHelper.Json.JsonFile.alwaysIncludedJsonConverters | Improve this Doc View Source JsonFilePath The file path at which the JSON file is accessible for reading and writing. Declaration public abstract string JsonFilePath { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Load(Boolean) Loads the JSON properties from the file on disk into the JsonFile . Declaration public virtual void Load(bool createFileIfNotExist = true) Parameters Type Name Description System.Boolean createFileIfNotExist Whether a new JSON file should be created with default values if it does not already exist. See Also Save() LoadWithConverters(Boolean, JsonConverter[]) | Improve this Doc View Source LoadWithConverters(Boolean, JsonConverter[]) Loads the JSON properties from the file on disk into the JsonFile . Declaration public virtual void LoadWithConverters(bool createFileIfNotExist = true, params JsonConverter[] jsonConverters) Parameters Type Name Description System.Boolean createFileIfNotExist Whether a new JSON file should be created with default values if it does not already exist. JsonConverter [] jsonConverters Optional s to be used for serialization. The AlwaysIncludedJsonConverters will always be used, regardless of whether you pass them. See Also SaveWithConverters(JsonConverter[]) Load(Boolean) | Improve this Doc View Source Save() Saves the current fields and properties of the JsonFile as JSON properties to the file on disk. Declaration public virtual void Save() See Also Load(Boolean) SaveWithConverters(JsonConverter[]) | Improve this Doc View Source SaveWithConverters(JsonConverter[]) Saves the current fields and properties of the JsonFile as JSON properties to the file on disk. Declaration public virtual void SaveWithConverters(params JsonConverter[] jsonConverters) Parameters Type Name Description JsonConverter [] jsonConverters Optional s to be used for deserialization. The AlwaysIncludedJsonConverters will always be used, regardless of whether you pass them. See Also LoadWithConverters(Boolean, JsonConverter[]) Save() Implements IJsonFile Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.JsonFileEventArgs.html": {
    "href": "api/SMLHelper.Json.JsonFileEventArgs.html",
    "title": "Class JsonFileEventArgs",
    "keywords": "Class JsonFileEventArgs Contains basic information for a JsonFile event. Inheritance System.Object System.EventArgs JsonFileEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Json Assembly : SMLHelper.dll Syntax public class JsonFileEventArgs : EventArgs Constructors | Improve this Doc View Source JsonFileEventArgs(JsonFile) Instantiates a new JsonFileEventArgs . Declaration public JsonFileEventArgs(JsonFile instance) Parameters Type Name Description JsonFile instance The JsonFile instance the event pertains to. Properties | Improve this Doc View Source Instance The instance of the JsonFile this event pertains to. Declaration public JsonFile Instance { get; } Property Value Type Description JsonFile Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Json.SaveDataCache.html": {
    "href": "api/SMLHelper.Json.SaveDataCache.html",
    "title": "Class SaveDataCache",
    "keywords": "Class SaveDataCache An abstract implementation of IJsonFile intended for use with caching per-save data. Inheritance System.Object JsonFile SaveDataCache Implements IJsonFile Inherited Members JsonFile.AlwaysIncludedJsonConverters JsonFile.OnStartedLoading JsonFile.OnFinishedLoading JsonFile.OnStartedSaving JsonFile.OnFinishedSaving System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Json Assembly : SMLHelper.dll Syntax public abstract class SaveDataCache : JsonFile, IJsonFile Constructors | Improve this Doc View Source SaveDataCache() Creates a new instance of SaveDataCache , parsing the file name from FileNameAttribute if declared, or with default values otherwise. Declaration public SaveDataCache() Properties | Improve this Doc View Source JsonFilePath The file path at which the JSON file is accessible for reading and writing. Declaration public override string JsonFilePath { get; } Property Value Type Description System.String Overrides JsonFile.JsonFilePath Methods | Improve this Doc View Source Load(Boolean) Loads the JSON properties from the file on disk into the SaveDataCache . Declaration public override void Load(bool createFileIfNotExist = true) Parameters Type Name Description System.Boolean createFileIfNotExist Whether a new JSON file should be created with default values if it does not already exist. Overrides JsonFile.Load(Boolean) Exceptions Type Condition System.InvalidOperationException Thrown when the player is not in-game. See Also Save() LoadWithConverters(Boolean, JsonConverter[]) | Improve this Doc View Source LoadWithConverters(Boolean, JsonConverter[]) Loads the JSON properties from the file on disk into the SaveDataCache . Declaration public override void LoadWithConverters(bool createFileIfNotExist = true, params JsonConverter[] jsonConverters) Parameters Type Name Description System.Boolean createFileIfNotExist Whether a new JSON file should be created with default values if it does not already exist. JsonConverter [] jsonConverters Optional s to be used for serialization. The AlwaysIncludedJsonConverters will always be used, regardless of whether you pass them. Overrides JsonFile.LoadWithConverters(Boolean, JsonConverter[]) Exceptions Type Condition System.InvalidOperationException Thrown when the player is not in-game. See Also SaveWithConverters(JsonConverter[]) Load(Boolean) | Improve this Doc View Source Save() Saves the current fields and properties of the SaveDataCache as JSON properties to the file on disk. Declaration public override void Save() Overrides JsonFile.Save() Exceptions Type Condition System.InvalidOperationException Thrown when the player is not in-game. See Also Load(Boolean) SaveWithConverters(JsonConverter[]) | Improve this Doc View Source SaveWithConverters(JsonConverter[]) Saves the current fields and properties of the SaveDataCache as JSON properties to the file on disk. Declaration public override void SaveWithConverters(params JsonConverter[] jsonConverters) Parameters Type Name Description JsonConverter [] jsonConverters Optional s to be used for deserialization. The AlwaysIncludedJsonConverters will always be used, regardless of whether you pass them. Overrides JsonFile.SaveWithConverters(JsonConverter[]) Exceptions Type Condition System.InvalidOperationException Thrown when the player is not in-game. See Also LoadWithConverters(Boolean, JsonConverter[]) Save() Implements IJsonFile Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.Attributes.ButtonAttribute.html": {
    "href": "api/SMLHelper.Options.Attributes.ButtonAttribute.html",
    "title": "Class ButtonAttribute",
    "keywords": "Class ButtonAttribute Attribute used to signify the decorated method should be represented in the mod's options menu as a ModButtonOption . When the button is clicked, the given method will run. Inheritance System.Object System.Attribute ModOptionAttribute ButtonAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members ModOptionAttribute.Label ModOptionAttribute.Id ModOptionAttribute.Order ModOptionAttribute.Tooltip ModOptionAttribute.LabelLanguageId ModOptionAttribute.TooltipLanguageId System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public sealed class ButtonAttribute : ModOptionAttribute, _Attribute Examples using SMLHelper.Json; using SMLHelper.Options; using QModManager.Utility; [Menu(\"My Options Menu\")] public class Config : ConfigFile { [Button(\"My Cool Button\")] public static void MyCoolButton(object sender, ButtonClickedEventArgs e) { Logger.Log(Logger.Level.Info, \"Button was clicked!\"); Logger.Log(Logger.Level.Info, e.Id.ToString()); } } Constructors | Improve this Doc View Source ButtonAttribute() Signifies the decorated method should be represented in the mod's options menu as a ModButtonOption . Declaration public ButtonAttribute() | Improve this Doc View Source ButtonAttribute(String) Signifies the decorated method should be represented in the mod's options menu as a ModButtonOption and sets its label. Declaration public ButtonAttribute(string label = null) Parameters Type Name Description System.String label The label for the button. If none is set, the name of the method will be used. Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also MenuAttribute ButtonClickedEventArgs SMLHelper.Utility.InternalLogger ConfigFile"
  },
  "api/SMLHelper.Options.Attributes.ChoiceAttribute.html": {
    "href": "api/SMLHelper.Options.Attributes.ChoiceAttribute.html",
    "title": "Class ChoiceAttribute",
    "keywords": "Class ChoiceAttribute Attribute used to signify the decorated member should be represented in the mod's options menu as a ModChoiceOption<T> . Works for either System.Int32 index-based, System.String -based, or System.Enum -based members. Inheritance System.Object System.Attribute ModOptionAttribute ChoiceAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members ModOptionAttribute.Label ModOptionAttribute.Id ModOptionAttribute.Order ModOptionAttribute.Tooltip ModOptionAttribute.LabelLanguageId ModOptionAttribute.TooltipLanguageId System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)] public sealed class ChoiceAttribute : ModOptionAttribute, _Attribute Remarks System.Enum choices can also be parsed from their values by merely omitting the ChoiceAttribute . Examples using SMLHelper.Json; using SMLHelper.Options; public enum CustomChoice { One, Two, Three } [Menu(\"My Options Menu\")] public class Config : ConfigFile { [Choice(\"My index-based choice\", \"One\", \"Two\", \"Three\")] public int MyIndexBasedChoice; [Choice] public CustomChoice MyEnumBasedChoice; } Constructors | Improve this Doc View Source ChoiceAttribute() Attribute used to signify the decorated member should be represented in the mod's options menu as a ModChoiceOption<T> . Works for either System.Int32 index-based, System.String -based, or System.Enum -based members. Declaration public ChoiceAttribute() | Improve this Doc View Source ChoiceAttribute(String, String[]) Attribute used to signify the decorated member should be represented in the mod's options menu as a ModChoiceOption<T> . Works for either System.Int32 index-based, System.String -based, or System.Enum -based members. Declaration public ChoiceAttribute(string label = null, params string[] options) Parameters Type Name Description System.String label The label for the choice. If none is set, the name of the member will be used. System.String [] options The list of options for the user to choose from. Remarks System.Enum choices can also be parsed from their values by merely omitting the options . | Improve this Doc View Source ChoiceAttribute(String[]) Attribute used to signify the decorated member should be represented in the mod's options menu as a ModChoiceOption<T> . Works for either System.Int32 index-based, System.String -based, or System.Enum -based members. Declaration public ChoiceAttribute(string[] options) Parameters Type Name Description System.String [] options The list of options for the user to choose from. Remarks System.Enum choices can also be parsed from their values by merely omitting the options . Properties | Improve this Doc View Source Options The list of options that will be displayed. Declaration public string[] Options { get; set; } Property Value Type Description System.String [] Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also MenuAttribute ModChoiceOption <T> ConfigFile"
  },
  "api/SMLHelper.Options.Attributes.ColorPickerAttribute.html": {
    "href": "api/SMLHelper.Options.Attributes.ColorPickerAttribute.html",
    "title": "Class ColorPickerAttribute",
    "keywords": "Class ColorPickerAttribute Attribute used to signify the decorated should be represented in the mod's option menu as a ModColorOption . Inheritance System.Object System.Attribute ModOptionAttribute ColorPickerAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members ModOptionAttribute.Label ModOptionAttribute.Id ModOptionAttribute.Order ModOptionAttribute.Tooltip ModOptionAttribute.LabelLanguageId ModOptionAttribute.TooltipLanguageId System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)] public sealed class ColorPickerAttribute : ModOptionAttribute, _Attribute Examples using SMLHelper.Json; using SMLHelper.Options; [Menu(\"My Options Menu\")] public class Config : ConfigFile { [ColorPicker(\"My Toggle\")] public Color MyToggle; } Constructors | Improve this Doc View Source ColorPickerAttribute() Signifies the decorated should be represented in the mod's option menu as a ModColorOption . Declaration public ColorPickerAttribute() | Improve this Doc View Source ColorPickerAttribute(String) Signifies the decorated should be represented in the mod's option menu as a ModColorOption . Declaration public ColorPickerAttribute(string label = null) Parameters Type Name Description System.String label The label for the toggle. Properties | Improve this Doc View Source Advanced Which type of color picker to use. Declaration public bool Advanced { get; set; } Property Value Type Description System.Boolean Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also MenuAttribute ConfigFile"
  },
  "api/SMLHelper.Options.Attributes.html": {
    "href": "api/SMLHelper.Options.Attributes.html",
    "title": "Namespace SMLHelper.Options.Attributes",
    "keywords": "Namespace SMLHelper.Options.Attributes Classes ButtonAttribute Attribute used to signify the decorated method should be represented in the mod's options menu as a ModButtonOption . When the button is clicked, the given method will run. ChoiceAttribute Attribute used to signify the decorated member should be represented in the mod's options menu as a ModChoiceOption<T> . Works for either System.Int32 index-based, System.String -based, or System.Enum -based members. ColorPickerAttribute Attribute used to signify the decorated should be represented in the mod's option menu as a ModColorOption . IgnoreMemberAttribute Attribute used to signify the given property, field or method should be ignored when generating your mod options menu. KeybindAttribute Attribute used to signify the decorated should be represented in the mod's option menu as a ModKeybindOption . MenuAttribute Attribute used to signify a ModOptions menu should be automatically generated from a ConfigFile , as well as specifying options for handling the ConfigFile and ModOptions menu. ModOptionAttribute Abstract base attribute used to signify the decorated public member should generate a OptionItem in a mod's options menu. ModOptionEventAttribute Abstract base attribute used to signify a method to call whenever the derivative event is invoked for the decorated member. OnChangeAttribute Attribute used to signify a method to call whenever the decorated member's value changes. OnGameObjectCreatedAttribute Attribute used to signify a method to call whenever the for the OptionItem corresponding to the decorated member is created. SliderAttribute Attribute used to signify the specified System.Single , System.Double or System.Int32 should be represented in the mod's option menu as a ModSliderOption . ToggleAttribute Attribute used to signify the decorated System.Boolean should be represented in the mod's option menu as a ModToggleOption . Enums MenuAttribute.LoadEvents Specifies after which events the config file should be loaded from disk automatically. MenuAttribute.Members Specifies which members of the ConfigFile will be parsed and added to the menu. MenuAttribute.SaveEvents Specifies after which events the config file should be saved to disk automatically."
  },
  "api/SMLHelper.Options.Attributes.IgnoreMemberAttribute.html": {
    "href": "api/SMLHelper.Options.Attributes.IgnoreMemberAttribute.html",
    "title": "Class IgnoreMemberAttribute",
    "keywords": "Class IgnoreMemberAttribute Attribute used to signify the given property, field or method should be ignored when generating your mod options menu. Inheritance System.Object System.Attribute IgnoreMemberAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = false)] public sealed class IgnoreMemberAttribute : Attribute, _Attribute Remarks By default, all members are ignored unless either they are decorated with a ModOptionAttribute derivative, or the MemberProcessing property is set to Implicit . Examples using SMLHelper.Json; using SMLHelper.Options; [Menu(\"My Options Menu\")] public class Config : ConfigFile { [Button(\"My Cool Button)] public static void MyCoolButton(object sender, ButtonClickedEventArgs e) { Logger.Log(Logger.Level.Info, \"Button was clicked!\"); Logger.Log(Logger.Level.Info, e.Id.ToString()); } [IgnoreMember] public int FieldNotDisplayedInMenu; } Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also MenuAttribute ButtonAttribute ConfigFile MemberProcessing MenuAttribute.Members"
  },
  "api/SMLHelper.Options.Attributes.KeybindAttribute.html": {
    "href": "api/SMLHelper.Options.Attributes.KeybindAttribute.html",
    "title": "Class KeybindAttribute",
    "keywords": "Class KeybindAttribute Attribute used to signify the decorated should be represented in the mod's option menu as a ModKeybindOption . Inheritance System.Object System.Attribute ModOptionAttribute KeybindAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members ModOptionAttribute.Label ModOptionAttribute.Id ModOptionAttribute.Order ModOptionAttribute.Tooltip ModOptionAttribute.LabelLanguageId ModOptionAttribute.TooltipLanguageId System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)] public sealed class KeybindAttribute : ModOptionAttribute, _Attribute Examples using SMLHelper.Json; using SMLHelper.Options; using UnityEngine; [Menu(\"My Options Menu\")] public class Config : ConfigFile { [Keybind(\"My Keybind\")] public KeyCode MyKeybind; } Constructors | Improve this Doc View Source KeybindAttribute() Signifies the decorated should be represented in the mod's option menu as a ModKeybindOption . Declaration public KeybindAttribute() | Improve this Doc View Source KeybindAttribute(String) Signifies the decorated should be represented in the mod's option menu as a ModKeybindOption . Declaration public KeybindAttribute(string label = null) Parameters Type Name Description System.String label The label for the keybind. If none is set, the name of the member will be used. Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also MenuAttribute ConfigFile"
  },
  "api/SMLHelper.Options.Attributes.MenuAttribute.html": {
    "href": "api/SMLHelper.Options.Attributes.MenuAttribute.html",
    "title": "Class MenuAttribute",
    "keywords": "Class MenuAttribute Attribute used to signify a ModOptions menu should be automatically generated from a ConfigFile , as well as specifying options for handling the ConfigFile and ModOptions menu. Inheritance System.Object System.Attribute MenuAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class MenuAttribute : Attribute, _Attribute Examples using SMLHelper.Json; using SMLHelper.Options; using QModManager.Utility; using UnityEngine; [Menu(\"SMLHelper Example Mod\")] public class Config : ConfigFile { [Choice(\"My index-based choice\", \"Choice 1\", \"Choice 2\", \"Choice 3\", Tooltip = \"A simple tooltip\")] [OnChange(nameof(MyGenericValueChangedEvent))] public int ChoiceIndex; [Choice(\"My enum-based choice\"), OnChange(nameof(MyGenericValueChangedEvent))] public CustomChoice ChoiceEnum; [Keybind(\"My keybind\"), OnChange(nameof(MyGenericValueChangedEvent))] public KeyCode KeybindKey; [Slider(\"My slider\", 0, 50, DefaultValue = 25, Format = \"{0:F2}\"), OnChange(nameof(MyGenericValueChangedEvent))] public float SliderValue; [Toggle(\"My checkbox\"), OnChange(nameof(MyCheckboxToggleEvent)), OnChange(nameof(MyGenericValueChangedEvent))] public bool ToggleValue; [Button(\"My button\")] public void MyButtonClickEvent(ButtonClickedEventArgs e) { Logger.Log(Logger.Level.Info, \"Button was clicked!\"); Logger.Log(Logger.Level.Info, $\"{e.Id}\"); } public void MyCheckboxToggleEvent(ToggleChangedEventArgs e) { Logger.Log(Logger.Level.Info, \"Checkbox value was changed!\"); Logger.Log(Logger.Level.Info, $\"{e.Value}\"); } private void MyGenericValueChangedEvent(ModOptionEventArgs e) { Logger.Log(Logger.Level.Info, \"Generic value changed!\"); Logger.Log(Logger.Level.Info, $\"{e.Id}: {e.GetType()}\"); switch (e) { case KeybindChangedEventArgs keybindChangedEventArgs: Logger.Log(Logger.Level.Info, keybindChangedEventArgs.KeyName); break; case ChoiceChangedEventArgs choiceChangedEventArgs: Logger.Log(Logger.Level.Info, choiceChangedEventArgs.Value); break; case SliderChangedEventArgs sliderChangedEventArgs: Logger.Log(Logger.Level.Info, sliderChangedEventArgs.Value.ToString()); break; case ToggleChangedEventArgs toggleChangedEventArgs: Logger.Log(Logger.Level.Info, toggleChangedEventArgs.Value.ToString()); break; } } } Constructors | Improve this Doc View Source MenuAttribute(String) Signifies a ModOptions menu should be automatically generated from a ConfigFile . Declaration public MenuAttribute(string name) Parameters Type Name Description System.String name The display name for the generated options menu. Properties | Improve this Doc View Source LoadOn The events after which the config file will be loaded from disk automatically. Defaults to MenuRegistered . Declaration public MenuAttribute.LoadEvents LoadOn { get; set; } Property Value Type Description MenuAttribute.LoadEvents See Also MenuAttribute.LoadEvents SaveOn | Improve this Doc View Source MemberProcessing How members of the ConfigFile will be processed. Defaults to Explicit , so that only langword_csharp_public decorated members will be processed. Declaration public MenuAttribute.Members MemberProcessing { get; set; } Property Value Type Description MenuAttribute.Members See Also MenuAttribute.Members | Improve this Doc View Source Name The display name for the generated options menu. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source SaveOn The events after which the config file will be saved to disk automatically. Defaults to ChangeValue . Declaration public MenuAttribute.SaveEvents SaveOn { get; set; } Property Value Type Description MenuAttribute.SaveEvents See Also MenuAttribute.SaveEvents LoadOn Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also ChoiceAttribute OnChangeAttribute KeybindAttribute SliderAttribute ToggleAttribute ColorPickerAttribute ButtonAttribute ModOptions ConfigFile SMLHelper.Utility.InternalLogger"
  },
  "api/SMLHelper.Options.Attributes.MenuAttribute.LoadEvents.html": {
    "href": "api/SMLHelper.Options.Attributes.MenuAttribute.LoadEvents.html",
    "title": "Enum MenuAttribute.LoadEvents",
    "keywords": "Enum MenuAttribute.LoadEvents Specifies after which events the config file should be loaded from disk automatically. Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [Flags] public enum LoadEvents : byte Remarks This enumeration has a System.FlagsAttribute that allows a bitwise combination of its member values. Fields Name Description MenuOpened Load when the menu is opened by the player. MenuRegistered Load when the menu is registered to SMLHelper via RegisterModOptions<T>() . None Never automatically load. Extension Methods EnumExtensions.IsDefinedByDefault<MenuAttribute.LoadEvents>()"
  },
  "api/SMLHelper.Options.Attributes.MenuAttribute.Members.html": {
    "href": "api/SMLHelper.Options.Attributes.MenuAttribute.Members.html",
    "title": "Enum MenuAttribute.Members",
    "keywords": "Enum MenuAttribute.Members Specifies which members of the ConfigFile will be parsed and added to the menu. Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax public enum Members Fields Name Description Explicit Only langword_csharp_public members decorated with a ModOptionAttribute derivative such as SliderAttribute , ChoiceAttribute etc. will be processed. Implicit All langword_csharp_public members will be processed, and where they are not decorated, a default attribute will be generated for them. Extension Methods EnumExtensions.IsDefinedByDefault<MenuAttribute.Members>()"
  },
  "api/SMLHelper.Options.Attributes.MenuAttribute.SaveEvents.html": {
    "href": "api/SMLHelper.Options.Attributes.MenuAttribute.SaveEvents.html",
    "title": "Enum MenuAttribute.SaveEvents",
    "keywords": "Enum MenuAttribute.SaveEvents Specifies after which events the config file should be saved to disk automatically. Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [Flags] public enum SaveEvents : byte Remarks This enumeration has a System.FlagsAttribute that allows a bitwise combination of its member values. Fields Name Description ChangeValue Save whenever any value is changed. None Never automatically save. QuitGame Save when the player quits the game. SaveGame Save when the player saves the game. Extension Methods EnumExtensions.IsDefinedByDefault<MenuAttribute.SaveEvents>()"
  },
  "api/SMLHelper.Options.Attributes.ModOptionAttribute.html": {
    "href": "api/SMLHelper.Options.Attributes.ModOptionAttribute.html",
    "title": "Class ModOptionAttribute",
    "keywords": "Class ModOptionAttribute Abstract base attribute used to signify the decorated public member should generate a OptionItem in a mod's options menu. Inheritance System.Object System.Attribute ModOptionAttribute ButtonAttribute ChoiceAttribute ColorPickerAttribute KeybindAttribute SliderAttribute ToggleAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = false)] public abstract class ModOptionAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ModOptionAttribute(String) Signifies the decorated member should be represented in the mod's options menu as a OptionItem with an optional label. Declaration protected ModOptionAttribute(string label = null) Parameters Type Name Description System.String label The label to display. If none is set, the name of the member will be used. If LabelLanguageId is set, this will be ignored. Properties | Improve this Doc View Source Id The Id to be used for the field in the mod's option menu. If none is specified, one will be automatically generated when your ConfigFile is registered to the OptionsPanelHandler . This means it will change every time the game is launched, but is guaranteed to be unique. If you would like to specify an Id to use for internal comparisons, you can do so here. Declaration public string Id { get; set; } Property Value Type Description System.String | Improve this Doc View Source Label The label to use when displaying the field in the mod's options menu. If LabelLanguageId is set, this will be ignored. Declaration public string Label { get; set; } Property Value Type Description System.String | Improve this Doc View Source LabelLanguageId An optional id to be parsed with for the label, allowing for custom language-based strings via the LanguageHandler API. If this is set, it will take precedence. Declaration public string LabelLanguageId { get; set; } Property Value Type Description System.String See Also SetLanguageLine(String, String) | Improve this Doc View Source Order The order in which to display fields in the mod's option menu, in ascending order. If none is specified, the order will be automatically set. Declaration public int Order { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Tooltip An optional tooltip to display for the field. If TooltipLanguageId is set, this will be ignored. Declaration public string Tooltip { get; set; } Property Value Type Description System.String | Improve this Doc View Source TooltipLanguageId An optional id to be parsed with for the tooltip, allowing for custom lanaguage-based strings via the LanguageHandler API. If this is set, it will take precedence. Declaration public string TooltipLanguageId { get; set; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.Attributes.ModOptionEventAttribute.html": {
    "href": "api/SMLHelper.Options.Attributes.ModOptionEventAttribute.html",
    "title": "Class ModOptionEventAttribute",
    "keywords": "Class ModOptionEventAttribute Abstract base attribute used to signify a method to call whenever the derivative event is invoked for the decorated member. Inheritance System.Object System.Attribute ModOptionEventAttribute OnChangeAttribute OnGameObjectCreatedAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)] public abstract class ModOptionEventAttribute : Attribute, _Attribute Remarks The method must be a member of the same class. Constructors | Improve this Doc View Source ModOptionEventAttribute(String) Signifies a method to call whenever the derivative event is invoked for the decorated member. Declaration public ModOptionEventAttribute(string methodName) Parameters Type Name Description System.String methodName The name of the method within the same class to invoke. Remarks The method must be a member of the same class. Properties | Improve this Doc View Source MethodName The name of the method to invoke. Declaration public string MethodName { get; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.Attributes.OnChangeAttribute.html": {
    "href": "api/SMLHelper.Options.Attributes.OnChangeAttribute.html",
    "title": "Class OnChangeAttribute",
    "keywords": "Class OnChangeAttribute Attribute used to signify a method to call whenever the decorated member's value changes. Inheritance System.Object System.Attribute ModOptionEventAttribute OnChangeAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members ModOptionEventAttribute.MethodName System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = true)] public sealed class OnChangeAttribute : ModOptionEventAttribute, _Attribute Remarks The method must be a member of the same class. Can be specified mutliple times to call multiple methods. The specified method can take the following parameters in any order: - System.Object sender: The sender of the event - System.EventArgs eventArgs: The generalized event arguments of the event - ChoiceChangedEventArgs<T> choiceChangedEventArgs: Only when the member corresponds to a ModChoiceOption<T> - KeybindChangedEventArgs keybindChangedEventArgs: Only when the member correspends to a ModKeybindOption - SliderChangedEventArgs sliderChangedEventArgs: Only when the member corresponds to a ModSliderOption - ToggleChangedEventArgs toggleChangedEventArgs: Only when the member corresponds to a ModToggleOption Examples using SMLHelper.Json; using SMLHelper.Options; using QModManager.Utility; using UnityEngine; [Menu(\"SMLHelper Example Mod\")] public class Config : ConfigFile { [Toggle(\"My checkbox\"), OnChange(nameof(MyCheckboxToggleEvent)), OnChange(nameof(MyGenericValueChangedEvent))] public bool ToggleValue; public void MyCheckboxToggleEvent(ToggleChangedEventArgs e) { Logger.Log(Logger.Level.Info, \"Checkbox value was changed!\"); Logger.Log(Logger.Level.Info, $\"{e.Value}\"); } private void MyGenericValueChangedEvent(ModOptionEventArgs e) { Logger.Log(Logger.Level.Info, \"Generic value changed!\"); Logger.Log(Logger.Level.Info, $\"{e.Id}: {e.GetType()}\"); switch (e) { case KeybindChangedEventArgs keybindChangedEventArgs: Logger.Log(Logger.Level.Info, keybindChangedEventArgs.KeyName); break; case ChoiceChangedEventArgs choiceChangedEventArgs: Logger.Log(Logger.Level.Info, choiceChangedEventArgs.Value); break; case SliderChangedEventArgs sliderChangedEventArgs: Logger.Log(Logger.Level.Info, sliderChangedEventArgs.Value.ToString()); break; case ToggleChangedEventArgs toggleChangedEventArgs: Logger.Log(Logger.Level.Info, toggleChangedEventArgs.Value.ToString()); break; } } Constructors | Improve this Doc View Source OnChangeAttribute(String) Signifies a method to call whenever the decorated member's value changes. Declaration public OnChangeAttribute(string methodName) Parameters Type Name Description System.String methodName The name of the method within the same class to invoke. Remarks The method must be a member of the same class. Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also MenuAttribute ToggleAttribute System.EventArgs ChoiceChangedEventArgs <T> KeybindChangedEventArgs SliderChangedEventArgs ToggleChangedEventArgs ConfigFile OnGameObjectCreatedAttribute SMLHelper.Utility.InternalLogger"
  },
  "api/SMLHelper.Options.Attributes.OnGameObjectCreatedAttribute.html": {
    "href": "api/SMLHelper.Options.Attributes.OnGameObjectCreatedAttribute.html",
    "title": "Class OnGameObjectCreatedAttribute",
    "keywords": "Class OnGameObjectCreatedAttribute Attribute used to signify a method to call whenever the for the OptionItem corresponding to the decorated member is created. Inheritance System.Object System.Attribute ModOptionEventAttribute OnGameObjectCreatedAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members ModOptionEventAttribute.MethodName System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)] public sealed class OnGameObjectCreatedAttribute : ModOptionEventAttribute, _Attribute Remarks The method must be a member of the same class. Can be specified multiple times to call multiple methods. The specified method can optionally take the following parameters in any order: - System.Object sender: The sender of the event - System.EventArgs eventArgs: The generalized event arguments of the event - GameObjectCreatedEventArgs gameObjectCreatedEventArgs: The GameObjectCreatedEventArgs for the event Examples using SMLHelper.Json; using SMLHelper.Options; using QModManager.Utility; using UnityEngine; [Menu(\"SMLHelper Example Mod\")] public class Config : ConfigFile { [Toggle(\"My checkbox\"), OnGameObjectCreated(nameof(MyGameObjectCreatedEvent))] public bool ToggleValue; private void MyGameObjectCreatedEvent(GameObjectCreatedEventArgs e) { Logger.Log(Logger.Level.Info, \"GameObject was created\"); Logger.Log(Logger.Level.Info, $\"{e.Id}: {e.GameObject}\"); } } Constructors | Improve this Doc View Source OnGameObjectCreatedAttribute(String) Signifies a method to call whenever the for the OptionItem corresponding to the decorated member is created. Declaration public OnGameObjectCreatedAttribute(string methodName) Parameters Type Name Description System.String methodName The name of the method within the same class to invoke. Remarks The method must be a member of the same class. Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also MenuAttribute ToggleAttribute System.EventArgs GameObjectCreatedEventArgs OnChangeAttribute SMLHelper.Utility.InternalLogger"
  },
  "api/SMLHelper.Options.Attributes.SliderAttribute.html": {
    "href": "api/SMLHelper.Options.Attributes.SliderAttribute.html",
    "title": "Class SliderAttribute",
    "keywords": "Class SliderAttribute Attribute used to signify the specified System.Single , System.Double or System.Int32 should be represented in the mod's option menu as a ModSliderOption . Inheritance System.Object System.Attribute ModOptionAttribute SliderAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members ModOptionAttribute.Label ModOptionAttribute.Id ModOptionAttribute.Order ModOptionAttribute.Tooltip ModOptionAttribute.LabelLanguageId ModOptionAttribute.TooltipLanguageId System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)] public sealed class SliderAttribute : ModOptionAttribute, _Attribute Examples using SMLHelper.Json; using SMLHelper.Options; [Menu(\"My Options Menu\")] public class Config : ConfigFile { [Slider(\"My Slider\", 0, 50, DefaultValue = 25, Format = \"{0:F2}\")] public float MySlider; } Constructors | Improve this Doc View Source SliderAttribute() Signifies the specified System.Single , System.Double or System.Int32 should be represented in the mod's options menu as a ModSliderOption . Declaration public SliderAttribute() | Improve this Doc View Source SliderAttribute(Single, Single) Signifies the specified System.Single , System.Double or System.Int32 should be represented in the mod's options menu as a ModSliderOption . Declaration public SliderAttribute(float min, float max) Parameters Type Name Description System.Single min The minimum value of the slider. System.Single max The maximum value of the slider. | Improve this Doc View Source SliderAttribute(String) Signifies the specified System.Single , System.Double or System.Int32 should be represented in the mod's options menu as a ModSliderOption . Declaration public SliderAttribute(string label = null) Parameters Type Name Description System.String label The label for the slider. If none is set, the name of the method will be used. | Improve this Doc View Source SliderAttribute(String, Single, Single) Signifies the specified System.Single , System.Double or System.Int32 should be represented in the mod's options menu as a ModSliderOption . Declaration public SliderAttribute(string label, float min, float max) Parameters Type Name Description System.String label The label for the slider. If none is set, the name of the method will be used. System.Single min The minimum value of the slider. System.Single max The maximum value of the slider. Properties | Improve this Doc View Source DefaultValue The default value of the slider. Declaration public float DefaultValue { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Format The format to use when displaying the value, e.g. \"{0:F2}\" or \"{0:F0} %\" Declaration public string Format { get; set; } Property Value Type Description System.String | Improve this Doc View Source Max The maximum value of the slider. Declaration public float Max { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Min The minimum value of the slider. Declaration public float Min { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Step The step to apply to the slider (ie. round to nearest) Declaration public float Step { get; set; } Property Value Type Description System.Single Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also MenuAttribute ConfigFile"
  },
  "api/SMLHelper.Options.Attributes.ToggleAttribute.html": {
    "href": "api/SMLHelper.Options.Attributes.ToggleAttribute.html",
    "title": "Class ToggleAttribute",
    "keywords": "Class ToggleAttribute Attribute used to signify the decorated System.Boolean should be represented in the mod's option menu as a ModToggleOption . Inheritance System.Object System.Attribute ModOptionAttribute ToggleAttribute Implements System.Runtime.InteropServices._Attribute Inherited Members ModOptionAttribute.Label ModOptionAttribute.Id ModOptionAttribute.Order ModOptionAttribute.Tooltip ModOptionAttribute.LabelLanguageId ModOptionAttribute.TooltipLanguageId System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options.Attributes Assembly : SMLHelper.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false)] public sealed class ToggleAttribute : ModOptionAttribute, _Attribute Examples using SMLHelper.Json; using SMLHelper.Options; [Menu(\"My Options Menu\")] public class Config : ConfigFile { [Toggle(\"My Toggle\")] public bool MyToggle; } Constructors | Improve this Doc View Source ToggleAttribute() Signifies the decorated System.Boolean should be represented in the mod's option menu as a ModToggleOption . Declaration public ToggleAttribute() | Improve this Doc View Source ToggleAttribute(String) Signifies the decorated System.Boolean should be represented in the mod's option menu as a ModToggleOption . Declaration public ToggleAttribute(string label = null) Parameters Type Name Description System.String label The label for the toggle. Implements System.Runtime.InteropServices._Attribute Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[]) See Also MenuAttribute ConfigFile"
  },
  "api/SMLHelper.Options.ButtonClickedEventArgs.html": {
    "href": "api/SMLHelper.Options.ButtonClickedEventArgs.html",
    "title": "Class ButtonClickedEventArgs",
    "keywords": "Class ButtonClickedEventArgs Contains all the information about a button click event. Inheritance System.Object System.EventArgs OptionEventArgs ButtonClickedEventArgs Inherited Members OptionEventArgs.Id System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class ButtonClickedEventArgs : OptionEventArgs Constructors | Improve this Doc View Source ButtonClickedEventArgs(String) Constructs a new ButtonClickedEventArgs . Declaration public ButtonClickedEventArgs(string id) Parameters Type Name Description System.String id The ID of the ModButtonOption that was clicked. Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ChoiceChangedEventArgs-1.html": {
    "href": "api/SMLHelper.Options.ChoiceChangedEventArgs-1.html",
    "title": "Class ChoiceChangedEventArgs<T>",
    "keywords": "Class ChoiceChangedEventArgs<T> Contains all the information about a choice changed event. Inheritance System.Object System.EventArgs OptionEventArgs ConfigOptionEventArgs <T> ChoiceChangedEventArgs<T> Inherited Members ConfigOptionEventArgs<T>.Value OptionEventArgs.Id System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class ChoiceChangedEventArgs<T> : ConfigOptionEventArgs<T> Type Parameters Name Description T Constructors | Improve this Doc View Source ChoiceChangedEventArgs(String, Int32, T) Constructs a new ChoiceChangedEventArgs<T> . Declaration public ChoiceChangedEventArgs(string id, int index, T value) Parameters Type Name Description System.String id The ID of the ModChoiceOption<T> that was changed. System.Int32 index The new index for the ModChoiceOption<T> . T value The value of the ModChoiceOption<T> as a string. Properties | Improve this Doc View Source Index The new index for the ModChoiceOption<T> . Declaration public int Index { get; } Property Value Type Description System.Int32 Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ColorChangedEventArgs.html": {
    "href": "api/SMLHelper.Options.ColorChangedEventArgs.html",
    "title": "Class ColorChangedEventArgs",
    "keywords": "Class ColorChangedEventArgs Contains all the information about a color changed event. Inheritance System.Object System.EventArgs OptionEventArgs ConfigOptionEventArgs < Color > ColorChangedEventArgs Inherited Members ConfigOptionEventArgs<Color>.Value OptionEventArgs.Id System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class ColorChangedEventArgs : ConfigOptionEventArgs<Color> Constructors | Improve this Doc View Source ColorChangedEventArgs(String, Color) Constructs a new ToggleChangedEventArgs . Declaration public ColorChangedEventArgs(string id, Color value) Parameters Type Name Description System.String id The ID of the ModColorOption that was changed. Color value The new value for the ModColorOption . Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ConfigEntryExtensions.html": {
    "href": "api/SMLHelper.Options.ConfigEntryExtensions.html",
    "title": "Class ConfigEntryExtensions",
    "keywords": "Class ConfigEntryExtensions Inheritance System.Object ConfigEntryExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public static class ConfigEntryExtensions Methods | Improve this Doc View Source ToModChoiceOption<T>(ConfigEntry<T>, T[]) Converts a ConfigEntry into a ModChoiceOption that will update the value when the choice changes. Declaration public static ModChoiceOption<T> ToModChoiceOption<T>(this ConfigEntry<T> configEntry, T[] options = null) where T : IEquatable<T> Parameters Type Name Description ConfigEntry <T> configEntry A T[] options Returns Type Description ModChoiceOption <T> ModKeybindOption Type Parameters Name Description T | Improve this Doc View Source ToModChoiceOption<T>(ConfigEntry<T>, IEnumerable<T>) Converts an Enum ConfigEntry into a ModChoiceOption that will update the value when the choice changes. Declaration public static ModChoiceOption<T> ToModChoiceOption<T>(this ConfigEntry<T> configEntry, IEnumerable<T> options = null) where T : Enum Parameters Type Name Description ConfigEntry <T> configEntry A System.Collections.Generic.IEnumerable <T> options Array of valid options if not using the whole Enum Returns Type Description ModChoiceOption <T> ModKeybindOption Type Parameters Name Description T | Improve this Doc View Source ToModKeybindOption(ConfigEntry<KeyCode>) Converts a Bepinex ConfigEntry/ into a ModKeyBindOption that will update the value when the keybind changes. Declaration public static ModKeybindOption ToModKeybindOption(this ConfigEntry<KeyCode> configEntry) Parameters Type Name Description ConfigEntry < KeyCode > configEntry A Returns Type Description ModKeybindOption ModKeybindOption | Improve this Doc View Source ToModSliderOption(ConfigEntry<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Converts a Bepinex ConfigEntry/ into a ModSliderOption that will update the value when the slider changes. Declaration public static ModSliderOption ToModSliderOption(this ConfigEntry<int> configEntry, int? minValue = default(int? ), int? maxValue = default(int? ), int step = 1) Parameters Type Name Description ConfigEntry < System.Int32 > configEntry A System.Nullable < System.Int32 > minValue Sets the lowest allowed value of the slider. default: 0 System.Nullable < System.Int32 > maxValue Sets the highest allowed value of the slider. default: 100 System.Int32 step The snapping value of the slider. Minimum value: 1, Default value: 1 Returns Type Description ModSliderOption ModSliderOption | Improve this Doc View Source ToModSliderOption(ConfigEntry<Single>, Nullable<Single>, Nullable<Single>, Single, String) Converts a Bepinex ConfigEntry/ into a ModSliderOption that will update the value when the slider changes. Declaration public static ModSliderOption ToModSliderOption(this ConfigEntry<float> configEntry, float? minValue = default(float? ), float? maxValue = default(float? ), float step = 0.01F, string floatFormat = \"{0:F2}\") Parameters Type Name Description ConfigEntry < System.Single > configEntry A System.Nullable < System.Single > minValue Sets the lowest allowed value of the slider. default: 0f System.Nullable < System.Single > maxValue Sets the highest allowed value of the slider. default: 1f System.Single step The snapping value of the slider. Minimum value: 0.0001f, Default 0.01f System.String floatFormat The formatting string used on the float value. Default value: \"{0:F2}\" shows 2 decimals Returns Type Description ModSliderOption ModSliderOption | Improve this Doc View Source ToModSliderOptions(ConfigEntry<Color>, Boolean) Converts a Bepinex ConfigEntry/ into 4 ModSliderOption that will update the value when the slider changes. Declaration public static ModColorOption ToModSliderOptions(this ConfigEntry<Color> configEntry, bool basic = false) Parameters Type Name Description ConfigEntry < Color > configEntry A bepinex config entry System.Boolean basic Whether to use the basic or advanced color picker Returns Type Description ModColorOption ModSliderOption | Improve this Doc View Source ToModSliderOptions(ConfigEntry<Vector2>, Single, Single, Single, String) Converts a Bepinex ConfigEntry/ into 2 ModSliderOption that will update the value when the slider changes. Declaration public static List<ModSliderOption> ToModSliderOptions(this ConfigEntry<Vector2> configEntry, float minValue, float maxValue, float step, string floatFormat = \"{0:F2}\") Parameters Type Name Description ConfigEntry < Vector2 > configEntry A System.Single minValue Sets the lowest allowed value of the slider. default: 0f System.Single maxValue Sets the highest allowed value of the slider. default: 1f System.Single step The snapping value of the slider. Minimum value: 0.01f System.String floatFormat The formatting string used on the float value. Default value: \"{0:F2}\" shows 2 decimals Returns Type Description System.Collections.Generic.List < ModSliderOption > ModSliderOption | Improve this Doc View Source ToModSliderOptions(ConfigEntry<Vector3>, Single, Single, Single, String) Converts a Bepinex ConfigEntry/ into 3 ModSliderOption that will update the value when the slider changes. Declaration public static List<ModSliderOption> ToModSliderOptions(this ConfigEntry<Vector3> configEntry, float minValue, float maxValue, float step, string floatFormat = \"{0:F2}\") Parameters Type Name Description ConfigEntry < Vector3 > configEntry A System.Single minValue Sets the lowest allowed value of the slider. default: 0f System.Single maxValue Sets the highest allowed value of the slider. default: 1f System.Single step The snapping value of the slider. Minimum value: 0.01f System.String floatFormat The formatting string used on the float value. Default value: \"{0:F2}\" shows 2 decimals Returns Type Description System.Collections.Generic.List < ModSliderOption > ModSliderOption | Improve this Doc View Source ToModSliderOptions(ConfigEntry<Vector4>, Single, Single, Single, String) Converts a Bepinex ConfigEntry/ into 4 ModSliderOption that will update the value when the slider changes. Declaration public static List<ModSliderOption> ToModSliderOptions(this ConfigEntry<Vector4> configEntry, float minValue, float maxValue, float step, string floatFormat = \"{0:F2}\") Parameters Type Name Description ConfigEntry < Vector4 > configEntry A System.Single minValue Sets the lowest allowed value of the slider. default: 0f System.Single maxValue Sets the highest allowed value of the slider. default: 1f System.Single step The snapping value of the slider. Minimum value: 0.01f System.String floatFormat The formatting string used on the float value. Default value: \"{0:F2}\" shows 2 decimals Returns Type Description System.Collections.Generic.List < ModSliderOption > ModSliderOption | Improve this Doc View Source ToModToggleOption(ConfigEntry<Boolean>) Converts a Bepinex ConfigEntry/ into a ModSliderOption that will update the value when the slider changes. Declaration public static ModToggleOption ToModToggleOption(this ConfigEntry<bool> configEntry) Parameters Type Name Description ConfigEntry < System.Boolean > configEntry A Returns Type Description ModToggleOption ModToggleOption"
  },
  "api/SMLHelper.Options.ConfigOptionEventArgs-1.html": {
    "href": "api/SMLHelper.Options.ConfigOptionEventArgs-1.html",
    "title": "Class ConfigOptionEventArgs<T>",
    "keywords": "Class ConfigOptionEventArgs<T> Interface for event arguments for a OptionItem . Inheritance System.Object System.EventArgs OptionEventArgs ConfigOptionEventArgs<T> ChoiceChangedEventArgs<T> ColorChangedEventArgs GameObjectCreatedEventArgs KeybindChangedEventArgs SliderChangedEventArgs ToggleChangedEventArgs Inherited Members OptionEventArgs.Id System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public abstract class ConfigOptionEventArgs<T> : OptionEventArgs Type Parameters Name Description T Constructors | Improve this Doc View Source ConfigOptionEventArgs(String, T) Instantiates a new ConfigOptionEventArgs<T> for handling an event from a OptionItem . Declaration public ConfigOptionEventArgs(string id, T value) Parameters Type Name Description System.String id The internal ID of the option. T value The new value of the option. Properties | Improve this Doc View Source Value The typed Value of the OptionItem this event corresponds to. Declaration public T Value { get; } Property Value Type Description T Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.GameObjectCreatedEventArgs.html": {
    "href": "api/SMLHelper.Options.GameObjectCreatedEventArgs.html",
    "title": "Class GameObjectCreatedEventArgs",
    "keywords": "Class GameObjectCreatedEventArgs Contains all the information about a created game object event Inheritance System.Object System.EventArgs OptionEventArgs ConfigOptionEventArgs < GameObject > GameObjectCreatedEventArgs Inherited Members ConfigOptionEventArgs<GameObject>.Value OptionEventArgs.Id System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class GameObjectCreatedEventArgs : ConfigOptionEventArgs<GameObject> Constructors | Improve this Doc View Source GameObjectCreatedEventArgs(String, GameObject) Constructs a new GameObjectCreatedEventArgs Declaration public GameObjectCreatedEventArgs(string id, GameObject gameObject) Parameters Type Name Description System.String id The ID of the OptionItem for which game object was created GameObject gameObject New game object for the OptionItem Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.html": {
    "href": "api/SMLHelper.Options.html",
    "title": "Namespace SMLHelper.Options",
    "keywords": "Namespace SMLHelper.Options Classes ButtonClickedEventArgs Contains all the information about a button click event. ChoiceChangedEventArgs<T> Contains all the information about a choice changed event. ColorChangedEventArgs Contains all the information about a color changed event. ConfigEntryExtensions ConfigOptionEventArgs<T> Interface for event arguments for a OptionItem . GameObjectCreatedEventArgs Contains all the information about a created game object event KeybindChangedEventArgs Contains all the information about a keybind changed event. ModButtonOption A mod option class for handling a button that can be clicked. ModChoiceOption<T> A mod option class for handling an option that can select one item from a list of values. ModColorOption A basic mod option class for handling an option that can be any . ModKeybindOption A mod option class for handling an option that is a keybind. ModOption<T, E> The common generic-typed abstract class to all mod options. ModOptions Abstract class that provides the framework for your mod's in-game configuration options. ModSliderOption A mod option class for handling an option that can have any floating point value between a minimum and maximum. ModSliderOption.SliderValue Component for customizing slider's value behaviour. If you need more complex behaviour than just custom value format then you can inherit this component and add it to \"Slider\" game object in OnGameObjectCreated event (see AddToPanel(uGUI_TabbedControlsPanel, Int32) for details on adding component) You can override value converters ConvertToDisplayValue(Single) and ConvertToSliderValue(Single) , in that case internal range for slider will be changed to [0.0f : 1.0f] and you can control displayed value with these converters (also this value will be passed to OnChange<T, E>(String, T) event) ModToggleOption A mod option class for handling an option that can be either ON or OFF. OptionEventArgs Interface for event arguments for a OptionItem . OptionItem The common abstract class to all items in the mod options page. OptionItem.ModOptionAdjust The base 'adjuster' component to prevent UI elements overlapping SliderChangedEventArgs Contains all the information about a slider changed event. ToggleChangedEventArgs Contains all the information about a toggle changed event."
  },
  "api/SMLHelper.Options.KeybindChangedEventArgs.html": {
    "href": "api/SMLHelper.Options.KeybindChangedEventArgs.html",
    "title": "Class KeybindChangedEventArgs",
    "keywords": "Class KeybindChangedEventArgs Contains all the information about a keybind changed event. Inheritance System.Object System.EventArgs OptionEventArgs ConfigOptionEventArgs < KeyCode > KeybindChangedEventArgs Inherited Members ConfigOptionEventArgs<KeyCode>.Value OptionEventArgs.Id System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class KeybindChangedEventArgs : ConfigOptionEventArgs<KeyCode> Constructors | Improve this Doc View Source KeybindChangedEventArgs(String, KeyCode) Constructs a new KeybindChangedEventArgs . Declaration public KeybindChangedEventArgs(string id, KeyCode key) Parameters Type Name Description System.String id The ID of the ModKeybindOption that was changed. KeyCode key The new value for the ModKeybindOption . Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ModButtonOption.html": {
    "href": "api/SMLHelper.Options.ModButtonOption.html",
    "title": "Class ModButtonOption",
    "keywords": "Class ModButtonOption A mod option class for handling a button that can be clicked. Inheritance System.Object OptionItem ModButtonOption Inherited Members OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class ModButtonOption : OptionItem Properties | Improve this Doc View Source AdjusterComponent The Adjuster for this OptionItem . Declaration public override Type AdjusterComponent { get; } Property Value Type Description System.Type Overrides OptionItem.AdjusterComponent Methods | Improve this Doc View Source AddToPanel(uGUI_TabbedControlsPanel, Int32) The base method for adding an object to the options panel Declaration public override void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters Type Name Description uGUI_TabbedControlsPanel panel The panel to add the option to. System.Int32 tabIndex Where in the panel to add the option. Overrides OptionItem.AddToPanel(uGUI_TabbedControlsPanel, Int32) | Improve this Doc View Source Create(String, String, Action<ButtonClickedEventArgs>) Creates a new ModButtonOption for handling a button that can be clicked. Declaration public static ModButtonOption Create(string id, string label, Action<ButtonClickedEventArgs> onPressed = null) Parameters Type Name Description System.String id The internal ID of this option. System.String label The display text to show on the in-game menus. System.Action < ButtonClickedEventArgs > onPressed Action to trigger when button is pressed. Can leave as Null and then add events using the OnPressed += method; Returns Type Description ModButtonOption | Improve this Doc View Source GetDelegates() Gets the Invocation List for the OnPressed event or returns null if none present. Declaration public IEnumerable<Action<ButtonClickedEventArgs>> GetDelegates() Returns Type Description System.Collections.Generic.IEnumerable < System.Action < ButtonClickedEventArgs >> Events | Improve this Doc View Source OnPressed The event that is called whenever an option is changed. Declaration public event Action<ButtonClickedEventArgs> OnPressed Event Type Type Description System.Action < ButtonClickedEventArgs > Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ModChoiceOption-1.html": {
    "href": "api/SMLHelper.Options.ModChoiceOption-1.html",
    "title": "Class ModChoiceOption<T>",
    "keywords": "Class ModChoiceOption<T> A mod option class for handling an option that can select one item from a list of values. Inheritance System.Object OptionItem ModOption <T, ChoiceChangedEventArgs <T>> ModChoiceOption<T> Inherited Members ModOption<T, ChoiceChangedEventArgs<T>>.Value ModOption<T, ChoiceChangedEventArgs<T>>.OnChanged ModOption<T, ChoiceChangedEventArgs<T>>.GetDelegates() ModOption<T, ChoiceChangedEventArgs<T>>.OnChange(String, T) OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class ModChoiceOption<T> : ModOption<T, ChoiceChangedEventArgs<T>> Type Parameters Name Description T Properties | Improve this Doc View Source AdjusterComponent The Adjuster for this OptionItem . Declaration public override Type AdjusterComponent { get; } Property Value Type Description System.Type Overrides OptionItem.AdjusterComponent | Improve this Doc View Source Choice The actual when the menu is open. Declaration public uGUI_Choice Choice { get; } Property Value Type Description uGUI_Choice | Improve this Doc View Source Index The currently selected index among the options array. Declaration public int Index { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Options The array of readable string options to choose between in the ModChoiceOption<T> . Declaration public T[] Options { get; } Property Value Type Description T[] | Improve this Doc View Source Tooltip The tooltip to show when hovering over the option. Declaration public string Tooltip { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AddToPanel(uGUI_TabbedControlsPanel, Int32) The base method for adding an object to the options panel Declaration public override void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters Type Name Description uGUI_TabbedControlsPanel panel The panel to add the option to. System.Int32 tabIndex Where in the panel to add the option. Overrides OptionItem.AddToPanel(uGUI_TabbedControlsPanel, Int32) | Improve this Doc View Source Create(String, String, T[], T, String) Adds a new ModChoiceOption<T> to this instance. Declaration public static ModChoiceOption<T> Create(string id, string label, T[] options, T value, string tooltip = null) Parameters Type Name Description System.String id The internal ID for the choice option. System.String label The display text to use in the in-game menu. T[] options The collection of available values. T value The starting value. System.String tooltip The tooltip to show when hovering over the option. Returns Type Description ModChoiceOption <T> | Improve this Doc View Source Create(String, String, T[], Int32, String) Adds a new ModChoiceOption<T> to this instance. Declaration public static ModChoiceOption<T> Create(string id, string label, T[] options, int index, string tooltip = null) Parameters Type Name Description System.String id The internal ID for the choice option. System.String label The display text to use in the in-game menu. T[] options The collection of available values. System.Int32 index The starting value. System.String tooltip The tooltip to show when hovering over the option. Returns Type Description ModChoiceOption <T> Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ModColorOption.html": {
    "href": "api/SMLHelper.Options.ModColorOption.html",
    "title": "Class ModColorOption",
    "keywords": "Class ModColorOption A basic mod option class for handling an option that can be any . Inheritance System.Object OptionItem ModOption < Color , ColorChangedEventArgs > ModColorOption Inherited Members ModOption<Color, ColorChangedEventArgs>.Value ModOption<Color, ColorChangedEventArgs>.OnChanged ModOption<Color, ColorChangedEventArgs>.GetDelegates() ModOption<Color, ColorChangedEventArgs>.OnChange(String, Color) OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class ModColorOption : ModOption<Color, ColorChangedEventArgs> Properties | Improve this Doc View Source AdjusterComponent The Adjuster for this OptionItem . Declaration public override Type AdjusterComponent { get; } Property Value Type Description System.Type Overrides OptionItem.AdjusterComponent | Improve this Doc View Source Advanced Whether to use an advanced UI Declaration public bool Advanced { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source AddToPanel(uGUI_TabbedControlsPanel, Int32) The base method for adding an object to the options panel Declaration public override void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters Type Name Description uGUI_TabbedControlsPanel panel The panel to add the option to. System.Int32 tabIndex Where in the panel to add the option. Overrides OptionItem.AddToPanel(uGUI_TabbedControlsPanel, Int32) | Improve this Doc View Source Create(String, String) Creates a new ModColorOption instance. Declaration public static ModColorOption Create(string id, string label) Parameters Type Name Description System.String id The internal ID for the Color option. System.String label The display text to use in the in-game menu. Returns Type Description ModColorOption | Improve this Doc View Source Create(String, String, Color, Boolean) Creates a new ModColorOption instance. Declaration public static ModColorOption Create(string id, string label, Color value, bool advanced = false) Parameters Type Name Description System.String id The internal ID for the Color option. System.String label The display text to use in the in-game menu. Color value The starting value. System.Boolean advanced Whether to use an advanced display. Returns Type Description ModColorOption Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ModKeybindOption.html": {
    "href": "api/SMLHelper.Options.ModKeybindOption.html",
    "title": "Class ModKeybindOption",
    "keywords": "Class ModKeybindOption A mod option class for handling an option that is a keybind. Inheritance System.Object OptionItem ModOption < KeyCode , KeybindChangedEventArgs > ModKeybindOption Inherited Members ModOption<KeyCode, KeybindChangedEventArgs>.Value ModOption<KeyCode, KeybindChangedEventArgs>.OnChanged ModOption<KeyCode, KeybindChangedEventArgs>.GetDelegates() ModOption<KeyCode, KeybindChangedEventArgs>.OnChange(String, KeyCode) OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class ModKeybindOption : ModOption<KeyCode, KeybindChangedEventArgs> Properties | Improve this Doc View Source AdjusterComponent The Adjuster for this OptionItem . Declaration public override Type AdjusterComponent { get; } Property Value Type Description System.Type Overrides OptionItem.AdjusterComponent | Improve this Doc View Source Device The currently select input source device for the ModKeybindOption . Declaration public GameInput.Device Device { get; } Property Value Type Description GameInput.Device Methods | Improve this Doc View Source AddToPanel(uGUI_TabbedControlsPanel, Int32) The base method for adding an object to the options panel Declaration public override void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters Type Name Description uGUI_TabbedControlsPanel panel The panel to add the option to. System.Int32 tabIndex Where in the panel to add the option. Overrides OptionItem.AddToPanel(uGUI_TabbedControlsPanel, Int32) | Improve this Doc View Source Create(String, String, GameInput.Device, KeyCode) Creates a new ModKeybindOption for handling an option that is a keybind. Declaration public static ModKeybindOption Create(string id, string label, GameInput.Device device, KeyCode key) Parameters Type Name Description System.String id The internal ID for the toggle option. System.String label The display text to use in the in-game menu. GameInput.Device device The device name. KeyCode key The starting keybind value. Returns Type Description ModKeybindOption | Improve this Doc View Source Create(String, String, GameInput.Device, String) Creates a new ModKeybindOption for handling an option that is a keybind. Declaration public static ModKeybindOption Create(string id, string label, GameInput.Device device, string key) Parameters Type Name Description System.String id The internal ID for the toggle option. System.String label The display text to use in the in-game menu. GameInput.Device device The device name. System.String key The starting keybind value. Returns Type Description ModKeybindOption Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ModOption-2.html": {
    "href": "api/SMLHelper.Options.ModOption-2.html",
    "title": "Class ModOption<T, E>",
    "keywords": "Class ModOption<T, E> The common generic-typed abstract class to all mod options. Inheritance System.Object OptionItem ModOption<T, E> ModChoiceOption<T> ModColorOption ModKeybindOption ModSliderOption ModToggleOption Inherited Members OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions OptionItem.AddToPanel(uGUI_TabbedControlsPanel, Int32) OptionItem.AdjusterComponent System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public abstract class ModOption<T, E> : OptionItem where E : ConfigOptionEventArgs<T> Type Parameters Name Description T E Constructors | Improve this Doc View Source ModOption(String, String, T) Base constructor for all typed mod options. Declaration public ModOption(string label, string id, T value) Parameters Type Name Description System.String label The display text to show on the in-game menus. System.String id The internal ID if this option. T value The typed value of the OptionItem Properties | Improve this Doc View Source Value The value for the ModOption<T, E> . Declaration public T Value { get; set; } Property Value Type Description T Methods | Improve this Doc View Source GetDelegates() Gets the Invocation List for the OnChanged event or returns null if none present. Declaration public IEnumerable<EventHandler<E>> GetDelegates() Returns Type Description System.Collections.Generic.IEnumerable < System.EventHandler <E>> | Improve this Doc View Source OnChange(String, T) Notifies an option change to all subscribed event handlers. Declaration public void OnChange(string id, T value) Parameters Type Name Description System.String id T value Events | Improve this Doc View Source OnChanged The event that is called whenever an option is changed. Declaration public event EventHandler<E> OnChanged Event Type Type Description System.EventHandler <E> Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ModOptions.html": {
    "href": "api/SMLHelper.Options.ModOptions.html",
    "title": "Class ModOptions",
    "keywords": "Class ModOptions Abstract class that provides the framework for your mod's in-game configuration options. Inheritance System.Object ModOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public abstract class ModOptions Constructors | Improve this Doc View Source ModOptions(String) Creates a new instance of ModOptions . Declaration public ModOptions(string name) Parameters Type Name Description System.String name The name that will display above this section of options in the in-game menu. Fields | Improve this Doc View Source Name The name of this set of configuration options. Declaration public string Name Field Value Type Description System.String Properties | Improve this Doc View Source Options Obtains the OptionItem s that belong to this instance. Can be null. Declaration public IReadOnlyCollection<OptionItem> Options { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < OptionItem > Methods | Improve this Doc View Source AddItem(OptionItem) Attaches a OptionItem to the options menu. Declaration public bool AddItem(OptionItem option) Parameters Type Name Description OptionItem option The OptionItem to add to the options menu. Returns Type Description System.Boolean | Improve this Doc View Source BuildModOptions(uGUI_TabbedControlsPanel, Int32, IReadOnlyCollection<OptionItem>) Builds up the configuration the options. Declaration public virtual void BuildModOptions(uGUI_TabbedControlsPanel panel, int modsTabIndex, IReadOnlyCollection<OptionItem> options) Parameters Type Name Description uGUI_TabbedControlsPanel panel System.Int32 modsTabIndex System.Collections.Generic.IReadOnlyCollection < OptionItem > options | Improve this Doc View Source GetDelegates() Gets the Invocation List for the OnChanged event or returns null if none present. Declaration public List<EventHandler<OptionEventArgs>> GetDelegates() Returns Type Description System.Collections.Generic.List < System.EventHandler < OptionEventArgs >> | Improve this Doc View Source OnChange<T, E>(String, T) Notifies an option change to all subscribed event handlers. Declaration public void OnChange<T, E>(string id, T value) where E : ConfigOptionEventArgs<T> Parameters Type Name Description System.String id T value Type Parameters Name Description T E | Improve this Doc View Source RemoveItem(String) Attaches a OptionItem to the options menu. Declaration public bool RemoveItem(string id) Parameters Type Name Description System.String id The id of the OptionItem to remove from the options menu. Returns Type Description System.Boolean Events | Improve this Doc View Source GameObjectCreated The event that is called whenever a game object created for the option Declaration protected event EventHandler<GameObjectCreatedEventArgs> GameObjectCreated Event Type Type Description System.EventHandler < GameObjectCreatedEventArgs > | Improve this Doc View Source OnChanged The event that is called whenever an option is changed. Declaration public event EventHandler<OptionEventArgs> OnChanged Event Type Type Description System.EventHandler < OptionEventArgs > Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ModSliderOption.html": {
    "href": "api/SMLHelper.Options.ModSliderOption.html",
    "title": "Class ModSliderOption",
    "keywords": "Class ModSliderOption A mod option class for handling an option that can have any floating point value between a minimum and maximum. Inheritance System.Object OptionItem ModOption < System.Single , SliderChangedEventArgs > ModSliderOption Inherited Members ModOption<Single, SliderChangedEventArgs>.Value ModOption<Single, SliderChangedEventArgs>.OnChanged ModOption<Single, SliderChangedEventArgs>.GetDelegates() ModOption<Single, SliderChangedEventArgs>.OnChange(String, Single) OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class ModSliderOption : ModOption<float, SliderChangedEventArgs> Properties | Improve this Doc View Source AdjusterComponent The Adjuster for this OptionItem . Declaration public override Type AdjusterComponent { get; } Property Value Type Description System.Type Overrides OptionItem.AdjusterComponent | Improve this Doc View Source DefaultValue The default value of the ModSliderOption . Showed on the slider by small gray circle. Slider's handle will snap to the default value near it. Declaration public float DefaultValue { get; } Property Value Type Description System.Single | Improve this Doc View Source MaxValue The maximum value of the ModSliderOption . Declaration public float MaxValue { get; } Property Value Type Description System.Single | Improve this Doc View Source MinValue The minimum value of the ModSliderOption . Declaration public float MinValue { get; } Property Value Type Description System.Single | Improve this Doc View Source Step The step value of the ModSliderOption defaults to 1. Declaration public float Step { get; } Property Value Type Description System.Single | Improve this Doc View Source Tooltip The tooltip to show when hovering over the option. Declaration public string Tooltip { get; } Property Value Type Description System.String | Improve this Doc View Source ValueFormat Float Format for value field ( Create(String, String, Single, Single, Single, Nullable<Single>, String, Single, String) ) Declaration public string ValueFormat { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AddToPanel(uGUI_TabbedControlsPanel, Int32) The base method for adding an object to the options panel Declaration public override void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters Type Name Description uGUI_TabbedControlsPanel panel The panel to add the option to. System.Int32 tabIndex Where in the panel to add the option. Overrides OptionItem.AddToPanel(uGUI_TabbedControlsPanel, Int32) | Improve this Doc View Source Create(String, String, Single, Single, Single, Nullable<Single>, String, Single, String) Creates a new ModSliderOption to this instance. Declaration public static ModSliderOption Create(string id, string label, float minValue, float maxValue, float value, float? defaultValue = default(float? ), string valueFormat = \"{0:F0}\", float step = 1F, string tooltip = null) Parameters Type Name Description System.String id The internal ID for the slider option. System.String label The display text to use in the in-game menu. System.Single minValue The minimum value for the range. System.Single maxValue The maximum value for the range. System.Single value The starting value. System.Nullable < System.Single > defaultValue The default value for the slider. If this is null then 'value' used as default. uses value System.String valueFormat format for values when labelMode is set to , e.g. \"{0:F2}\" for 2 decimals or \"{0:F0} for no decimals %\" (more on this here ) System.Single step Step for the slider, ie. round to nearest X. defaults to 1 System.String tooltip The tooltip to show when hovering over the option. defaults to no tooltip. Returns Type Description ModSliderOption Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ModSliderOption.SliderValue.html": {
    "href": "api/SMLHelper.Options.ModSliderOption.SliderValue.html",
    "title": "Class ModSliderOption.SliderValue",
    "keywords": "Class ModSliderOption.SliderValue Component for customizing slider's value behaviour. If you need more complex behaviour than just custom value format then you can inherit this component and add it to \"Slider\" game object in OnGameObjectCreated event (see AddToPanel(uGUI_TabbedControlsPanel, Int32) for details on adding component) You can override value converters ConvertToDisplayValue(Single) and ConvertToSliderValue(Single) , in that case internal range for slider will be changed to [0.0f : 1.0f] and you can control displayed value with these converters (also this value will be passed to OnChange<T, E>(String, T) event) Inheritance System.Object ModSliderOption.SliderValue Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class SliderValue : MonoBehaviour Fields | Improve this Doc View Source label The value label of the ModSliderOption.SliderValue Declaration protected TextMeshProUGUI label Field Value Type Description TextMeshProUGUI | Improve this Doc View Source maxValue The maximum value of the ModSliderOption.SliderValue . In case of custom value converters it can be not equal to internal maximum value for slider Declaration protected float maxValue Field Value Type Description System.Single | Improve this Doc View Source minValue The minimum value of the ModSliderOption.SliderValue . In case of custom value converters it can be not equal to internal minimum value for slider Declaration protected float minValue Field Value Type Description System.Single | Improve this Doc View Source slider The slider controlling this ModSliderOption.SliderValue Declaration protected Slider slider Field Value Type Description Slider | Improve this Doc View Source valueFormat Custom value format Declaration protected string valueFormat Field Value Type Description System.String Properties | Improve this Doc View Source ValueFormat Custom value format property. Set it right after adding component to game object for proper behaviour Declaration public string ValueFormat { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueWidth Width for value text field. Used by SMLHelper.Options.ModSliderOption.SliderOptionAdjust to adjust label width. It is calculated in UpdateValueWidth() , but you can override this property. Declaration public virtual float ValueWidth { get; protected set; } Property Value Type Description System.Single Methods | Improve this Doc View Source Awake() Component initialization. If you overriding this, make sure that you calling base.Awake() Declaration protected virtual void Awake() | Improve this Doc View Source ConvertToDisplayValue(Single) Converts internal slider value [0.0f : 1.0f] to displayed value Declaration public virtual float ConvertToDisplayValue(float sliderValue) Parameters Type Name Description System.Single sliderValue Returns Type Description System.Single | Improve this Doc View Source ConvertToSliderValue(Single) Converts displayed value to internal slider value [0.0f : 1.0f] Declaration public virtual float ConvertToSliderValue(float displayValue) Parameters Type Name Description System.Single displayValue Returns Type Description System.Single | Improve this Doc View Source InitConverters() Override this if you need to initialize custom value converters Declaration protected virtual void InitConverters() | Improve this Doc View Source OnValueChanged(Single) Called when user changes slider value Declaration protected virtual void OnValueChanged(float value) Parameters Type Name Description System.Single value | Improve this Doc View Source Start() .Start() Declaration protected virtual IEnumerator Start() Returns Type Description System.Collections.IEnumerator | Improve this Doc View Source UpdateLabel() Updates label's text with formatted and converted slider's value. Override this if you need even more control on slider's value behaviour. Declaration protected virtual void UpdateLabel() | Improve this Doc View Source UpdateValueWidth() Method for calculating necessary label's width. Creates temporary label and compares widths of min and max values, then sets ValueWidth to the wider. Be aware that in case of using custom converters some intermediate value may be wider than min/max values. Declaration protected virtual IEnumerator UpdateValueWidth() Returns Type Description System.Collections.IEnumerator Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ModToggleOption.html": {
    "href": "api/SMLHelper.Options.ModToggleOption.html",
    "title": "Class ModToggleOption",
    "keywords": "Class ModToggleOption A mod option class for handling an option that can be either ON or OFF. Inheritance System.Object OptionItem ModOption < System.Boolean , ToggleChangedEventArgs > ModToggleOption Inherited Members ModOption<Boolean, ToggleChangedEventArgs>.Value ModOption<Boolean, ToggleChangedEventArgs>.OnChanged ModOption<Boolean, ToggleChangedEventArgs>.GetDelegates() ModOption<Boolean, ToggleChangedEventArgs>.OnChange(String, Boolean) OptionItem.Id OptionItem.Label OptionItem.OptionGameObject OptionItem.parentOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class ModToggleOption : ModOption<bool, ToggleChangedEventArgs> Properties | Improve this Doc View Source AdjusterComponent The Adjuster for this OptionItem . Declaration public override Type AdjusterComponent { get; } Property Value Type Description System.Type Overrides OptionItem.AdjusterComponent | Improve this Doc View Source Tooltip The tooltip to show when hovering over the option. Declaration public string Tooltip { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AddToPanel(uGUI_TabbedControlsPanel, Int32) The base method for adding an object to the options panel Declaration public override void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters Type Name Description uGUI_TabbedControlsPanel panel The panel to add the option to. System.Int32 tabIndex Where in the panel to add the option. Overrides OptionItem.AddToPanel(uGUI_TabbedControlsPanel, Int32) | Improve this Doc View Source Create(String, String, Boolean, String) Adds a new ModToggleOption to this instance. Declaration public static ModToggleOption Create(string id, string label, bool value, string tooltip = null) Parameters Type Name Description System.String id The internal ID for the toggle option. System.String label The display text to use in the in-game menu. System.Boolean value The starting value. System.String tooltip The tooltip to show when hovering over the option. defaults to no tooltip. Returns Type Description ModToggleOption Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.OptionEventArgs.html": {
    "href": "api/SMLHelper.Options.OptionEventArgs.html",
    "title": "Class OptionEventArgs",
    "keywords": "Class OptionEventArgs Interface for event arguments for a OptionItem . Inheritance System.Object System.EventArgs OptionEventArgs ButtonClickedEventArgs ConfigOptionEventArgs<T> Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public abstract class OptionEventArgs : EventArgs Constructors | Improve this Doc View Source OptionEventArgs(String) Instantiates a new OptionEventArgs for handling an event from a OptionItem . Declaration public OptionEventArgs(string id) Parameters Type Name Description System.String id The internal ID of the item. Properties | Improve this Doc View Source Id The ID of the OptionItem this event corresponds to. Declaration public string Id { get; } Property Value Type Description System.String Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.OptionItem.html": {
    "href": "api/SMLHelper.Options.OptionItem.html",
    "title": "Class OptionItem",
    "keywords": "Class OptionItem The common abstract class to all items in the mod options page. Inheritance System.Object OptionItem ModButtonOption ModOption<T, E> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public abstract class OptionItem Constructors | Improve this Doc View Source OptionItem(String, String) Base constructor for all items in the options. Declaration public OptionItem(string label, string id) Parameters Type Name Description System.String label The display text to show on the in-game menus. System.String id The internal ID if this option. Fields | Improve this Doc View Source parentOptions Parent ModOptions for this option Declaration protected ModOptions parentOptions Field Value Type Description ModOptions Properties | Improve this Doc View Source AdjusterComponent The Adjuster for this OptionItem . Declaration public abstract Type AdjusterComponent { get; } Property Value Type Description System.Type | Improve this Doc View Source Id The internal ID that identifies this option. Declaration public string Id { get; } Property Value Type Description System.String | Improve this Doc View Source Label The display text to be shown for this option in the in-game menus. Declaration public string Label { get; } Property Value Type Description System.String | Improve this Doc View Source OptionGameObject UI GameObject for this option Declaration public GameObject OptionGameObject { get; protected set; } Property Value Type Description GameObject Methods | Improve this Doc View Source AddToPanel(uGUI_TabbedControlsPanel, Int32) The base method for adding an object to the options panel Declaration public virtual void AddToPanel(uGUI_TabbedControlsPanel panel, int tabIndex) Parameters Type Name Description uGUI_TabbedControlsPanel panel The panel to add the option to. System.Int32 tabIndex Where in the panel to add the option. Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.OptionItem.ModOptionAdjust.html": {
    "href": "api/SMLHelper.Options.OptionItem.ModOptionAdjust.html",
    "title": "Class OptionItem.ModOptionAdjust",
    "keywords": "Class OptionItem.ModOptionAdjust The base 'adjuster' component to prevent UI elements overlapping Inheritance System.Object OptionItem.ModOptionAdjust Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public abstract class ModOptionAdjust : MonoBehaviour Properties | Improve this Doc View Source CaptionWidth The width of the caption for the component Declaration protected float CaptionWidth { get; } Property Value Type Description System.Single | Improve this Doc View Source isMainMenu Whether we are in the main menu or in game in the options Declaration protected bool isMainMenu { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Awake() The function called after this is awakened. Declaration public void Awake() | Improve this Doc View Source SetCaptionGameObject(String, Single) Creates and adds a caption to this GameObject Declaration protected void SetCaptionGameObject(string gameObjectPath, float minWidth = 0F) Parameters Type Name Description System.String gameObjectPath System.Single minWidth | Improve this Doc View Source SetVec2x(Vector2, Single) Sets the X coordinate of a . Declaration protected static Vector2 SetVec2x(Vector2 vec, float val) Parameters Type Name Description Vector2 vec The to set the value on. System.Single val The value to set to the x coordinate. Returns Type Description Vector2 Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.SliderChangedEventArgs.html": {
    "href": "api/SMLHelper.Options.SliderChangedEventArgs.html",
    "title": "Class SliderChangedEventArgs",
    "keywords": "Class SliderChangedEventArgs Contains all the information about a slider changed event. Inheritance System.Object System.EventArgs OptionEventArgs ConfigOptionEventArgs < System.Single > SliderChangedEventArgs Inherited Members ConfigOptionEventArgs<Single>.Value OptionEventArgs.Id System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class SliderChangedEventArgs : ConfigOptionEventArgs<float> Constructors | Improve this Doc View Source SliderChangedEventArgs(String, Single) Constructs a new SliderChangedEventArgs . Declaration public SliderChangedEventArgs(string id, float value) Parameters Type Name Description System.String id The ID of the ModSliderOption that was changed. System.Single value The new value for the ModSliderOption . Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Options.ToggleChangedEventArgs.html": {
    "href": "api/SMLHelper.Options.ToggleChangedEventArgs.html",
    "title": "Class ToggleChangedEventArgs",
    "keywords": "Class ToggleChangedEventArgs Contains all the information about a toggle changed event. Inheritance System.Object System.EventArgs OptionEventArgs ConfigOptionEventArgs < System.Boolean > ToggleChangedEventArgs Inherited Members ConfigOptionEventArgs<Boolean>.Value OptionEventArgs.Id System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Options Assembly : SMLHelper.dll Syntax public class ToggleChangedEventArgs : ConfigOptionEventArgs<bool> Constructors | Improve this Doc View Source ToggleChangedEventArgs(String, Boolean) Constructs a new ToggleChangedEventArgs . Declaration public ToggleChangedEventArgs(string id, bool value) Parameters Type Name Description System.String id The ID of the ModToggleOption that was changed. System.Boolean value The new value for the ModToggleOption . Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Patchers.html": {
    "href": "api/SMLHelper.Patchers.html",
    "title": "Namespace SMLHelper.Patchers",
    "keywords": "Namespace SMLHelper.Patchers Classes SelfCheckingDictionary<K, V> This dictionary strtucture automatically checks for duplicate keys as they are being added to the collection. Duplicate entires are logged and removed from the final collection."
  },
  "api/SMLHelper.Patchers.SelfCheckingDictionary-2.html": {
    "href": "api/SMLHelper.Patchers.SelfCheckingDictionary-2.html",
    "title": "Class SelfCheckingDictionary<K, V>",
    "keywords": "Class SelfCheckingDictionary<K, V> This dictionary strtucture automatically checks for duplicate keys as they are being added to the collection. Duplicate entires are logged and removed from the final collection. Inheritance System.Object SelfCheckingDictionary<K, V> Implements System.Collections.Generic.IDictionary <K, V> System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair <K, V>> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <K, V>> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Patchers Assembly : SMLHelper.dll Syntax public class SelfCheckingDictionary<K, V> : IDictionary<K, V>, ICollection<KeyValuePair<K, V>>, IEnumerable<KeyValuePair<K, V>>, IEnumerable Type Parameters Name Description K The Key Type V The Value Type Constructors | Improve this Doc View Source SelfCheckingDictionary(String, IEqualityComparer<K>, Func<K, String>) Creates a SelfCheckingDictionary<K, V> with an EqualityComparer and an optional ToString function. Declaration public SelfCheckingDictionary(string collectionName, IEqualityComparer<K> equalityComparer, Func<K, string> toLog = null) Parameters Type Name Description System.String collectionName System.Collections.Generic.IEqualityComparer <K> equalityComparer System.Func <K, System.String > toLog | Improve this Doc View Source SelfCheckingDictionary(String, Func<K, String>) Creates a SelfCheckingDictionary<K, V> with an optional ToString function. Declaration public SelfCheckingDictionary(string collectionName, Func<K, string> toLog = null) Parameters Type Name Description System.String collectionName System.Func <K, System.String > toLog Properties | Improve this Doc View Source Count Gets the number of unique entries in the SelfCheckingDictionary<K, V> Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly Defaults to false. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[K] Gets a key value pair from the collection or sets a key value pair into the collection. When setting, if a key already exists, the previous entry will be discarded. Declaration public V this[K key] { get; set; } Parameters Type Name Description K key The unique key. Property Value Type Description V The value corresponding to the key. | Improve this Doc View Source Keys Gets a collection containing the keys in the SelfCheckingDictionary<K, V> Declaration public ICollection<K> Keys { get; } Property Value Type Description System.Collections.Generic.ICollection <K> | Improve this Doc View Source Values Gets a collection containing the values in the SelfCheckingDictionary<K, V> Declaration public ICollection<V> Values { get; } Property Value Type Description System.Collections.Generic.ICollection <V> Methods | Improve this Doc View Source Add(K, V) Add a new entry the collection. If a duplicate key is found, the new value will be discarded. Declaration public void Add(K key, V value) Parameters Type Name Description K key The unique key. V value The value. | Improve this Doc View Source Add(KeyValuePair<K, V>) Add a new entry the collection. If a duplicate key is found, the new value will be discarded. Declaration public void Add(KeyValuePair<K, V> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair <K, V> item The key value pair. | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(KeyValuePair<K, V>) Declaration public bool Contains(KeyValuePair<K, V> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair <K, V> item Returns Type Description System.Boolean | Improve this Doc View Source ContainsKey(K) Declaration public bool ContainsKey(K key) Parameters Type Name Description K key Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(KeyValuePair<K, V>[], Int32) Declaration public void CopyTo(KeyValuePair<K, V>[] array, int arrayIndex) Parameters Type Name Description System.Collections.Generic.KeyValuePair <K, V>[] array System.Int32 arrayIndex | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<KeyValuePair<K, V>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair <K, V>> | Improve this Doc View Source Remove(K) Declaration public bool Remove(K key) Parameters Type Name Description K key Returns Type Description System.Boolean | Improve this Doc View Source Remove(KeyValuePair<K, V>) Declaration public bool Remove(KeyValuePair<K, V> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair <K, V> item Returns Type Description System.Boolean | Improve this Doc View Source TryGetValue(K, out V) Declaration public bool TryGetValue(K key, out V value) Parameters Type Name Description K key V value Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Utility.AudioUtils.BusPaths.html": {
    "href": "api/SMLHelper.Utility.AudioUtils.BusPaths.html",
    "title": "Class AudioUtils.BusPaths",
    "keywords": "Class AudioUtils.BusPaths A list of the relevant FMOD bus paths the game uses. Inheritance System.Object AudioUtils.BusPaths Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class BusPaths Fields | Improve this Doc View Source EnvironmentalMusic Used for environmental music. Tied to the music volume. Declaration public const string EnvironmentalMusic = \"bus:/master/SFX_for_pause/nofilter/music/mutable music\" Field Value Type Description System.String | Improve this Doc View Source Music Used for main music. Tied to the music volume. Declaration public const string Music = \"bus:/master/SFX_for_pause/nofilter/music\" Field Value Type Description System.String | Improve this Doc View Source PDAVoice Used for PDA voices. Tied to the voice volume. Declaration public const string PDAVoice = \"bus:/master/SFX_for_pause/PDA_pause/all/all voice/AI voice\" Field Value Type Description System.String | Improve this Doc View Source PlayerSFXs Used for player and hand-held tools SFXs. Tied to the master volume. Declaration public const string PlayerSFXs = \"bus:/master/SFX_for_pause/PDA_pause/all/SFX/reverbsend\" Field Value Type Description System.String | Improve this Doc View Source SurfaceAmbient Used for ambience SFXs that dont get muted when at the surface of the ocean. Tied to the ambient volume. Declaration public const string SurfaceAmbient = \"bus:/master/SFX_for_pause/PDA_pause/all/SFX/backgrounds/surface\" Field Value Type Description System.String | Improve this Doc View Source SurfaceCreatures Used for surface creature SFXs that dont get muted when at the surface of the ocean. Tied to the master volume. Declaration public const string SurfaceCreatures = \"bus:/master/SFX_for_pause/PDA_pause/all/SFX/creatures surface\" Field Value Type Description System.String | Improve this Doc View Source UnderwaterAmbient Used for underwater ambience SFXs. Tied to the ambient volume. Declaration public const string UnderwaterAmbient = \"bus:/master/SFX_for_pause/PDA_pause/all/SFX/backgrounds\" Field Value Type Description System.String | Improve this Doc View Source UnderwaterCreatures Used for underwater creature SFXs. Tied to the master volume. Declaration public const string UnderwaterCreatures = \"bus:/master/SFX_for_pause/PDA_pause/all/SFX/creatures\" Field Value Type Description System.String | Improve this Doc View Source VoiceOvers Used for encyclopedia VOs. Tied to the voice volume. Declaration public const string VoiceOvers = \"bus:/master/SFX_for_pause/PDA_pause/all/all voice/VOs\" Field Value Type Description System.String"
  },
  "api/SMLHelper.Utility.AudioUtils.html": {
    "href": "api/SMLHelper.Utility.AudioUtils.html",
    "title": "Class AudioUtils",
    "keywords": "Class AudioUtils Utilities for audio and sound Inheritance System.Object AudioUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class AudioUtils Methods | Improve this Doc View Source CreateSound(AudioClip, MODE) Creates a instance from an . Can be stored and later used with TryPlaySound(Sound, Bus, out Channel) Declaration public static Sound CreateSound(AudioClip audio, MODE mode = null) Parameters Type Name Description AudioClip audio the AudioClip to make a Sound instance of. MODE mode Returns Type Description Sound The instance. | Improve this Doc View Source CreateSound(String, MODE) Creates a instance from a path. Can be stored and later used with TryPlaySound(Sound, Bus, out Channel) Declaration public static Sound CreateSound(string path, MODE mode = null) Parameters Type Name Description System.String path The path of the sound. Relative to the base game folder. MODE mode Returns Type Description Sound The instance | Improve this Doc View Source CreateSounds(IEnumerable<AudioClip>, MODE) Creates an FMOD collection from an collection. Declaration public static IEnumerable<Sound> CreateSounds(IEnumerable<AudioClip> clips, MODE mode = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < AudioClip > clips AudioClips to create from. MODE mode The mode to set the sound to Returns Type Description System.Collections.Generic.IEnumerable < Sound > A collection of FMOD Sounds. | Improve this Doc View Source CreateSounds(IEnumerable<String>, MODE) Converts a sound paths collection to an FMOD collection. Declaration public static IEnumerable<Sound> CreateSounds(IEnumerable<string> soundPaths, MODE mode = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > soundPaths Sound paths to create from. Relative to the base game folder MODE mode The mode to set the sound to Returns Type Description System.Collections.Generic.IEnumerable < Sound > A collection of FMOD Sounds. | Improve this Doc View Source TryPlaySound(Sound, Bus, out Channel) Plays a on the specified . Declaration public static bool TryPlaySound(Sound sound, Bus bus, out Channel channel) Parameters Type Name Description Sound sound The sound which should be played. Bus bus The bus to play the sound on. Channel channel The channel on which the sound was created. Returns Type Description System.Boolean If the sound was reported as played. | Improve this Doc View Source TryPlaySound(Sound, String, out Channel) Plays a on the specified . Declaration public static bool TryPlaySound(Sound sound, string busPath, out Channel channel) Parameters Type Name Description Sound sound The sound which should be played. System.String busPath The path to the bus to play the sound on. Channel channel The channel on which the sound was created. Returns Type Description System.Boolean If the sound was reported as played."
  },
  "api/SMLHelper.Utility.BasicText.html": {
    "href": "api/SMLHelper.Utility.BasicText.html",
    "title": "Class BasicText",
    "keywords": "Class BasicText Places a simple text object on the screen and keeps it there until either hidden (or a designated fade-to-black timer has passed). By default uses the same font/size/color as the \"Press Any Button To Begin\" message at the beginning of the game, and appears centered about 1/3 down the screen, but all parameters can be reconfigured. The idea of the defaults is that new modders don't have to bootstrap a bunch of irritating Unity stuff -- don't have to understand what a \"Material\" is or how to make one, don't have to know to initialize a font, or even a color. Can just start adding text and then can always custom and configure on further revision. Inheritance System.Object BasicText Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public class BasicText Examples SIMPLE USAGE EXAMPLE: BasicText message = new BasicText(); message.ShowMessage(\"This Message Will Fade In 10 Seconds\", 10); COMPLEX USAGE EXAMPLE: BasicText message = new BasicText(TextAnchor.UpperLeft); // Note many other properties could also be set as constructor parameters message.setColor(Color.red); // Set Color message.setSize(20); // Set Font Size message.setLoc(200, 400); // Set x/y position (0,0 is center of screen) message.setFontStyle(FontStyle.Bold); // Bold message.ShowMessage(\"This message stays on screen until hidden\"); // Display message; if fadeout seconds not specified, it just keeps showing ... // other things happen, time goes by message.Hide(); // Hides the message Constructors | Improve this Doc View Source BasicText() Creates a new instances of BasicText with all default options. Declaration public BasicText() | Improve this Doc View Source BasicText(Color) Creates a new instances of BasicText with a specified . Declaration public BasicText(Color useColor) Parameters Type Name Description Color useColor The text color to use | Improve this Doc View Source BasicText(Int32) Creates a new instances of BasicText with a specified size. Declaration public BasicText(int useSize) Parameters Type Name Description System.Int32 useSize The text size to uset | Improve this Doc View Source BasicText(Int32, Color) Creates a new instances of BasicText with a specified size and . Declaration public BasicText(int useSize, Color useColor) Parameters Type Name Description System.Int32 useSize The text size to use Color useColor The text color to use | Improve this Doc View Source BasicText(Int32, Color, TextAlignmentOptions) Creates a new instances of BasicText with a specified size, , and . Declaration public BasicText(int useSize, Color useColor, TextAlignmentOptions useAlign) Parameters Type Name Description System.Int32 useSize The text size to use Color useColor The text color to use TextAlignmentOptions useAlign The text anchor to align to | Improve this Doc View Source BasicText(Int32, Int32) Creates a new instances of BasicText at the specified origin point. Declaration public BasicText(int set_x, int set_y) Parameters Type Name Description System.Int32 set_x The x coordinate to set System.Int32 set_y The y coordinate to set | Improve this Doc View Source BasicText(Int32, Int32, Int32) Creates a new instances of BasicText with a specified origin point and size. Declaration public BasicText(int set_x, int set_y, int useSize) Parameters Type Name Description System.Int32 set_x The x coordinate to set System.Int32 set_y The y coordinate to set System.Int32 useSize The text size to use | Improve this Doc View Source BasicText(Int32, Int32, Int32, Color) Creates a new instances of BasicText with a specified origin point, size, and . Declaration public BasicText(int set_x, int set_y, int useSize, Color useColor) Parameters Type Name Description System.Int32 set_x The x coordinate to set System.Int32 set_y The y coordinate to set System.Int32 useSize The text size to use Color useColor The text color to use | Improve this Doc View Source BasicText(Int32, Int32, Int32, Color, TextAlignmentOptions) Creates a new instances of BasicText with a specified origin point, size, , and . Declaration public BasicText(int set_x, int set_y, int useSize, Color useColor, TextAlignmentOptions useAlign) Parameters Type Name Description System.Int32 set_x The x coordinate to set System.Int32 set_y The y coordinate to set System.Int32 useSize The text size to use Color useColor The text color to use TextAlignmentOptions useAlign The text anchor to align to | Improve this Doc View Source BasicText(Int32, TextAlignmentOptions) Creates a new instances of BasicText with a specified size and . Declaration public BasicText(int useSize, TextAlignmentOptions useAlign) Parameters Type Name Description System.Int32 useSize The text size to use TextAlignmentOptions useAlign The text anchor to align to | Improve this Doc View Source BasicText(TextAlignmentOptions) Creates a new instances of BasicText at a specified . Declaration public BasicText(TextAlignmentOptions useAlign) Parameters Type Name Description TextAlignmentOptions useAlign The text anchor to align to Methods | Improve this Doc View Source ClearAlign() Resets to using \"cloned\" font style of Subnautica default Declaration public void ClearAlign() | Improve this Doc View Source ClearColor() Resets to using \"cloned\" color of Subnautica default. Declaration public void ClearColor() | Improve this Doc View Source ClearFont() Resets to using \"cloned\" font of Subnautica default. Declaration public void ClearFont() | Improve this Doc View Source ClearFontStyle() Resets to using \"cloned\" font style of Subnautica default. Declaration public void ClearFontStyle() | Improve this Doc View Source ClearSize() Resets to using \"cloned\" size of Subnautica default. Declaration public void ClearSize() | Improve this Doc View Source GetText() Returns our current text. Declaration public string GetText() Returns Type Description System.String | Improve this Doc View Source Hide() Hides our text item if it is displaying. Declaration public void Hide() | Improve this Doc View Source SetAlign(TextAlignmentOptions) Sets the text anchor. Declaration public void SetAlign(TextAlignmentOptions useAlign) Parameters Type Name Description TextAlignmentOptions useAlign The text anchor to align to | Improve this Doc View Source SetColor(Color) Sets the text color Declaration public void SetColor(Color useColor) Parameters Type Name Description Color useColor The text color to use | Improve this Doc View Source SetFont(TMP_FontAsset) Sets the font Declaration public void SetFont(TMP_FontAsset useFont) Parameters Type Name Description TMP_FontAsset useFont The font to render the text as. | Improve this Doc View Source SetFontStyle(FontStyles) Sets the font style. Declaration public void SetFontStyle(FontStyles useStyle) Parameters Type Name Description FontStyles useStyle The text font style to use | Improve this Doc View Source SetLocation(Single, Single) Sets screen display location (position relative to the actual text is determined by the alignment) Declaration public void SetLocation(float set_x, float set_y) Parameters Type Name Description System.Single set_x The x coordinate to set System.Single set_y The y coordinate to set | Improve this Doc View Source SetSize(Int32) Sets the font size. Declaration public void SetSize(int useSize) Parameters Type Name Description System.Int32 useSize The text size to use | Improve this Doc View Source ShowMessage(String) Shows our text item, with no schedule fade (i.e. indefinitely) Declaration public void ShowMessage(string s) Parameters Type Name Description System.String s The text to display | Improve this Doc View Source ShowMessage(String, Single) Shows our text item, fading after a specified number of seconds (or stays on indefinitely if 0 seconds) Declaration public void ShowMessage(string s, float seconds) Parameters Type Name Description System.String s The text to display System.Single seconds The duration to hold before fading Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Utility.ConstructableFlags.html": {
    "href": "api/SMLHelper.Utility.ConstructableFlags.html",
    "title": "Enum ConstructableFlags",
    "keywords": "Enum ConstructableFlags Defines how a constructable can be placed. Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax [Flags] public enum ConstructableFlags Fields Name Description AllowedOnConstructable Allowed on constructed entities such as tables, desks, shelves, etc... Base Can be placed in bases. Ceiling Can be placed on ceilings. Ground Can be placed on floors. Inside Can be placed inside. Combines Base and Submarine . None Undefined placement. Outside Can be placed outside. Rotatable The constructable can be rotated during placement. Submarine Can be placed in Cyclops or any other submarine. Wall Can be placed on walls. Extension Methods EnumExtensions.IsDefinedByDefault<ConstructableFlags>()"
  },
  "api/SMLHelper.Utility.html": {
    "href": "api/SMLHelper.Utility.html",
    "title": "Namespace SMLHelper.Utility",
    "keywords": "Namespace SMLHelper.Utility Classes AudioUtils Utilities for audio and sound AudioUtils.BusPaths A list of the relevant FMOD bus paths the game uses. BasicText Places a simple text object on the screen and keeps it there until either hidden (or a designated fade-to-black timer has passed). By default uses the same font/size/color as the \"Press Any Button To Begin\" message at the beginning of the game, and appears centered about 1/3 down the screen, but all parameters can be reconfigured. The idea of the defaults is that new modders don't have to bootstrap a bunch of irritating Unity stuff -- don't have to understand what a \"Material\" is or how to make one, don't have to know to initialize a font, or even a color. Can just start adding text and then can always custom and configure on further revision. ImageUtils A collection of image loading utility methods that can create Unity objects from image files at runtime. IOUtilities Utilities for files and paths ItemStorageHelper A utility class that offers additional info about instances. JsonUtils A collection of utilities for interacting with JSON files. KeyCodeUtils A collection of related utility methods. MaterialUtils Utilities related to Materials and Shaders. MaterialUtils.Shaders Contains references to various shaders. PlayerPrefsExtra A collection of utility methods that simplify calls into for quick custom save data. PrefabUtils A small collection of prefab related utilities. ReflectionHelper An extension method class for simplifying reflection calls for improved readability. SaveUtils A small collection of save data related utilities. StorageHelperExtensions Extension methods to provide static calls for into ItemStorageHelper methods. Enums ConstructableFlags Defines how a constructable can be placed. MaterialUtils.MaterialType Enum for some generic types of Materials."
  },
  "api/SMLHelper.Utility.ImageUtils.html": {
    "href": "api/SMLHelper.Utility.ImageUtils.html",
    "title": "Class ImageUtils",
    "keywords": "Class ImageUtils A collection of image loading utility methods that can create Unity objects from image files at runtime. Inheritance System.Object ImageUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class ImageUtils Methods | Improve this Doc View Source LoadSpriteFromFile(String, TextureFormat) Creates a new from an image file. Declaration public static Atlas.Sprite LoadSpriteFromFile(string filePathToImage, TextureFormat format = null) Parameters Type Name Description System.String filePathToImage The path to the image file. TextureFormat format The texture format. By default, this uses . https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html Don't change this unless you really know what you're doing. Returns Type Description Atlas.Sprite Will return a new instance if the file exists; Otherwise returns null. | Improve this Doc View Source LoadSpriteFromTexture(Texture2D) Creates a new from an image file. Declaration public static Atlas.Sprite LoadSpriteFromTexture(Texture2D texture2D) Parameters Type Name Description Texture2D texture2D The 2D texture to convert into a sprite. Returns Type Description Atlas.Sprite Will return a new instance using the provided texture. | Improve this Doc View Source LoadTextureFromFile(String, TextureFormat) Creates a new from an image file. Declaration public static Texture2D LoadTextureFromFile(string filePathToImage, TextureFormat format = null) Parameters Type Name Description System.String filePathToImage The path to the image file. TextureFormat format The texture format. By default, this uses . https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html Don't change this unless you really know what you're doing. Returns Type Description Texture2D Will return a new instance if the file exists; Otherwise returns null. Remarks Ripped from: https://github.com/RandyKnapp/SubnauticaModSystem/blob/master/SubnauticaModSystem/Common/Utility/ImageUtils.cs"
  },
  "api/SMLHelper.Utility.IOUtilities.html": {
    "href": "api/SMLHelper.Utility.IOUtilities.html",
    "title": "Class IOUtilities",
    "keywords": "Class IOUtilities Utilities for files and paths Inheritance System.Object IOUtilities Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class IOUtilities Methods | Improve this Doc View Source Combine(String, String, String[]) Works like System.IO.Path.Combine(System.String,System.String) , but can have more than 2 paths Declaration public static string Combine(string one, string two, params string[] rest) Parameters Type Name Description System.String one System.String two System.String [] rest Returns Type Description System.String"
  },
  "api/SMLHelper.Utility.ItemStorageHelper.html": {
    "href": "api/SMLHelper.Utility.ItemStorageHelper.html",
    "title": "Class ItemStorageHelper",
    "keywords": "Class ItemStorageHelper A utility class that offers additional info about instances. Inheritance System.Object ItemStorageHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class ItemStorageHelper Methods | Improve this Doc View Source GetAllowedTechTypes(ItemsContainer) Gets the set of techtypes allowed in this container. This set can be altered. If the set is null or empty, then all items can be added. Declaration public static HashSet<TechType> GetAllowedTechTypes(ItemsContainer container) Parameters Type Name Description ItemsContainer container The container to check. Returns Type Description System.Collections.Generic.HashSet < TechType > The collection of techtypes allowed in the container. | Improve this Doc View Source GetStorageLabel(ItemsContainer) Get the inernal label for the storage container. Declaration public static string GetStorageLabel(ItemsContainer container) Parameters Type Name Description ItemsContainer container The container. Returns Type Description System.String The label used and displayed in-game for the container. | Improve this Doc View Source GetTotalSlots(ItemsContainer) The totals number of 1x1 slots in the container, as calculated by the container's width and height. Declaration public static int GetTotalSlots(ItemsContainer container) Parameters Type Name Description ItemsContainer container The container. Returns Type Description System.Int32 | Improve this Doc View Source HasRoomForCached(ItemsContainer, Int32, Int32) Using the cached container info, determines whether the specified container has room for an item of the specified size. Declaration public static bool HasRoomForCached(ItemsContainer container, int width, int height) Parameters Type Name Description ItemsContainer container The container to check. System.Int32 width The item width. System.Int32 height The item height. Returns Type Description System.Boolean true if there is room for the item in the container,; otherwise, false . | Improve this Doc View Source HasRoomForCached(ItemsContainer, Vector2int) Using the cached container info, determines whether the specified container has room for an item of the specified size. Declaration public static bool HasRoomForCached(ItemsContainer container, Vector2int itemSize) Parameters Type Name Description ItemsContainer container The container to check. Vector2int itemSize Size of the item. Returns Type Description System.Boolean true if there is room for the item in the container,; otherwise, false . | Improve this Doc View Source IsEmpty(ItemsContainer) Determines whether the specified container is empty. Declaration public static bool IsEmpty(ItemsContainer container) Parameters Type Name Description ItemsContainer container The items container to check. Returns Type Description System.Boolean true if the specified container is empty; otherwise, false . | Improve this Doc View Source IsFull(ItemsContainer) Determines whether the specified container is full. Declaration public static bool IsFull(ItemsContainer container) Parameters Type Name Description ItemsContainer container The items container to check. Returns Type Description System.Boolean true if the specified container is full; otherwise, false ."
  },
  "api/SMLHelper.Utility.JsonUtils.html": {
    "href": "api/SMLHelper.Utility.JsonUtils.html",
    "title": "Class JsonUtils",
    "keywords": "Class JsonUtils A collection of utilities for interacting with JSON files. Inheritance System.Object JsonUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class JsonUtils Methods | Improve this Doc View Source Load<T>(T, String, Boolean, JsonConverter[]) Loads data from the JSON file at path into the jsonObject . Declaration public static void Load<T>(T jsonObject, string path = null, bool createFileIfNotExist = true, params JsonConverter[] jsonConverters) where T : class Parameters Type Name Description T jsonObject The T instance to popular with JSON data. System.String path The path on disk at which the JSON file can be found. System.Boolean createFileIfNotExist Whether a new JSON file should be created with default values if it does not already exist. JsonConverter [] jsonConverters An array of s to be used for deserialization. Type Parameters Name Description T The type of jsonObject to populate with JSON data. See Also Load<T>(String, Boolean, JsonConverter[]) Save<T>(T, String, JsonConverter[]) | Improve this Doc View Source Load<T>(String, Boolean, JsonConverter[]) Create an instance of T , populated with data from the JSON file at the given path . Declaration public static T Load<T>(string path = null, bool createFileIfNotExist = true, params JsonConverter[] jsonConverters) where T : class, new() Parameters Type Name Description System.String path The path on disk at which the JSON file can be found. System.Boolean createFileIfNotExist Whether a new JSON file should be created with default values if it does not already exist. JsonConverter [] jsonConverters An array of s to be used for deserialization. Returns Type Description T The T instance populated with data from the JSON file at path , or default values if it cannot be found or an error is encountered while parsing the file. Type Parameters Name Description T The type of object to initialise and populate with JSON data. See Also Load<T>(T, String, Boolean, JsonConverter[]) Save<T>(T, String, JsonConverter[]) | Improve this Doc View Source Save<T>(T, String, JsonConverter[]) Saves the jsonObject parsed as JSON data to the JSON file at path , creating it if it does not exist. Declaration public static void Save<T>(T jsonObject, string path = null, params JsonConverter[] jsonConverters) where T : class Parameters Type Name Description T jsonObject The T instance to parse into JSON data. System.String path The path on disk at which to store the JSON file. JsonConverter [] jsonConverters An array of s to be used for serialization. Type Parameters Name Description T The type of jsonObject to parse into JSON data. See Also Load<T>(T, String, Boolean, JsonConverter[]) Load<T>(String, Boolean, JsonConverter[])"
  },
  "api/SMLHelper.Utility.KeyCodeUtils.html": {
    "href": "api/SMLHelper.Utility.KeyCodeUtils.html",
    "title": "Class KeyCodeUtils",
    "keywords": "Class KeyCodeUtils A collection of related utility methods. Inheritance System.Object KeyCodeUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class KeyCodeUtils Methods | Improve this Doc View Source GetAnalogValueForKey(KeyCode) Gets the analog value for a following the same logic as Declaration public static float GetAnalogValueForKey(this KeyCode keyCode) Parameters Type Name Description KeyCode keyCode Returns Type Description System.Single 1f while a key is being held, otherwise 0f See Also GetAnalogValueForKey(String) | Improve this Doc View Source GetAnalogValueForKey(String) Gets the analog value for a key by System.String value, following the same logic as Declaration public static float GetAnalogValueForKey(string s) Parameters Type Name Description System.String s Returns Type Description System.Single 1f while a key is being held, otherwise 0f See Also GetAnalogValueForKey(KeyCode) | Improve this Doc View Source GetKeyDown(KeyCode) Check this is the first frame a key has been pressed Declaration public static bool GetKeyDown(this KeyCode keyCode) Parameters Type Name Description KeyCode keyCode Returns Type Description System.Boolean True during the first frame a key has been pressed, otherwise false See Also GetKeyDown(String) | Improve this Doc View Source GetKeyDown(String) Check this is the first frame a key has been pressed. Declaration public static bool GetKeyDown(string s) Parameters Type Name Description System.String s Returns Type Description System.Boolean True during the first frame a key has been pressed, otherwise false See Also GetKeyDown(KeyCode) | Improve this Doc View Source GetKeyHeld(KeyCode) Check a key is currently held down Declaration public static bool GetKeyHeld(this KeyCode keyCode) Parameters Type Name Description KeyCode keyCode Returns Type Description System.Boolean True every frame a key is held down, otherwise false See Also GetKeyHeld(String) | Improve this Doc View Source GetKeyHeld(String) Check a key is currently held down Declaration public static bool GetKeyHeld(string s) Parameters Type Name Description System.String s Returns Type Description System.Boolean True every frame a key is held down, otherwise false See Also GetKeyHeld(KeyCode) | Improve this Doc View Source GetKeyHeldTime(KeyCode) Check how long a key has been held down Declaration public static float GetKeyHeldTime(this KeyCode keyCode) Parameters Type Name Description KeyCode keyCode Returns Type Description System.Single See Also GetKeyHeldTime(String) | Improve this Doc View Source GetKeyHeldTime(String) Check how long a key has been held down Declaration public static float GetKeyHeldTime(string s) Parameters Type Name Description System.String s Returns Type Description System.Single See Also GetKeyHeldTime(KeyCode) | Improve this Doc View Source GetKeyUp(KeyCode) Check this is the frame a key has been released Declaration public static bool GetKeyUp(this KeyCode keyCode) Parameters Type Name Description KeyCode keyCode Returns Type Description System.Boolean True during the first frame a key has been released, otherwise false See Also GetKeyUp(String) | Improve this Doc View Source GetKeyUp(String) Check this is the first frame a key has been released Declaration public static bool GetKeyUp(string s) Parameters Type Name Description System.String s Returns Type Description System.Boolean True during the first frame a key has been released, otherwise false See Also GetKeyUp(KeyCode) | Improve this Doc View Source KeyCodeToString(KeyCode) Turn a into a System.String Declaration public static string KeyCodeToString(this KeyCode keyCode) Parameters Type Name Description KeyCode keyCode Returns Type Description System.String | Improve this Doc View Source StringToKeyCode(String) Turn a System.String into a Declaration public static KeyCode StringToKeyCode(string s) Parameters Type Name Description System.String s Returns Type Description KeyCode"
  },
  "api/SMLHelper.Utility.MaterialModifiers.ColorModifier.html": {
    "href": "api/SMLHelper.Utility.MaterialModifiers.ColorModifier.html",
    "title": "Class ColorModifier",
    "keywords": "Class ColorModifier Basic material modifier that sets the property on all materials. Inheritance System.Object MaterialModifier ColorModifier Inherited Members MaterialModifier.BlockShaderConversion(Material, Renderer, MaterialUtils.MaterialType) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility.MaterialModifiers Assembly : SMLHelper.dll Syntax public sealed class ColorModifier : MaterialModifier Constructors | Improve this Doc View Source ColorModifier(Color) Sets the property on all materials. Declaration public ColorModifier(Color color) Parameters Type Name Description Color color Methods | Improve this Doc View Source EditMaterial(Material, Renderer, Int32, MaterialUtils.MaterialType) Applies the color changes to the material. Declaration public override void EditMaterial(Material material, Renderer renderer, int materialIndex, MaterialUtils.MaterialType materialType) Parameters Type Name Description Material material Renderer renderer System.Int32 materialIndex MaterialUtils.MaterialType materialType Overrides MaterialModifier.EditMaterial(Material, Renderer, Int32, MaterialUtils.MaterialType) Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Utility.MaterialModifiers.html": {
    "href": "api/SMLHelper.Utility.MaterialModifiers.html",
    "title": "Namespace SMLHelper.Utility.MaterialModifiers",
    "keywords": "Namespace SMLHelper.Utility.MaterialModifiers Classes ColorModifier Basic material modifier that sets the property on all materials. MaterialModifier Base class for material modifiers. Can be overriden to implement custom behaviour."
  },
  "api/SMLHelper.Utility.MaterialModifiers.MaterialModifier.html": {
    "href": "api/SMLHelper.Utility.MaterialModifiers.MaterialModifier.html",
    "title": "Class MaterialModifier",
    "keywords": "Class MaterialModifier Base class for material modifiers. Can be overriden to implement custom behaviour. Inheritance System.Object MaterialModifier ColorModifier Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility.MaterialModifiers Assembly : SMLHelper.dll Syntax public abstract class MaterialModifier Methods | Improve this Doc View Source BlockShaderConversion(Material, Renderer, MaterialUtils.MaterialType) Method called before any shader conversions and material modifiers are applied. By default returns false. If true is returned from ANY MaterialModifier, the shader of material will not be converted to MarmosetUBER. However, all modifiers will still be applied normally. Declaration public virtual bool BlockShaderConversion(Material material, Renderer renderer, MaterialUtils.MaterialType materialType) Parameters Type Name Description Material material The material being evalauted. Renderer renderer The renderer using the material . MaterialUtils.MaterialType materialType The type of material that this can be expected to be. Determined in ApplySNShaders(GameObject, Single, Single, Single, MaterialModifier[]) based on specific keywords. Returns Type Description System.Boolean | Improve this Doc View Source EditMaterial(Material, Renderer, Int32, MaterialUtils.MaterialType) Method called after all other material conversions have finished. Declaration public abstract void EditMaterial(Material material, Renderer renderer, int materialIndex, MaterialUtils.MaterialType materialType) Parameters Type Name Description Material material The material being modified. Renderer renderer The renderer using the material . System.Int32 materialIndex The index of the given material in its . MaterialUtils.MaterialType materialType The type of material that this can be expected to be. Determined in ApplySNShaders(GameObject, Single, Single, Single, MaterialModifier[]) based on specific keywords. Extension Methods ReflectionHelper.GetInstanceField<T>(T, String, BindingFlags) ReflectionHelper.SetInstanceField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetStaticField<T>(T, String, BindingFlags) ReflectionHelper.SetStaticField<T>(T, String, Object, BindingFlags) ReflectionHelper.GetInstanceMethod<T>(T, String, BindingFlags) ReflectionHelper.GetStaticMethod<T>(T, String, BindingFlags) ReflectionHelper.CopyFields<T>(T, T, BindingFlags) JsonExtensions.LoadJson<T>(T, String, Boolean, JsonConverter[]) JsonExtensions.SaveJson<T>(T, String, JsonConverter[])"
  },
  "api/SMLHelper.Utility.MaterialUtils.html": {
    "href": "api/SMLHelper.Utility.MaterialUtils.html",
    "title": "Class MaterialUtils",
    "keywords": "Class MaterialUtils Utilities related to Materials and Shaders. Inheritance System.Object MaterialUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class MaterialUtils Fields | Improve this Doc View Source kOpaqueRenderQueue Render queue used by opaque objects. Declaration public const int kOpaqueRenderQueue = 2000 Field Value Type Description System.Int32 | Improve this Doc View Source kTransparencyRenderQueue Render queue used by transparent objects. Declaration public const int kTransparencyRenderQueue = 3101 Field Value Type Description System.Int32 Properties | Improve this Doc View Source AirWaterBarrierMaterial Gets the Material used by Alien Bases for the transition between water and air. Declaration public static Material AirWaterBarrierMaterial { get; } Property Value Type Description Material | Improve this Doc View Source ForceFieldMaterial Gets the Precursor Force Field Material. Declaration public static Material ForceFieldMaterial { get; } Property Value Type Description Material | Improve this Doc View Source GhostMaterial Gets the material used by unfinished constructions. Declaration public static Material GhostMaterial { get; } Property Value Type Description Material | Improve this Doc View Source IonCubeMaterial Gets the default Ion Cube Material. Declaration public static Material IonCubeMaterial { get; } Property Value Type Description Material | Improve this Doc View Source PrecursorGlassMaterial Gets the Precursor Glass Material. Declaration public static Material PrecursorGlassMaterial { get; } Property Value Type Description Material | Improve this Doc View Source StasisFieldMaterial Gets the Stasis Rifle's ball Material. Declaration public static Material StasisFieldMaterial { get; } Property Value Type Description Material Methods | Improve this Doc View Source ApplySNShaders(GameObject, Single, Single, Single, MaterialModifier[]) Applies the necessary settings for Subnautica's standard shader ( MarmosetUBER ) to the passed . The specific changes to each material are influenced by certain keywords in their asset names: \"TRANSPARENT\": Enables transparency. \"CUTOUT\": Enables alpha clipping. Declaration public static void ApplySNShaders(GameObject gameObject, float shininess = 4F, float specularIntensity = 1F, float glowStrength = 1F, params MaterialModifier[] modifiers) Parameters Type Name Description GameObject gameObject The to apply the shaders to (includes all children). System.Single shininess '_Shininess' value of the shader. Recommended range of 1.0f-8.0f. System.Single specularIntensity '_SpecularInt' value of the shader. Values around 1f are recommended. System.Single glowStrength '_GlowStrength' and '_GlowStrengthNight' value of the shader. Should not be absurdly high. MaterialModifier [] modifiers Optional array of classes that inherit from the MaterialModifier class. This allows for extensive customization of the method. Called in ascending order on every material. | Improve this Doc View Source ApplyUBERShader(Material, Single, Single, Single, MaterialUtils.MaterialType) Applies the MarmosetUBER Shader to the given material. Declaration public static void ApplyUBERShader(Material material, float shininess, float specularIntensity, float glowStrength, MaterialUtils.MaterialType materialType) Parameters Type Name Description Material material The material to apply changes to. System.Single shininess '_Shininess' value of the shader. Recommended range of 1.0f-8.0f. System.Single specularIntensity '_SpecularInt' value of the shader. Values around 1f are recommended. System.Single glowStrength '_GlowStrength' and '_GlowStrengthNight' value of the shader. Should not be absurdly high. MaterialUtils.MaterialType materialType Controls various settings including alpha clipping and transparency. | Improve this Doc View Source SetMaterialCutout(Material, Boolean) Toggle alpha clipping on a material. Incompatbile with transparency. Declaration public static void SetMaterialCutout(Material material, bool cutout) Parameters Type Name Description Material material System.Boolean cutout | Improve this Doc View Source SetMaterialTransparent(Material, Boolean) Toggle the transparency on a material. Declaration public static void SetMaterialTransparent(Material material, bool transparent) Parameters Type Name Description Material material System.Boolean transparent"
  },
  "api/SMLHelper.Utility.MaterialUtils.MaterialType.html": {
    "href": "api/SMLHelper.Utility.MaterialUtils.MaterialType.html",
    "title": "Enum MaterialUtils.MaterialType",
    "keywords": "Enum MaterialUtils.MaterialType Enum for some generic types of Materials. Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public enum MaterialType Fields Name Description Cutout Transparent pixels on the texture are not renderered. Useful for decals. Opaque Solid material with no transparency. Transparent See-through material. Extension Methods EnumExtensions.IsDefinedByDefault<MaterialUtils.MaterialType>()"
  },
  "api/SMLHelper.Utility.MaterialUtils.Shaders.html": {
    "href": "api/SMLHelper.Utility.MaterialUtils.Shaders.html",
    "title": "Class MaterialUtils.Shaders",
    "keywords": "Class MaterialUtils.Shaders Contains references to various shaders. Inheritance System.Object MaterialUtils.Shaders Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class Shaders Properties | Improve this Doc View Source IonCube The that is used for Ion Cubes. Declaration public static Shader IonCube { get; } Property Value Type Description Shader | Improve this Doc View Source MarmosetUBER The that is used for most materials in the game. Declaration public static Shader MarmosetUBER { get; } Property Value Type Description Shader | Improve this Doc View Source ParticlesUBER The that is used for most particle systems. Declaration public static Shader ParticlesUBER { get; } Property Value Type Description Shader"
  },
  "api/SMLHelper.Utility.PlayerPrefsExtra.html": {
    "href": "api/SMLHelper.Utility.PlayerPrefsExtra.html",
    "title": "Class PlayerPrefsExtra",
    "keywords": "Class PlayerPrefsExtra A collection of utility methods that simplify calls into for quick custom save data. Inheritance System.Object PlayerPrefsExtra Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class PlayerPrefsExtra Methods | Improve this Doc View Source GetBool(String, Boolean) Get a System.Boolean value using Declaration public static bool GetBool(string key, bool defaultValue) Parameters Type Name Description System.String key System.Boolean defaultValue Returns Type Description System.Boolean | Improve this Doc View Source GetColor(String) Get a value using Declaration public static Color GetColor(string key) Parameters Type Name Description System.String key Returns Type Description Color | Improve this Doc View Source GetColor(String, Color) Get a value using Declaration public static Color GetColor(string key, Color defaultValue) Parameters Type Name Description System.String key Color defaultValue Returns Type Description Color | Improve this Doc View Source GetKeyCode(String, KeyCode) Get a value using Declaration public static KeyCode GetKeyCode(string key, KeyCode defaultValue) Parameters Type Name Description System.String key KeyCode defaultValue Returns Type Description KeyCode | Improve this Doc View Source GetQuaternion(String) Get a value using Declaration public static Quaternion GetQuaternion(string key) Parameters Type Name Description System.String key Returns Type Description Quaternion | Improve this Doc View Source GetQuaternion(String, Quaternion) Get a value using Declaration public static Quaternion GetQuaternion(string key, Quaternion defaultValue) Parameters Type Name Description System.String key Quaternion defaultValue Returns Type Description Quaternion | Improve this Doc View Source GetVector2(String) Get a value using Declaration public static Vector2 GetVector2(string key) Parameters Type Name Description System.String key Returns Type Description Vector2 | Improve this Doc View Source GetVector2(String, Vector2) Get a value using Declaration public static Vector2 GetVector2(string key, Vector2 defaultValue) Parameters Type Name Description System.String key Vector2 defaultValue Returns Type Description Vector2 | Improve this Doc View Source GetVector2int(String) Get a value using Declaration public static Vector2int GetVector2int(string key) Parameters Type Name Description System.String key Returns Type Description Vector2int | Improve this Doc View Source GetVector2int(String, Vector2int) Get a value using Declaration public static Vector2int GetVector2int(string key, Vector2int defaultValue) Parameters Type Name Description System.String key Vector2int defaultValue Returns Type Description Vector2int | Improve this Doc View Source GetVector3(String) Get a value using Declaration public static Vector3 GetVector3(string key) Parameters Type Name Description System.String key Returns Type Description Vector3 | Improve this Doc View Source GetVector3(String, Vector3) Get a value using Declaration public static Vector3 GetVector3(string key, Vector3 defaultValue) Parameters Type Name Description System.String key Vector3 defaultValue Returns Type Description Vector3 | Improve this Doc View Source GetVector4(String) Get a value using Declaration public static Vector4 GetVector4(string key) Parameters Type Name Description System.String key Returns Type Description Vector4 | Improve this Doc View Source GetVector4(String, Vector4) Get a value using Declaration public static Vector4 GetVector4(string key, Vector4 defaultValue) Parameters Type Name Description System.String key Vector4 defaultValue Returns Type Description Vector4 | Improve this Doc View Source SetBool(String, Boolean) Set a System.Boolean value using Declaration public static void SetBool(string key, bool value) Parameters Type Name Description System.String key System.Boolean value | Improve this Doc View Source SetColor(String, Color) Set a value using Declaration public static void SetColor(string key, Color value) Parameters Type Name Description System.String key Color value | Improve this Doc View Source SetKeyCode(String, KeyCode) Set a value using Declaration public static void SetKeyCode(string key, KeyCode value) Parameters Type Name Description System.String key KeyCode value | Improve this Doc View Source SetQuaternion(String, Quaternion) Set a value using Declaration public static void SetQuaternion(string key, Quaternion value) Parameters Type Name Description System.String key Quaternion value | Improve this Doc View Source SetVector2(String, Vector2) Set a value using Declaration public static void SetVector2(string key, Vector2 value) Parameters Type Name Description System.String key Vector2 value | Improve this Doc View Source SetVector2int(String, Vector2int) Set a value using Declaration public static void SetVector2int(string key, Vector2int value) Parameters Type Name Description System.String key Vector2int value | Improve this Doc View Source SetVector3(String, Vector3) Set a value using Declaration public static void SetVector3(string key, Vector3 value) Parameters Type Name Description System.String key Vector3 value | Improve this Doc View Source SetVector4(String, Vector4) Set a value using Declaration public static void SetVector4(string key, Vector4 value) Parameters Type Name Description System.String key Vector4 value"
  },
  "api/SMLHelper.Utility.PrefabUtils.html": {
    "href": "api/SMLHelper.Utility.PrefabUtils.html",
    "title": "Class PrefabUtils",
    "keywords": "Class PrefabUtils A small collection of prefab related utilities. Inheritance System.Object PrefabUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class PrefabUtils Methods | Improve this Doc View Source AddBasicComponents(GameObject, String, TechType, LargeWorldEntity.CellLevel) Adds and configures the following components on the prefab . - : Required for an object to be considered a prefab. - : Required for inventory items, crafting, scanning, etc. - : Required for objects to persist after saving and exiting. - : Added if Renderers exist in the hierarchy. Applies the correct lighting onto an object. Declaration public static void AddBasicComponents(GameObject prefab, string classId, TechType techType, LargeWorldEntity.CellLevel cellLevel) Parameters Type Name Description GameObject prefab The prefab to operate on. System.String classId The class ID associated with the specified prefab. TechType techType Ignored if is inputted. LargeWorldEntity.CellLevel cellLevel Level of distance this prefab can stay visible before unloading. | Improve this Doc View Source AddConstructable(GameObject, TechType, ConstructableFlags) Adds and configures the component on the specified prefab. Declaration public static Constructable AddConstructable(GameObject prefab, TechType techType, ConstructableFlags constructableFlags) Parameters Type Name Description GameObject prefab The prefab to operate on. TechType techType The tech type associated with the specified prefab. ConstructableFlags constructableFlags A bitmask comprised of one or more ConstructableFlags that specify how the prefab should be treated during placement. Returns Type Description Constructable The added constructable component."
  },
  "api/SMLHelper.Utility.ReflectionHelper.html": {
    "href": "api/SMLHelper.Utility.ReflectionHelper.html",
    "title": "Class ReflectionHelper",
    "keywords": "Class ReflectionHelper An extension method class for simplifying reflection calls for improved readability. Inheritance System.Object ReflectionHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class ReflectionHelper Methods | Improve this Doc View Source CopyFields<T>(T, T, BindingFlags) Does a deep copy of all field values from the original instance onto the copied instance. Declaration public static void CopyFields<T>(this T original, T copy, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters Type Name Description T original The original instance. T copy The instance receiving the copied values. System.Reflection.BindingFlags bindingFlags The additional binding flags you wish to set. System.Reflection.BindingFlags.Instance is already included. Type Parameters Name Description T The class type of both objects. | Improve this Doc View Source GetInstanceField<T>(T, String, BindingFlags) Gets the value of the requested private field, using reflection, from the instance object. Declaration public static object GetInstanceField<T>(this T instance, string fieldName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters Type Name Description T instance The instance. System.String fieldName Name of the private field. System.Reflection.BindingFlags bindingFlags The additional binding flags you wish to set. System.Reflection.BindingFlags.NonPublic and System.Reflection.BindingFlags.Instance are already included. Returns Type Description System.Object The value of the requested field as an System.Object . Type Parameters Name Description T The instance class type. | Improve this Doc View Source GetInstanceMethod<T>(T, String, BindingFlags) Gets the System.Reflection.MethodInfo of a private instance method, using refelction, from the instance object. Declaration public static MethodInfo GetInstanceMethod<T>(this T instance, string methodName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters Type Name Description T instance The instance. System.String methodName Name of the method. System.Reflection.BindingFlags bindingFlags The additional binding flags you wish to set. System.Reflection.BindingFlags.NonPublic and System.Reflection.BindingFlags.Instance are already included. Returns Type Description System.Reflection.MethodInfo The System.Reflection.MethodInfo of the requested private method. Type Parameters Name Description T The instance object type. | Improve this Doc View Source GetInstanceMethod<T>(String, BindingFlags) Gets the System.Reflection.MethodInfo of a private instance method, using refelction, from the specified class. Declaration public static MethodInfo GetInstanceMethod<T>(string methodName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters Type Name Description System.String methodName Name of the method. System.Reflection.BindingFlags bindingFlags The additional binding flags you wish to set. System.Reflection.BindingFlags.NonPublic and System.Reflection.BindingFlags.Instance are already included. Returns Type Description System.Reflection.MethodInfo The System.Reflection.MethodInfo of the requested private method. Type Parameters Name Description T The instance object type. | Improve this Doc View Source GetStaticField<T>(T, String, BindingFlags) Gets the value of the requested private static field, using reflection, from the instance object. Declaration public static object GetStaticField<T>(this T instance, string fieldName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters Type Name Description T instance The instance. System.String fieldName Name of the field. System.Reflection.BindingFlags bindingFlags The additional binding flags you wish to set. System.Reflection.BindingFlags.NonPublic and System.Reflection.BindingFlags.Static are already included. Returns Type Description System.Object The value of the requested static field as an System.Object . Type Parameters Name Description T The static class type. | Improve this Doc View Source GetStaticField<T>(String, BindingFlags) Gets the value of the requested private static field, using reflection, from the static object. Declaration public static object GetStaticField<T>(string fieldName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters Type Name Description System.String fieldName Name of the field. System.Reflection.BindingFlags bindingFlags The additional binding flags you wish to set. System.Reflection.BindingFlags.NonPublic and System.Reflection.BindingFlags.Static are already included. Returns Type Description System.Object The value of the requested static field as an System.Object . Type Parameters Name Description T The static class type. | Improve this Doc View Source GetStaticMethod<T>(T, String, BindingFlags) Gets the System.Reflection.MethodInfo of a private static method, using refelction, from the instance object. Declaration public static MethodInfo GetStaticMethod<T>(this T instance, string methodName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters Type Name Description T instance The instance. System.String methodName Name of the method. System.Reflection.BindingFlags bindingFlags The additional binding flags you wish to set. System.Reflection.BindingFlags.NonPublic and System.Reflection.BindingFlags.Static are already included. Returns Type Description System.Reflection.MethodInfo The System.Reflection.MethodInfo of the requested private method. Type Parameters Name Description T The object type. | Improve this Doc View Source GetStaticMethod<T>(String, BindingFlags) Gets the System.Reflection.MethodInfo of a private static method, using refelction, from the specified class. Declaration public static MethodInfo GetStaticMethod<T>(string methodName, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters Type Name Description System.String methodName Name of the method. System.Reflection.BindingFlags bindingFlags The additional binding flags you wish to set. System.Reflection.BindingFlags.NonPublic and System.Reflection.BindingFlags.Static are already included. Returns Type Description System.Reflection.MethodInfo The System.Reflection.MethodInfo of the requested private method. Type Parameters Name Description T The object type. | Improve this Doc View Source SetInstanceField<T>(T, String, Object, BindingFlags) Sets the value of the requested private field, using reflection, on the instance object. Declaration public static void SetInstanceField<T>(this T instance, string fieldName, object value, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters Type Name Description T instance The instance. System.String fieldName Name of the private field. System.Object value The value to set. System.Reflection.BindingFlags bindingFlags The additional binding flags you wish to set. System.Reflection.BindingFlags.NonPublic and System.Reflection.BindingFlags.Instance are already included. Type Parameters Name Description T The instance class type. | Improve this Doc View Source SetStaticField<T>(T, String, Object, BindingFlags) Sets the value of the requested private static field, using reflection, on the instance object. Declaration public static void SetStaticField<T>(this T instance, string fieldName, object value, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters Type Name Description T instance The instance. System.String fieldName Name of the field. System.Object value The value to set. System.Reflection.BindingFlags bindingFlags The additional binding flags you wish to set. System.Reflection.BindingFlags.NonPublic and System.Reflection.BindingFlags.Static are already included. Type Parameters Name Description T The static class type. | Improve this Doc View Source SetStaticField<T>(String, Object, BindingFlags) Sets the value of the requested private static field, using reflection, on the static object. Declaration public static void SetStaticField<T>(string fieldName, object value, BindingFlags bindingFlags = BindingFlags.Default) where T : class Parameters Type Name Description System.String fieldName Name of the field. System.Object value The value to set. System.Reflection.BindingFlags bindingFlags The additional binding flags you wish to set. System.Reflection.BindingFlags.NonPublic and System.Reflection.BindingFlags.Static are already included. Type Parameters Name Description T The static class type."
  },
  "api/SMLHelper.Utility.SaveUtils.html": {
    "href": "api/SMLHelper.Utility.SaveUtils.html",
    "title": "Class SaveUtils",
    "keywords": "Class SaveUtils A small collection of save data related utilities. Inheritance System.Object SaveUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class SaveUtils Methods | Improve this Doc View Source GetCurrentSaveDataDir() Returns the path to the current save slot's directory. Declaration public static string GetCurrentSaveDataDir() Returns Type Description System.String | Improve this Doc View Source RegisterOneTimeUseOnLoadEvent(Action) Registers a simple System.Action method to invoke the first time the player loads a saved game via the in game menu. Declaration public static void RegisterOneTimeUseOnLoadEvent(Action onLoadAction) Parameters Type Name Description System.Action onLoadAction The method to invoke. This action will not be invoked a second time. | Improve this Doc View Source RegisterOneTimeUseOnQuitEvent(Action) Registers a simple System.Action method to invoke the first time the player quits the game via the in game menu. Declaration public static void RegisterOneTimeUseOnQuitEvent(Action onQuitAction) Parameters Type Name Description System.Action onQuitAction The method to invoke. This action will not be invoked a second time. | Improve this Doc View Source RegisterOneTimeUseOnSaveEvent(Action) Registers a simple System.Action method to invoke the first time the player saves the game via the in game menu. Declaration public static void RegisterOneTimeUseOnSaveEvent(Action onSaveAction) Parameters Type Name Description System.Action onSaveAction The method to invoke. This action will not be invoked a second time. | Improve this Doc View Source RegisterOnLoadEvent(Action) Registers a simple System.Action method to invoke the first time the player loads a saved game via the in game menu. Declaration public static void RegisterOnLoadEvent(Action onLoadAction) Parameters Type Name Description System.Action onLoadAction The method to invoke. This action will not be invoked a second time. | Improve this Doc View Source RegisterOnQuitEvent(Action) Registers a simple System.Action method to invoke whenever the player quits the game via the in game menu. Declaration public static void RegisterOnQuitEvent(Action onQuitAction) Parameters Type Name Description System.Action onQuitAction The method to invoke. | Improve this Doc View Source RegisterOnSaveEvent(Action) Registers a simple System.Action method to invoke whenever the player saves the game via the in game menu. Declaration public static void RegisterOnSaveEvent(Action onSaveAction) Parameters Type Name Description System.Action onSaveAction The method to invoke. | Improve this Doc View Source UnregisterOnLoadEvent(Action) Removes a method previously added through RegisterOnLoadEvent(Action) so it is no longer invoked when loading the game. If you plan on using this, do not register an anonymous method. Declaration public static void UnregisterOnLoadEvent(Action onLoadAction) Parameters Type Name Description System.Action onLoadAction The method invoked. | Improve this Doc View Source UnregisterOnQuitEvent(Action) Removes a method previously added through RegisterOnSaveEvent(Action) so it is no longer invoked when quiting the game. If you plan on using this, do not register an anonymous method. Declaration public static void UnregisterOnQuitEvent(Action onQuitAction) Parameters Type Name Description System.Action onQuitAction The method invoked. | Improve this Doc View Source UnregisterOnSaveEvent(Action) Removes a method previously added through RegisterOnSaveEvent(Action) so it is no longer invoked when saving the game. If you plan on using this, do not register an anonymous method. Declaration public static void UnregisterOnSaveEvent(Action onSaveAction) Parameters Type Name Description System.Action onSaveAction The method invoked."
  },
  "api/SMLHelper.Utility.StorageHelperExtensions.html": {
    "href": "api/SMLHelper.Utility.StorageHelperExtensions.html",
    "title": "Class StorageHelperExtensions",
    "keywords": "Class StorageHelperExtensions Extension methods to provide static calls for into ItemStorageHelper methods. Inheritance System.Object StorageHelperExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : SMLHelper.Utility Assembly : SMLHelper.dll Syntax public static class StorageHelperExtensions Methods | Improve this Doc View Source GetAllowedTechTypes(ItemsContainer) Gets the set of techtypes allowed in this container. This set can be altered. If the set is null or empty, then all items can be added. Declaration public static HashSet<TechType> GetAllowedTechTypes(ItemsContainer container) Parameters Type Name Description ItemsContainer container The container to check. Returns Type Description System.Collections.Generic.HashSet < TechType > The collection of techtypes allowed in the container. | Improve this Doc View Source GetStorageLabel(ItemsContainer) Get the inernal label for the storage container. Declaration public static string GetStorageLabel(ItemsContainer container) Parameters Type Name Description ItemsContainer container The container. Returns Type Description System.String The label used and displayed in-game for the container. | Improve this Doc View Source GetTotalSlots(ItemsContainer) The totals number of 1x1 slots in the container, as calculated by the container's width and height. Declaration public static int GetTotalSlots(ItemsContainer container) Parameters Type Name Description ItemsContainer container The container. Returns Type Description System.Int32 | Improve this Doc View Source HasRoomCached(ItemsContainer, Int32, Int32) Using the cached container info, determines whether the specified container has room for an item of the specified size. Declaration public static bool HasRoomCached(this ItemsContainer container, int width, int height) Parameters Type Name Description ItemsContainer container The container to check. System.Int32 width The item width. System.Int32 height The item height. Returns Type Description System.Boolean true if there is room for the item in the container,; otherwise, false . | Improve this Doc View Source HasRoomCached(ItemsContainer, Vector2int) Using the cached container info, determines whether the specified container has room for an item of the specified size. Declaration public static bool HasRoomCached(this ItemsContainer container, Vector2int itemSize) Parameters Type Name Description ItemsContainer container The container to check. Vector2int itemSize Size of the item. Returns Type Description System.Boolean true if there is room for the item in the container,; otherwise, false . | Improve this Doc View Source IsEmpty(ItemsContainer) Determines whether the specified container is empty. Declaration public static bool IsEmpty(this ItemsContainer container) Parameters Type Name Description ItemsContainer container The items container to check. Returns Type Description System.Boolean true if the specified container is empty; otherwise, false . | Improve this Doc View Source IsFull(ItemsContainer) Determines whether the specified container is full. Declaration public static bool IsFull(this ItemsContainer container) Parameters Type Name Description ItemsContainer container The items container to check. Returns Type Description System.Boolean true if the specified container is full; otherwise, false ."
  },
  "guides/overview.html": {
    "href": "guides/overview.html",
    "title": "Guides",
    "keywords": "Guides TODO: Development Setup Guide TODO: Simple Mod Guide Updating from SML 2.0 to SML 3.0"
  },
  "guides/sml2-to-sml3.html": {
    "href": "guides/sml2-to-sml3.html",
    "title": "Namespace",
    "keywords": "In this article, we will be talking about the breaking changes for SML 2.0 that were implemented in SML 3.0. Namespace Since SML 3.0, the namespace has dropped the *.V2.* everywhere. // SMLHelper.csproj - <RootNamespace>SMLHelper.V2</RootNamespace> + <RootNamespace>SMLHelper</RootNamespace> Handlers Handlers no longer implement an interface matching their name. Additionally, they're now public static . This means they also no longer have a public static Main property anymore, so you will have to drop it from anywhere mentioned in your code. Handler.cs Following the handler interfaces change, the overly under-used Handler class will leave us in SML 3.0. // Handler.cs - namespace SMLHelper.V2 - { - using Interfaces; - - /// <summary> - /// A simple location where every SMLHelper handler class can be accessed. - /// </summary> - public static class Handler - { - public static IBioReactorHandler BioReactorHandler => Handlers.BioReactorHandler.Main; - - public static ICraftDataHandler CraftDataHandler => Handlers.CraftDataHandler.Main; - - public static ICraftTreeHandler CraftTreeHandler => Handlers.CraftTreeHandler.Main; - - public static IIngameMenuHandler IngameMenuHandler => Handlers.IngameMenuHandler.Main; - ... - } BioReactorHandler The BioReactorHandler class is removed in SML 3.0 because it only had one very simple method to patch, and was forcing patch-time. That means if you tried to modify a bio charge after SML's entry point, it didn't get applied. The following example demonstrates how you can implement the same functionality the BioReactorHandler class offered. - BioReactorHandler.SetBioreactorCharge(TechType.Peeper, 69f); + BaseBioReactor.charge[TechType.Peeper] = 69f; FishHandler Ever since this class has been added, it never received any further updates due to unpopularity among modders, and unfamiliarity with how creatures worked in general and thus, has been broken for a long time. The FishHandler will be removed in SML 3.0. At the time being, we have not added a system to replace it, so stay tuned for that. PDAEncyclopediaHandler And PDALogHandler Since SML 3.0, both of these handler methods were moved to PDAHandler as they only had one method each. PDAEncyclopedia.EntryData entry = new PDAEncyclopedia.EntryData() { key = \"SomeEncy\", path = \"Tech/Tools\", nodes = new[] { \"Tech\", \"Tools\" } }; - PDAEncyclopediaHandler.AddCustomEntry(entry); + PDAHandler.AddEncyclopediaEntry(entry); - PDALogHandler.AddCustomEntry(\"SomeLog\", \"SomeLanguageKey\"); + PDAHandler.AddLogEntry(\"SomeLog\", \"SomeLanguageKey\"); Enum Handlers In SML 3.0, enum handling will be made generic. Instead of working with individual handlers associated with the enum type (E.G: For TechType we had TechTypeHandler ), Now you can add a new enum value to any enum type by using EnumHandler.AddEntry<TEnum>(string enumName) . This means the following handlers are removed: TechTypeHandler BackgroundTypeHandler EquipmentHandler PingTypeHandler TechCategoryHandler TechGroupHandler CraftTreeTypeHandler - Only the methods below are removed: CreateCustomCraftTreeAndType ModdedCraftTreeTypeExists The EnumHandler class contains the following methods, all of them can be used for any enum type: Signature Summary EnumBuilder<TEnum> AddEntry<TEnum>(string name) Adds a new enum value instance of TEnum type. bool ModdedEnumExists<TEnum>(string name) Safely looks for a custom enum object from another mod. bool TryGetValue<TEnum>(string name, out TEnum enumValue) Safely looks for a custom enum object from another mod and outputs the instance if found. Note The EnumHandler class only takes care of registering a new enum object for an enum type. Further configuration is now handled via extension methods for the EnumBuilder type. Below we will talk about the necessary changes you will need to make your custom enum values work for each of the aforementioned handlers. Configuring Custom TechType Objects - TechType customTech = TechTypeHandler.AddTechType(\"CustomTech\", \"Custom Tech\", \"Custom Tech that makes me go yes.\", SpriteManager.Get(TechType.Titanium), unlockedAtStart: false); + TechType customTech = EnumHandler.AddEntry<TechType>(\"CustomTech\") + .WithPdaInfo(\"Custom Tech\", \"Custom Tech that makes me go yes.\", unlockedAtStart: false) + .WithIcon(SpriteManager.Get(TechType.Titanium)); Configuring Custom CraftData.BackgroundType Objects - CraftData.BackgroundType customBG = BackgroundTypeHandler.AddBackgroundType(\"CustomBackground\", SpriteManager.GetBackground(TechType.Battery)); + CraftData.BackgroundType customBG = EnumHandler.AddEntry<CraftData.BackgroundType>(\"CustomBackground\") + .WithBackground(SpriteManager.GetBackground(TechType.Battery)); Configuring Custom EquipmentType Objects - EquipmentType customEquipment = EquipmentHandler.AddEquipmentType(\"CustomEquipment\"); + EquipmentType customEquipment = EnumHandler.AddEntry<EquipmentType>(\"CustomEquipment\"); Configuring Custom PingType Objects - PingType customPing = PingHandler.RegisterNewPingType(\"CustomPing\", SpriteManager.Get(SpriteManager.Group.Pings, PingType.Signal.ToString())); + PingType customPing = EnumHandler.AddEntry<PingType>(\"CustomPing\") + .WithIcon(SpriteManager.Get(SpriteManager.Group.Pings, PingType.Signal.ToString())); Configuring Custom TechCategory and TechGroup Objects - TechGroup customGroup = TechGroupHandler.AddTechCategory(\"CustomGroup\", \"Custom Group\"); + TechGroup customGroup = EnumHandler.AddEntry<TechCategory>(\"CustomGroup\").WithPdaInfo(\"Custom Group\"); - TechCategory customCategory = TechCategoryHandler.AddTechCategory(\"CustomCategory\", \"Custom Category\"); - TechCategoryHandler.TryRegisterTechCategoryToTechGroup(customGroup, customCategory); + TechCategory customCategory = EnumHandler.AddEntry<TechCategory>(\"CustomCategory\").WithPdaInfo(\"Custom Group\") + .RegisterToTechGroup(customGroup); Configuring Custom CraftTree.Type Objects - ModCraftTreeRoot root = CraftTreeHandler.CreateCustomCraftTreeAndType(CustomTree, out CraftTree.Type customTree); + CraftTree.Type customTree = EnumHandler.AddEntry<CraftTree.Type>(\"CustomTree\") + .CreateCraftTreeRoot(out ModCraftTreeRoot root); root.AddTabNode(\"SomeTab\"); Options Lorem ipsum dolor sit amet. Qui error architecto in officiis molestiae sit molestiae perspiciatis non necessitatibus voluptatibus sit fugiat veritatis eos aliquam rerum. Et ducimus provident est veniam magni nam veniam possimus aut molestiae explicabo cum doloribus atque? Ut adipisci aspernatur eos modi adipisci in sapiente rerum. Qui velit quis sed quia nobis et aspernatur repudiandae. Qui internos autem id recusandae inventore est autem voluptas et repudiandae vitae qui dolorem sapiente aut corporis dolor. Cum earum voluptate ut odit mollitia sit veritatis quos vel maiores fuga sit omnis nisi et quos repellat qui magnam mollitia. Assets The Assets system received a complete rewrite in SML 3.0, making it the biggest change of this version. With this rewrite, asset classes are no longer an inherited chain mess, meaning Buildable , Craftable , CustomFabricator , Equipable , FishPrefab , PdaItem , Spawnable and ModPrefab classes have been removed. As of SML 3.0, the asset system will have three main parts: Custom Prefabs, Gadgets, and Prefab Templates. The following table represents all the previous asset classes and what they have been replaced with in SML 3.0. SML 2.0 (old) SML 3.0 (new) ModPrefab CustomPrefab Buildable , PdaItem ScanningGadget Equipable EquipmentGadget CustomFabricator FabricatorGadget Craftable CraftingGadget Spawnable ICustomPrefab.SetSpawns Custom Prefabs CustomPrefab is a class that takes care of registering gadgets, and also the game object into the game. This class is essentially equivalent to the previous ModPrefab class. It is what you will use to actually make a custom prefab. Gadgets To put it simply, Gadgets are classes that take certain data, and register them to the game for our custom prefab item. They are pretty much equivalent to the different asset classes and their properties we had before. Gadgets will be our primary way to interact with game systems, and add functionality to a tech type and/or class ID. Note Gadgets only interact with tech types and/or class IDs. They don't have any business with a prefab's game object. Prefab Templates Previously on SML 2.0, asset classes optionally also provided game objects (E.G: CustomFabricator ). To allow for diversity in the game object template you choose from, and also to make it easier to manage such functionality and modularize game objects, we have moved game object templates to their own system: Prefab templates. Prefab templates will be our main way to provide a base game object for custom prefabs. There are a couple of options you can choose from that suit your needs, however, it is not enforced to choose one, you can still build up a game object from scratch. A couple of prefab templates that will be available in SML 3.0 are the following: CloneTemplate EnergySourceTemplate FabricatorTemplate Custom Prefab Examples In this example, we will demonstrate how you can change an SML 2.0 custom prefab to the SML 3.0 system. SML 2.0 public class SeamothBrineResistanceModule : Equipable { public static TechType TechTypeID { get; protected set; } public SeamothBrineResistanceModule() : base(\"SeamothBrineResistModule\", \"Seamoth brine resistant coating\", \"Makes the Seamoth resistant to corrosive brine pools, by means of a protective coating.\") { OnFinishedPatching += () => { TechTypeID = this.TechType; }; } public override EquipmentType EquipmentType => EquipmentType.SeamothModule; public override TechType RequiredForUnlock => TechType.BaseUpgradeConsole; public override TechGroup GroupForPDA => TechGroup.VehicleUpgrades; public override TechCategory CategoryForPDA => TechCategory.VehicleUpgrades; public override CraftTree.Type FabricatorType => CraftTree.Type.SeamothUpgrades; public override string[] StepsToFabricatorTab => new string[] { \"SeamothModules\" }; public override QuickSlotType QuickSlotType => QuickSlotType.Passive; public override GameObject GetGameObject() { var prefab = CraftData.GetPrefabForTechType(TechType.SeamothElectricalDefense); var obj = GameObject.Instantiate(prefab); return obj; } protected override TechData GetBlueprintRecipe() { return new TechData() { craftAmount = 1, Ingredients = { new Ingredient(TechType.Polyaniline, 1), new Ingredient(TechType.CopperWire, 2), new Ingredient(TechType.AluminumOxide, 2), new Ingredient(TechType.Nickel, 1), }, }; } } SML 3.0 // Create a custom prefab instance and set the class ID, friendly name, and description respectively var seamothBrineResistanceModule = new CustomPrefab( \"SeamothBrineResistModule\", \"Seamoth brine resistant coating\", \"Makes the Seamoth resistant to corrosive brine pools, by means of a protective coating.\"); // Set our prefab to a clone of the Seamoth electrical defense module seamothBrineResistanceModule.SetPrefab(new CloneTemplate(seamothBrineResistanceModule.Info, TechType.SeamothElectricalDefense)); // Make our item compatible with the seamoth module slot seamothBrineResistanceModule.SetEquipment(EquipmentType.SeamothModule) .WithQuickSlotType(QuickSlotType.Passive); // Make the Vehicle upgrade console a requirement for our item's blueprint ScanningGadget scanning = seamothBrineResistanceModule.SetUnlock(TechType.BaseUpgradeConsole) // Add our item to the Vehicle upgrades category scanning.WithPdaGroupCategory(TechGroup.VehicleUpgrades, TechCategory.VehicleUpgrades); var recipe = new RecipeData() { craftAmount = 1, Ingredients = { new CraftData.Ingredient(TechType.Polyaniline, 1), new CraftData.Ingredient(TechType.CopperWire, 2), new CraftData.Ingredient(TechType.AluminumOxide, 2), new CraftData.Ingredient(TechType.Nickel, 1), }, }; // Add a recipe for our item, as well as add it to the Moonpool fabricator and Seamoth modules tab seamothBrineResistanceModule.SetRecipe(recipe) .WithFabricatorType(CraftTree.Type.SeamothUpgrades) .WithStepsToFabricatorTab(\"SeamothModules\"); // Register our item to the game seamothBrineResistanceModule.Register(); This example is based off of a real mod. You can get access to the full source code here . Audio and FMOD In the last few versions of SML 2, we made a lot of changes to the audio system SML offered, this was because of FMOD. FMOD is the sound engine Subnautica uses. It is more advanced and flexible compared to the built-in Unity audio system. Since we discovered the best practices and better ways to deal with custom sounds, we have deleted a bunch of previously-obsolete methods from CustomSoundHandler and AudioUtils classes, as well as the SoundChannel enumeration in SML 3.0. Beginning with SML 3.0, all custom sounds will require a bus instead of a SoundChannel to determine the effects (E.G: reverb, muffling, low-pass, etc..) and the volume slider that should affect a custom sound. Additionally, the PlaySound signature was also modified and renamed to TryPlaySound . - Channel channel = AudioUtils.PlaySound(soundPath, SoundChannel.Music); + if (AudioUtils.TryPlaySound(soundPath, AudioUtils.BusPaths.Music, out Channel channel)) + { + // do something with channel + } - Channel channel = AudioUtils.PlaySound(soundPath, SoundChannel.Voice); + if (AudioUtils.TryPlaySound(soundPath, AudioUtils.BusPaths.PDAVoice, out Channel channel)) + { + // do something with channel + } - Channel channel = AudioUtils.PlaySound(soundPath, SoundChannel.Ambient); + if (AudioUtils.TryPlaySound(soundPath, AudioUtils.BusPaths.UnderwaterAmbient, out Channel channel)) + { + // do something with channel + } - Channel channel = AudioUtils.PlaySound(soundPath, SoundChannel.Master); + if (AudioUtils.TryPlaySound(soundPath, \"bus:/\", out Channel channel)) + { + // do something with channel + } Warning Creating or playing a custom sound on the master bus is il-advised as it is dangerous and has the possibility of breaking the audio for a game session. Try to set an appropriate bus for your sound instead of the master one."
  },
  "index.html": {
    "href": "index.html",
    "title": "SMLHelper Library",
    "keywords": "SMLHelper Library Lorem ipsum dolor sit amet. Non inventore quia est vitae assumenda a dolorum ipsum est modi sunt vel architecto modi ad sequi eaque. Non necessitatibus quaerat et voluptatem facere aut cupiditate officiis et minus fugit cum aliquid minus. Ex voluptatem laboriosam aut magnam corporis ad quasi dolorem. Eos nulla consequatur qui labore laborum id alias eveniet quo eius aperiam. Non itaque nesciunt est quam itaque aut rerum quia. Sit adipisci aperiam ut cupiditate necessitatibus sed omnis quod qui libero dolorem aut explicabo culpa et voluptas aspernatur. Hic dolor fugit est voluptatem magnam hic consequatur veritatis. Non provident tempora a consequatur unde et voluptatem dicta et rerum alias."
  },
  "README.html": {
    "href": "README.html",
    "title": "Contributing",
    "keywords": "Before contributing, make sure you have .NET SDK installed, then open a terminal and enter the following command to install docfx: dotnet tool update -g docfx To build the website locally, run the following command: docfx SMLHelper/docfx.json --serve The website will then be launched on http://localhost:8080 and you can preview it. Contributing Simply make a PR to the docs branch with your changes. Make sure to add your documentation files (markdown) to the toc.yml appropriate for the type of document you're trying to add as well. Please refrain from pushing C# changes to the docs branch."
  },
  "tutorials/background-type.html": {
    "href": "tutorials/background-type.html",
    "title": "How does the game handle background colors for items?",
    "keywords": "How does the game handle background colors for items? The game has a built-in enum called BackgroundType , which sits in the CraftData class. The possible values for this enum are listed below. public enum BackgroundType { Normal, Blueprint, PlantWater, PlantWaterSeed, PlantAir, PlantAirSeed, ExosuitArm } How can I create a custom background type? To create a new custom background type, you will need to register an image as the background for some BackgroundType instance. Fortunately, the custom enums system has made this step really simple. All you will have to do is name your brand new BackgroundType instance, then register an image for it. private void Awake() { var myCustomBackground = EnumHandler.AddEntry<CraftData.BackgroundType>(\"CustomBackground\") .WithBackground(ImageUtils.LoadSpriteFromFile(pathToImage)); } And that's it. Now you can use the new CraftData.BackgroundType instance anywhere you want. How can I change an item's background? To edit an item's background type, you need to call the CraftDataHandler.SetBackgroundType method sitting in the SMLHelper.Handlers namespace Examples The following example demonstrates the usage of SetBackgroundType That makes the titanium background color green. CraftDataHandler.SetBackgroundType(TechType.Titanium, CraftData.BackgroundType.PlantAirSeed); Similarly, if we wanted to set the titanium's background to our custom background from earlier, it would look like the following: CraftDataHandler.SetBackgroundType(TechType.Titanium, myCustomBackground);"
  },
  "tutorials/console-commands.html": {
    "href": "tutorials/console-commands.html",
    "title": "Supported Parameter Types",
    "keywords": "SMLHelper provides a simple API for allowing you to define custom console commands for your mod to respond to when the user types them into the in-game dev console, with simple parameter type checking to enable user- and developer-friendly error reporting, both on-screen and in the log. Supported Parameter Types Currently, only the following types are supported by the API: string bool int float double If you wish to use a type not in this list, it is recommended to use string (as that is what the value coming from the user will be anyway) and handle converting and error-checking the value for yourself. If the user provides incorrect parameters for a command, they will be notified of the expected parameters on-screen and in the log file. Registering a Custom Console Command There are three ways to register custom console commands, so you can use whichever suits your purpose or coding-style best. Warning Registered commands must be unique. If any mod has already added the command, your command will be rejected. Note A command can have a return type, but it is not necessary. If it does return any type, it will be printed on-screen and in the log file. Registering a delegate (Callback) as a Command By calling ConsoleCommandsHandler.RegisterConsoleCommand<T>(string command, T callback) , you can pass an instance of the delegate, whether it is an anonymous lambda or reference to a method that implements the delegate signature to register your callback as a response to the command. Note that with a delegate command, it is not possible to use optional parameters. If you want optional parameters, it is recommended to register a public static method as a command instead. In the example below, we are registering a console command by the use of a delegate. The delegate will respond to the \"delegatecommand\" command from the dev console in the game. You can also use System.Func or System.Action delegates to define the signature for your command signature. using BepInEx; using SMLHelper.Handlers; [BepInPlugin(PluginInfo.GUID, PluginInfo.MOD_NAME, PluginInfo.VERSION)] public class MyPlugin : BaseUnityPlugin { private void Start() { ConsoleCommandsHandler.RegisterConsoleCommand<MyCommand>(\"delegatecommand\", (myString, myInt, myBool) => { return $\"Parameters: {myString} {myInt} {myBool}\"; }); } private delegate string MyCommand(string myString, int myInt, bool myBool); } The command: delegatecommand foo 3 true is a valid signature for the code above. Registering a public static Method as a Command By calling ConsoleCommandsHandler.RegisterConsoleCommand(string command, Type declaringType, string methodName, Type[] parameters = null) , you can specify a public static method as a response to the command. The API here is similar to Harmony in that it will search for the method in the given type, using the optional Type[] parameters to target overloads. In the example below, we are registering a console command by specifying a target method. The method will respond to the \"methodcommand\" command from the dev console in the game. using BepInEx; using SMLHelper.Handlers; [BepInPlugin(PluginInfo.GUID, PluginInfo.MOD_NAME, PluginInfo.VERSION)] public class MyPlugin : BaseUnityPlugin { private void Start() { ConsoleCommandsHandler.RegisterConsoleCommand(\"methodcommand\", typeof(MyMod), nameof(MyCommand)); Logger.LogInfo(\"Patched successfully!\"); } public static string MyCommand(string myString, int myInt, bool myBool = false) { return $\"Parameters: {myString} {myInt} {myBool}\"; } } The command: methodcommand foo 3 true is a valid signature for the code above. Registering Multiple public static Methods Within a Class as Commands By calling ConsoleCommandsHandler.RegisterConsoleCommands(Type type) , you can register all public static methods decorated with the ConsoleCommandAttribute as console commands. In the example below, we are registering all console commands specified in the MyConsoleCommands types as console commands. Methods decorated with the ConsoleCommandAttribute will respond to the specified command from the dev console in the game. using BepInEx; using SMLHelper.Commands; using SMLHelper.Handlers; [BepInPlugin(PluginInfo.GUID, PluginInfo.MOD_NAME, PluginInfo.VERSION)] public class MyPlugin : BaseUnityPlugin { private void Start() { ConsoleCommandsHandler.RegisterConsoleCommands(typeof(MyConsoleCommands)); Logger.Log(Logger.Level.Info, \"Patched successfully!\"); } } public static class MyConsoleCommands { /// The MyAttributedCommand method will respond to the \"attributedcommand\" command from the dev console. [ConsoleCommand(\"attributedcommand\")] public static string MyAttributedCommand(string myString, int myInt, bool myBool = false) { return $\"Parameters: {myString} {myInt} {myBool}\"; } } The commands: attributedcommand foo 3 true attributedcommand foo 3 are both valid signatures for the code above. Note Optional arguments can be ignored when executing a command in the dev console. When ignored, the specified default value will be used instead."
  },
  "tutorials/equipment-type.html": {
    "href": "tutorials/equipment-type.html",
    "title": "What are equipment types?",
    "keywords": "What are equipment types? EquipmentType is an enum that handles special items. The possible values for this enum are listed below. public enum EquipmentType { None, // Normal item Hand, // The item can be equipped in the Hand slot Head, // The item can be equipped in the Head slot Body, // The item can be equipped in the Body slot Gloves, // The item can be equipped in the Gloves slot Foots, // The item can be equipped in the Feet slot Tank, // The item can be equipped in the Oxygen Tank slot Chip, // The item can be equipped in the Chip slots CyclopsModule, // The item can be equipped in the Cyclops as an upgrade module VehicleModule, // The item can be equipped both in the Seamoth and in the Prawn Suit as an upgrade module NuclearReactor, // The item can be used in a Nuclear Reactor BatteryCharger, // When batteries are thrown in it, they get charged (for buildables) PowerCellCharger, // When power cells are thrown in it, they get charged (for buildables) SeamothModule, // The item can be equipped in the Seamoth as an upgrade module ExosuitModule, // The item can be equipped in the Prawn Suit as an upgrade module ExosuitArm, // The item can be equipped in the Prawn Suit as an arm DecoySlot // (Need actual name) Possibly for the decoy tube thing in the cyclops } How can I create a custom background type? Since equipment types are simply just enums, we can use the enum handler to create a new instance. private void Awake() { var myCustomEquipmentType = EnumHandler.AddEntry<EquipmentType>(\"CustomEquipmentType\"); } And that's it. Now you can use the new CraftData.BackgroundType instance anywhere you want. How can edit an item's equipment type? To edit an item's equipment type, you need to call the CraftDataHandler.SetEquipmentType method sitting in the SMLHelper.Handlers namespace Examples The following example demonstrates the usage of SetEquipmentType that enables the player to wear titanium on their head. CraftDataHandler.SetEquipmentType(TechType.Titanium, EquipmentType.Head); Similarly, if we wanted to set the titanium's equipment type to our custom equipment type from earlier, it would look like the following: CraftDataHandler.SetBackgroundType(TechType.Titanium, myCustomEquipmentType); If you're setting the equipment type for a custom prefab, we recommend using the ICustomPrefab.SetEquipment method instead. var customPrefab = new CustomPrefab(\"CustomItem\", \".\", \".\"); customPrefab.SetEquipment(EquipmentType.Head); // rest of the custom prefab configuration is omitted for brevity. Warning It is dangerous to edit equipment types for items that already have one, because they can break. For instance, modifying the equipment type for the Radiation Helmet will disable the player from wearing it."
  },
  "tutorials/overview.html": {
    "href": "tutorials/overview.html",
    "title": "Sections",
    "keywords": "This section covers step-by-step tutorials on how to get some of the useful features of SML 3.0 done with images, demos, and working code. If you've used SML 2.0 before, please start with our Updating to SML 3.0 Guide page. Sections Adding Content Spawns Custom Console Commands TODO: Audio (FMOD) Editing Content Background Type Equipment Type TODO: Crafting Recipes Utilities TODO: Localization TODO: In-Game Options"
  },
  "tutorials/spawns.html": {
    "href": "tutorials/spawns.html",
    "title": "Coordinated Spawns",
    "keywords": "Most of the time in Subnautica, the game uses two different ways to spawn objects; static spawns that always have a fixed position in the world to spawn in, and loot distribution which is biome-based and sudo-random. SMLHelper offers modders to add spawns to either systems. You can add spawns for your own custom item, you can also edit vanilla spawns, or straight up remove them. Coordinated Spawns Coordinated spawns is SMLHelper's version of the aforementioned static spawns. With this system, you are allowed to specify exact world position and rotation spawns for an item. You may register one or more coordinated spawn(s) for any item by providing either their class ID, or their tech type. Examples The following examples demonstrate the usage of CoordinatedSpawnsHandler methods. private void Awake() { // Adds a Reaper Leviathan to the lava lakes SpawnInfo reaperInfo = new SpawnInfo(TechType.ReaperLeviathan, new Vector3(280f, -1400f, 47f)); // Lava Lakes CoordinatedSpawnsHandler.RegisterCoordinatedSpawn(reaperInfo); // Adds multiple spawn infos at once // Sand Shark's class ID string sandSharkId = \"5e5f00b4-1531-45c0-8aca-84cbd3b580a4\"; var spawnInfos = new List<SpawnInfo>() { new SpawnInfo(TechType.Seamoth, Vector3.zero), new SpawnInfo(sandSharkId, new Vector3(10, -4, 5), Vector3.up * 90f) // rotate its Y axis 90 degrees } CoordinatedSpawnsHandler.RegisterCoordinatedSpawns(spawnInfos); // Spawns a batch of titaniums around 10, -3, 15 world position var randomPositions = RandomPositions(new Vector3(10f, -3f, 15f)); CoordinatedSpawnsHandler.RegisterCoordinatedSpawnsForOneTechType( TechType.Titanium, randomPositions); } private List<Vector3> RandomPositions(Vector3 centerPosition) { var result = new List<Vector3>(); for (int i = 0; i < 5; i++) { result.Add(centerPosition + (Random.insideUnitSphere * i)); } return result; } For custom prefabs, it is advised to use the ICustomPrefab.SetSpawns(SpawnLocation[]) method instead of directly interacting with the CoordinatedSpawnsHandler class. The example below demonstrates the usage of the SetSpawns method. var blueReaper = new CustomPrefab(PrefabInfo.WithTechType(\"BlueReaper\", \"Blue Reaper Leviathan\", null)); // Creates a clone of the Reaper Leviathan prefab and colors it blue, then set the new prefab as our Blue Reaper's game object. var blueReaperPrefab = new CloneTemplate(blueReaper.Info, TechType.ReaperLeviathan) { ModifyPrefab = prefab => prefab.GetComponentsInChildren<Renderer>().ForEach(r => r.materials.ForEach(m => m.color = Color.blue)) }; blueReaper.SetPrefab(blueReaperPrefab); // Adds a spawn for our Blue Reaper Leviathan in the lava lakes. blueReaper.SetSpawns(new SpawnLocation(280f, -1400, 47f)); // Register the Blue Reaper Leviathan to the game. blueReaper.Register(); Loot Distribution Loot distribution system is by far the most widely used spawning system in the game. Unlike static spawns, SMLHelper does not have it's own version of this system, so we will be registering distributions into the game's system. Loot distribution only allows adding or editing distributions using a class ID and prefab file name. You normally will also need to provide a biome type, probability, and count for each loot you want to add. Below is a table of all the parameters you may interact with in the loot distribution system. Parameter Name Type Description classId string The classId of the entity to add loot for. prefabFileName string The internal file path of the entity to add. biomeDistribution LootDistributionData.BiomeData The biome data in which this entity might spawn in. probability float The chance of this entity spawning. This value can only be between 0-1 inclusive. 0 being no chance of spawning, while 1 is guaranteed to spawn. count float Multiplies 1 with this value. This multiplication is accounted everytime this entity has the highest chance to spawn, not a global count. srcData LootDistributionData.SrcData A class that combines the prefab file name and biome distribution to one data type. entityInfo WorldEntityInfo Contains information on how to spawn this entity. E.G: The size it should spawn in as, and how far it can stay before unloading. Warning An Entity Info for each class ID to spawn via loot distribution is required. If an entity info does not have one, the loot distribution will ignore it. Note Usually, vanilla prefabs do have a world entity info assigned to them. While you can, you don't have to register a new one for those that already have one. Examples The following examples demonstrate the usage of LootDistributionHandler methods. // Drillable Sulphur's class ID string drillableSulphurClassId = \"697beac5-e39a-4809-854d-9163da9f997e\"; var biomes = new LootDistribution.BiomeData[] { // Lost river's bones field ground new LootDistributionData.BiomeData { biome = BiomeType.BonesField_Ground, count = 1, probability = 0.07f }, // Inactive Lava Zone floor, near the lava new LootDistributionData.BiomeData { biome = BiomeType.InactiveLavaZone_Chamber_Floor_Far, count = 1, probability = 0.05f } }; // Add spawn for the drillable sulphur LootDistributionHandler.AddLootDistributionData(drillableSulphurClassId, biomes); string rockgrubClassId = CraftData.GetClassIdForTechType(TechType.Rockgrub); // Prevents the rockgrub from spawning in the Bulb zone caves. LootDistributionHandler.EditLootDistributionData(rockgrubClassId, BiomeType.KooshZone_CaveWall, 0f, 0); For custom prefabs, it is advised to use the ICustomPrefab.SetSpawns(LootDistributionData.BiomeData[]) method instead of directly interacting with the LootDistributionHandler class. The example below demonstrates the usage of the SetSpawns method. PrefabInfo titaniumCloneInfo = PrefabInfo.WithTechType(\"TitaniumClone\", \"Titanium Clone\", \"Titanium clone that makes me go yes.\"); // Set the vanilla titanium icon for our item titaniumCloneInfo.WithIcon(SpriteManager.Get(TechType.Titanium)); CustomPrefab titaniumClone = new CustomPrefab(titaniumCloneInfo); // Creates a clone of the Titanium prefab and colors it red, then set the new prefab as our Titanium Clone's game object. PrefabTemplate cloneTemplate = new CloneTemplate(titaniumCloneInfo, TechType.Titanium) { // Callback to change all material colors of this clone to red. ModifyPrefab = prefab => prefab.GetComponentsInChildren<Renderer>().ForEach(r => r.materials.ForEach(m => m.color = Color.red)) }; titaniumClone.SetPrefab(cloneTemplate); titaniumClone.SetSpawns( // Adds a chance for our titanium clone to spawn in Safe shallows grass, x4 each time. new BiomeData { biome = BiomeType.SafeShallows_Grass, count = 4, probability = 0.1f }, // Adds a chance for our titanium clone to spawn in Safe shallows caves, once each time. new BiomeData { biome = BiomeType.SafeShallows_CaveFloor, count = 1, probability = 0.4f }); // Register the Titanium Clone to the game. titaniumClone.Register(); See also CoordinatedSpawnsHandler LootDistributionHandler"
  }
}